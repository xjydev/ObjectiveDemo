/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "API.h"

@implementation Response

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSString *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *other = (Response *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSString *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Response"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Response("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUid: (int32_t) uid name: (NSString *) name
{
  self = [super init];
  __uid = uid;
  __uid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt32ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uid_isset)
  {
    [encoder encodeInt32: __uid forKey: @"uid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AUser class]]) {
    return NO;
  }
  AUser *other = (AUser *)anObject;
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) uid {
  return __uid;
}

- (void) setUid: (int32_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AUser"];
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__uid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uid' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AUser("];
  [ms appendString: @"uid:"];
  [ms appendFormat: @"%i", __uid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseUserList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableArray *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseUserList class]]) {
    return NO;
  }
  ResponseUserList *other = (ResponseUserList *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            AUser *_elem2 = [[AUser alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseUserList"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx4;
        for (idx4 = 0; idx4 < [__data count]; idx4++)
        {
          [[__data objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseUserList("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Auth

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppId: (NSString *) AppId uid: (int64_t) uid
{
  self = [super init];
  __AppId = [AppId retain_stub];
  __AppId_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"AppId"])
  {
    __AppId = [[decoder decodeObjectForKey: @"AppId"] retain_stub];
    __AppId_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__AppId_isset)
  {
    [encoder encodeObject: __AppId forKey: @"AppId"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __AppId_isset ? 2654435761 : 0;
  if (__AppId_isset)
  {
    hash = (hash * 31) ^ [__AppId hash];
  }
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Auth class]]) {
    return NO;
  }
  Auth *other = (Auth *)anObject;
  if ((__AppId_isset != other->__AppId_isset) ||
      (__AppId_isset && ((__AppId || other->__AppId) && ![__AppId isEqual:other->__AppId]))) {
    return NO;
  }
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__AppId release_stub];
  [super dealloc_stub];
}

- (NSString *) AppId {
  return [[__AppId retain_stub] autorelease_stub];
}

- (void) setAppId: (NSString *) AppId {
  [AppId retain_stub];
  [__AppId release_stub];
  __AppId = AppId;
  __AppId_isset = YES;
}

- (BOOL) AppIdIsSet {
  return __AppId_isset;
}

- (void) unsetAppId {
  [__AppId release_stub];
  __AppId = nil;
  __AppId_isset = NO;
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Auth"];
  if (__AppId_isset) {
    if (__AppId != nil) {
      [outProtocol writeFieldBeginWithName: @"AppId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __AppId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__AppId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'AppId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Auth("];
  [ms appendString: @"AppId:"];
  [ms appendFormat: @"\"%@\"", __AppId];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation InvalidOperation

- (id) init
{
  return [super initWithName: @"InvalidOperation" reason: @"unknown" userInfo: nil];
}

- (id) initWithWhatOp: (int32_t) whatOp why: (NSString *) why
{
  self = [self init];
  __whatOp = whatOp;
  __whatOp_isset = YES;
  __why = [why retain_stub];
  __why_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"whatOp"])
  {
    __whatOp = [decoder decodeInt32ForKey: @"whatOp"];
    __whatOp_isset = YES;
  }
  if ([decoder containsValueForKey: @"why"])
  {
    __why = [[decoder decodeObjectForKey: @"why"] retain_stub];
    __why_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__whatOp_isset)
  {
    [encoder encodeInt32: __whatOp forKey: @"whatOp"];
  }
  if (__why_isset)
  {
    [encoder encodeObject: __why forKey: @"why"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __whatOp_isset ? 2654435761 : 0;
  if (__whatOp_isset)
  {
    hash = (hash * 31) ^ [@(__whatOp) hash];
  }
  hash = (hash * 31) ^ __why_isset ? 2654435761 : 0;
  if (__why_isset)
  {
    hash = (hash * 31) ^ [__why hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[InvalidOperation class]]) {
    return NO;
  }
  InvalidOperation *other = (InvalidOperation *)anObject;
  if ((__whatOp_isset != other->__whatOp_isset) ||
      (__whatOp_isset && (__whatOp != other->__whatOp))) {
    return NO;
  }
  if ((__why_isset != other->__why_isset) ||
      (__why_isset && ((__why || other->__why) && ![__why isEqual:other->__why]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__why release_stub];
  [super dealloc_stub];
}

- (int32_t) whatOp {
  return __whatOp;
}

- (void) setWhatOp: (int32_t) whatOp {
  __whatOp = whatOp;
  __whatOp_isset = YES;
}

- (BOOL) whatOpIsSet {
  return __whatOp_isset;
}

- (void) unsetWhatOp {
  __whatOp_isset = NO;
}

- (NSString *) why {
  return [[__why retain_stub] autorelease_stub];
}

- (void) setWhy: (NSString *) why {
  [why retain_stub];
  [__why release_stub];
  __why = why;
  __why_isset = YES;
}

- (BOOL) whyIsSet {
  return __why_isset;
}

- (void) unsetWhy {
  [__why release_stub];
  __why = nil;
  __why_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWhatOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWhy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidOperation"];
  if (__whatOp_isset) {
    [outProtocol writeFieldBeginWithName: @"whatOp" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __whatOp];
    [outProtocol writeFieldEnd];
  }
  if (__why_isset) {
    if (__why != nil) {
      [outProtocol writeFieldBeginWithName: @"why" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __why];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"InvalidOperation("];
  [ms appendString: @"whatOp:"];
  [ms appendFormat: @"%i", __whatOp];
  [ms appendString: @",why:"];
  [ms appendFormat: @"\"%@\"", __why];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation APIConstants
+ (void) initialize {
}
@end

@interface getVerificationWithCode_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  NSString * __mobile;

  BOOL __auth_isset;
  BOOL __mobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSString * mobile;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobile;
- (void) setMobile: (NSString *) mobile;
#endif
- (BOOL) mobileIsSet;

@end

@implementation getVerificationWithCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getVerificationWithCode_args class]]) {
    return NO;
  }
  getVerificationWithCode_args *other = (getVerificationWithCode_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__mobile release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getVerificationWithCode_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__mobile_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobile' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getVerificationWithCode_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetVerificationWithCode_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetVerificationWithCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetVerificationWithCode_result class]]) {
    return NO;
  }
  GetVerificationWithCode_result *other = (GetVerificationWithCode_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVerificationWithCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVerificationWithCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IpadPSRClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getVerificationWithCode: (Auth *) auth mobile: (NSString *) mobile
{
  [outProtocol writeMessageBeginWithName: @"getVerificationWithCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getVerificationWithCode_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (mobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: mobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_getVerificationWithCode
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetVerificationWithCode_result * result = [[[GetVerificationWithCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getVerificationWithCode failed: unknown result"];
}

- (Response *) getVerificationWithCode: (Auth *) auth mobile: (NSString *) mobile
{
  [self send_getVerificationWithCode : auth mobile: mobile];
  [[outProtocol transport] flush];
  return [self recv_getVerificationWithCode];
}

@end

@implementation IpadPSRProcessor

- (id) initWithIpadPSR: (id <IpadPSR>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getVerificationWithCode_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getVerificationWithCode"];
}
return self;
}

- (id<IpadPSR>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getVerificationWithCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getVerificationWithCode_args * args = [[getVerificationWithCode_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetVerificationWithCode_result * result = [[GetVerificationWithCode_result alloc] init];
[result setSuccess: [mService getVerificationWithCode: [args auth] mobile: [args mobile]]];
[outProtocol writeMessageBeginWithName: @"getVerificationWithCode"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

