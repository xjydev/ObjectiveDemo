/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "IpadPSR.h"

@implementation Response

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSString *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *other = (Response *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSString *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Response"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Response("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseDouble

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (double) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = data;
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [decoder decodeDoubleForKey: @"data"];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeDouble: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [@(__data) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseDouble class]]) {
    return NO;
  }
  ResponseDouble *other = (ResponseDouble *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && (__data != other->__data))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (double) data {
  return __data;
}

- (void) setData: (double) data {
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseDouble"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __data];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseDouble("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%f", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Auth

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppId: (NSString *) AppId AppSecret: (NSString *) AppSecret accessToken: (NSString *) accessToken uid: (int64_t) uid
{
  self = [super init];
  __AppId = [AppId retain_stub];
  __AppId_isset = YES;
  __AppSecret = [AppSecret retain_stub];
  __AppSecret_isset = YES;
  __accessToken = [accessToken retain_stub];
  __accessToken_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"AppId"])
  {
    __AppId = [[decoder decodeObjectForKey: @"AppId"] retain_stub];
    __AppId_isset = YES;
  }
  if ([decoder containsValueForKey: @"AppSecret"])
  {
    __AppSecret = [[decoder decodeObjectForKey: @"AppSecret"] retain_stub];
    __AppSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain_stub];
    __accessToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__AppId_isset)
  {
    [encoder encodeObject: __AppId forKey: @"AppId"];
  }
  if (__AppSecret_isset)
  {
    [encoder encodeObject: __AppSecret forKey: @"AppSecret"];
  }
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __AppId_isset ? 2654435761 : 0;
  if (__AppId_isset)
  {
    hash = (hash * 31) ^ [__AppId hash];
  }
  hash = (hash * 31) ^ __AppSecret_isset ? 2654435761 : 0;
  if (__AppSecret_isset)
  {
    hash = (hash * 31) ^ [__AppSecret hash];
  }
  hash = (hash * 31) ^ __accessToken_isset ? 2654435761 : 0;
  if (__accessToken_isset)
  {
    hash = (hash * 31) ^ [__accessToken hash];
  }
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Auth class]]) {
    return NO;
  }
  Auth *other = (Auth *)anObject;
  if ((__AppId_isset != other->__AppId_isset) ||
      (__AppId_isset && ((__AppId || other->__AppId) && ![__AppId isEqual:other->__AppId]))) {
    return NO;
  }
  if ((__AppSecret_isset != other->__AppSecret_isset) ||
      (__AppSecret_isset && ((__AppSecret || other->__AppSecret) && ![__AppSecret isEqual:other->__AppSecret]))) {
    return NO;
  }
  if ((__accessToken_isset != other->__accessToken_isset) ||
      (__accessToken_isset && ((__accessToken || other->__accessToken) && ![__accessToken isEqual:other->__accessToken]))) {
    return NO;
  }
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__AppId release_stub];
  [__AppSecret release_stub];
  [__accessToken release_stub];
  [super dealloc_stub];
}

- (NSString *) AppId {
  return [[__AppId retain_stub] autorelease_stub];
}

- (void) setAppId: (NSString *) AppId {
  [AppId retain_stub];
  [__AppId release_stub];
  __AppId = AppId;
  __AppId_isset = YES;
}

- (BOOL) AppIdIsSet {
  return __AppId_isset;
}

- (void) unsetAppId {
  [__AppId release_stub];
  __AppId = nil;
  __AppId_isset = NO;
}

- (NSString *) AppSecret {
  return [[__AppSecret retain_stub] autorelease_stub];
}

- (void) setAppSecret: (NSString *) AppSecret {
  [AppSecret retain_stub];
  [__AppSecret release_stub];
  __AppSecret = AppSecret;
  __AppSecret_isset = YES;
}

- (BOOL) AppSecretIsSet {
  return __AppSecret_isset;
}

- (void) unsetAppSecret {
  [__AppSecret release_stub];
  __AppSecret = nil;
  __AppSecret_isset = NO;
}

- (NSString *) accessToken {
  return [[__accessToken retain_stub] autorelease_stub];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain_stub];
  [__accessToken release_stub];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release_stub];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Auth"];
  if (__AppId_isset) {
    if (__AppId != nil) {
      [outProtocol writeFieldBeginWithName: @"AppId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __AppId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__AppSecret_isset) {
    if (__AppSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"AppSecret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __AppSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__AppId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'AppId' is not set."];
  }
  if (!__AppSecret_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'AppSecret' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Auth("];
  [ms appendString: @"AppId:"];
  [ms appendFormat: @"\"%@\"", __AppId];
  [ms appendString: @",AppSecret:"];
  [ms appendFormat: @"\"%@\"", __AppSecret];
  [ms appendString: @",accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseAuth

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (Auth *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseAuth class]]) {
    return NO;
  }
  ResponseAuth *other = (ResponseAuth *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (Auth *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (Auth *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseAuth"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseAuth("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation InvalidOperation

- (id) init
{
  return [super initWithName: @"InvalidOperation" reason: @"unknown" userInfo: nil];
}

- (id) initWithWhatOp: (int32_t) whatOp why: (NSString *) why
{
  self = [self init];
  __whatOp = whatOp;
  __whatOp_isset = YES;
  __why = [why retain_stub];
  __why_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"whatOp"])
  {
    __whatOp = [decoder decodeInt32ForKey: @"whatOp"];
    __whatOp_isset = YES;
  }
  if ([decoder containsValueForKey: @"why"])
  {
    __why = [[decoder decodeObjectForKey: @"why"] retain_stub];
    __why_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__whatOp_isset)
  {
    [encoder encodeInt32: __whatOp forKey: @"whatOp"];
  }
  if (__why_isset)
  {
    [encoder encodeObject: __why forKey: @"why"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __whatOp_isset ? 2654435761 : 0;
  if (__whatOp_isset)
  {
    hash = (hash * 31) ^ [@(__whatOp) hash];
  }
  hash = (hash * 31) ^ __why_isset ? 2654435761 : 0;
  if (__why_isset)
  {
    hash = (hash * 31) ^ [__why hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[InvalidOperation class]]) {
    return NO;
  }
  InvalidOperation *other = (InvalidOperation *)anObject;
  if ((__whatOp_isset != other->__whatOp_isset) ||
      (__whatOp_isset && (__whatOp != other->__whatOp))) {
    return NO;
  }
  if ((__why_isset != other->__why_isset) ||
      (__why_isset && ((__why || other->__why) && ![__why isEqual:other->__why]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__why release_stub];
  [super dealloc_stub];
}

- (int32_t) whatOp {
  return __whatOp;
}

- (void) setWhatOp: (int32_t) whatOp {
  __whatOp = whatOp;
  __whatOp_isset = YES;
}

- (BOOL) whatOpIsSet {
  return __whatOp_isset;
}

- (void) unsetWhatOp {
  __whatOp_isset = NO;
}

- (NSString *) why {
  return [[__why retain_stub] autorelease_stub];
}

- (void) setWhy: (NSString *) why {
  [why retain_stub];
  [__why release_stub];
  __why = why;
  __why_isset = YES;
}

- (BOOL) whyIsSet {
  return __why_isset;
}

- (void) unsetWhy {
  [__why release_stub];
  __why = nil;
  __why_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWhatOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWhy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidOperation"];
  if (__whatOp_isset) {
    [outProtocol writeFieldBeginWithName: @"whatOp" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __whatOp];
    [outProtocol writeFieldEnd];
  }
  if (__why_isset) {
    if (__why != nil) {
      [outProtocol writeFieldBeginWithName: @"why" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __why];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"InvalidOperation("];
  [ms appendString: @"whatOp:"];
  [ms appendFormat: @"%i", __whatOp];
  [ms appendString: @",why:"];
  [ms appendFormat: @"\"%@\"", __why];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Order

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOrderId: (int64_t) orderId customerId: (int64_t) customerId mobilePhone: (NSString *) mobilePhone userCalled: (NSString *) userCalled address: (NSString *) address servicePriceId: (int64_t) servicePriceId sourceId: (NSString *) sourceId provinceName: (NSString *) provinceName provinceCode: (NSString *) provinceCode cityName: (NSString *) cityName cityCode: (int32_t) cityCode storeId: (int32_t) storeId psrId: (int64_t) psrId status: (uint8_t) status camera: (uint8_t) camera doorTime: (NSString *) doorTime contractTime: (NSString *) contractTime startTime: (NSString *) startTime endTime: (NSString *) endTime totalFeeOrigin: (double) totalFeeOrigin totalFee: (double) totalFee photoBefore: (NSString *) photoBefore photoInProgress: (NSString *) photoInProgress photoAfter: (NSString *) photoAfter pauseReasonMemo: (NSString *) pauseReasonMemo remark: (NSString *) remark createTime: (NSString *) createTime modifyTime: (NSString *) modifyTime statusName: (NSString *) statusName revServiceName: (NSString *) revServiceName psrServiceMemo: (NSString *) psrServiceMemo cscAssignsOrderMemo: (NSString *) cscAssignsOrderMemo psrStopOrderMemo: (NSString *) psrStopOrderMemo psrDoorMemo: (NSString *) psrDoorMemo sourceName: (NSString *) sourceName sourceIcon: (NSString *) sourceIcon foremanId: (NSString *) foremanId foremanName: (NSString *) foremanName isDistribute: (NSString *) isDistribute doorTimeShow: (NSString *) doorTimeShow activitiesName: (NSString *) activitiesName workerName: (NSString *) workerName cameraIsBack: (uint8_t) cameraIsBack cameraCode: (NSString *) cameraCode
{
  self = [super init];
  __orderId = orderId;
  __orderId_isset = YES;
  __customerId = customerId;
  __customerId_isset = YES;
  __mobilePhone = [mobilePhone retain_stub];
  __mobilePhone_isset = YES;
  __userCalled = [userCalled retain_stub];
  __userCalled_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __servicePriceId = servicePriceId;
  __servicePriceId_isset = YES;
  __sourceId = [sourceId retain_stub];
  __sourceId_isset = YES;
  __provinceName = [provinceName retain_stub];
  __provinceName_isset = YES;
  __provinceCode = [provinceCode retain_stub];
  __provinceCode_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  __cityCode = cityCode;
  __cityCode_isset = YES;
  __storeId = storeId;
  __storeId_isset = YES;
  __psrId = psrId;
  __psrId_isset = YES;
  __status = status;
  __status_isset = YES;
  __camera = camera;
  __camera_isset = YES;
  __doorTime = [doorTime retain_stub];
  __doorTime_isset = YES;
  __contractTime = [contractTime retain_stub];
  __contractTime_isset = YES;
  __startTime = [startTime retain_stub];
  __startTime_isset = YES;
  __endTime = [endTime retain_stub];
  __endTime_isset = YES;
  __totalFeeOrigin = totalFeeOrigin;
  __totalFeeOrigin_isset = YES;
  __totalFee = totalFee;
  __totalFee_isset = YES;
  __photoBefore = [photoBefore retain_stub];
  __photoBefore_isset = YES;
  __photoInProgress = [photoInProgress retain_stub];
  __photoInProgress_isset = YES;
  __photoAfter = [photoAfter retain_stub];
  __photoAfter_isset = YES;
  __pauseReasonMemo = [pauseReasonMemo retain_stub];
  __pauseReasonMemo_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __modifyTime = [modifyTime retain_stub];
  __modifyTime_isset = YES;
  __statusName = [statusName retain_stub];
  __statusName_isset = YES;
  __revServiceName = [revServiceName retain_stub];
  __revServiceName_isset = YES;
  __psrServiceMemo = [psrServiceMemo retain_stub];
  __psrServiceMemo_isset = YES;
  __cscAssignsOrderMemo = [cscAssignsOrderMemo retain_stub];
  __cscAssignsOrderMemo_isset = YES;
  __psrStopOrderMemo = [psrStopOrderMemo retain_stub];
  __psrStopOrderMemo_isset = YES;
  __psrDoorMemo = [psrDoorMemo retain_stub];
  __psrDoorMemo_isset = YES;
  __sourceName = [sourceName retain_stub];
  __sourceName_isset = YES;
  __sourceIcon = [sourceIcon retain_stub];
  __sourceIcon_isset = YES;
  __foremanId = [foremanId retain_stub];
  __foremanId_isset = YES;
  __foremanName = [foremanName retain_stub];
  __foremanName_isset = YES;
  __isDistribute = [isDistribute retain_stub];
  __isDistribute_isset = YES;
  __doorTimeShow = [doorTimeShow retain_stub];
  __doorTimeShow_isset = YES;
  __activitiesName = [activitiesName retain_stub];
  __activitiesName_isset = YES;
  __workerName = [workerName retain_stub];
  __workerName_isset = YES;
  __cameraIsBack = cameraIsBack;
  __cameraIsBack_isset = YES;
  __cameraCode = [cameraCode retain_stub];
  __cameraCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"customerId"])
  {
    __customerId = [decoder decodeInt64ForKey: @"customerId"];
    __customerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobilePhone"])
  {
    __mobilePhone = [[decoder decodeObjectForKey: @"mobilePhone"] retain_stub];
    __mobilePhone_isset = YES;
  }
  if ([decoder containsValueForKey: @"userCalled"])
  {
    __userCalled = [[decoder decodeObjectForKey: @"userCalled"] retain_stub];
    __userCalled_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"servicePriceId"])
  {
    __servicePriceId = [decoder decodeInt64ForKey: @"servicePriceId"];
    __servicePriceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceId"])
  {
    __sourceId = [[decoder decodeObjectForKey: @"sourceId"] retain_stub];
    __sourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"provinceName"])
  {
    __provinceName = [[decoder decodeObjectForKey: @"provinceName"] retain_stub];
    __provinceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"provinceCode"])
  {
    __provinceCode = [[decoder decodeObjectForKey: @"provinceCode"] retain_stub];
    __provinceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCode"])
  {
    __cityCode = [decoder decodeInt32ForKey: @"cityCode"];
    __cityCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"storeId"])
  {
    __storeId = [decoder decodeInt32ForKey: @"storeId"];
    __storeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"psrId"])
  {
    __psrId = [decoder decodeInt64ForKey: @"psrId"];
    __psrId_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"camera"])
  {
    __camera = [decoder decodeIntForKey: @"camera"];
    __camera_isset = YES;
  }
  if ([decoder containsValueForKey: @"doorTime"])
  {
    __doorTime = [[decoder decodeObjectForKey: @"doorTime"] retain_stub];
    __doorTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractTime"])
  {
    __contractTime = [[decoder decodeObjectForKey: @"contractTime"] retain_stub];
    __contractTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [[decoder decodeObjectForKey: @"startTime"] retain_stub];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [[decoder decodeObjectForKey: @"endTime"] retain_stub];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFeeOrigin"])
  {
    __totalFeeOrigin = [decoder decodeDoubleForKey: @"totalFeeOrigin"];
    __totalFeeOrigin_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [decoder decodeDoubleForKey: @"totalFee"];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoBefore"])
  {
    __photoBefore = [[decoder decodeObjectForKey: @"photoBefore"] retain_stub];
    __photoBefore_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoInProgress"])
  {
    __photoInProgress = [[decoder decodeObjectForKey: @"photoInProgress"] retain_stub];
    __photoInProgress_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoAfter"])
  {
    __photoAfter = [[decoder decodeObjectForKey: @"photoAfter"] retain_stub];
    __photoAfter_isset = YES;
  }
  if ([decoder containsValueForKey: @"pauseReasonMemo"])
  {
    __pauseReasonMemo = [[decoder decodeObjectForKey: @"pauseReasonMemo"] retain_stub];
    __pauseReasonMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"modifyTime"])
  {
    __modifyTime = [[decoder decodeObjectForKey: @"modifyTime"] retain_stub];
    __modifyTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusName"])
  {
    __statusName = [[decoder decodeObjectForKey: @"statusName"] retain_stub];
    __statusName_isset = YES;
  }
  if ([decoder containsValueForKey: @"revServiceName"])
  {
    __revServiceName = [[decoder decodeObjectForKey: @"revServiceName"] retain_stub];
    __revServiceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"psrServiceMemo"])
  {
    __psrServiceMemo = [[decoder decodeObjectForKey: @"psrServiceMemo"] retain_stub];
    __psrServiceMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"cscAssignsOrderMemo"])
  {
    __cscAssignsOrderMemo = [[decoder decodeObjectForKey: @"cscAssignsOrderMemo"] retain_stub];
    __cscAssignsOrderMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"psrStopOrderMemo"])
  {
    __psrStopOrderMemo = [[decoder decodeObjectForKey: @"psrStopOrderMemo"] retain_stub];
    __psrStopOrderMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"psrDoorMemo"])
  {
    __psrDoorMemo = [[decoder decodeObjectForKey: @"psrDoorMemo"] retain_stub];
    __psrDoorMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceName"])
  {
    __sourceName = [[decoder decodeObjectForKey: @"sourceName"] retain_stub];
    __sourceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceIcon"])
  {
    __sourceIcon = [[decoder decodeObjectForKey: @"sourceIcon"] retain_stub];
    __sourceIcon_isset = YES;
  }
  if ([decoder containsValueForKey: @"foremanId"])
  {
    __foremanId = [[decoder decodeObjectForKey: @"foremanId"] retain_stub];
    __foremanId_isset = YES;
  }
  if ([decoder containsValueForKey: @"foremanName"])
  {
    __foremanName = [[decoder decodeObjectForKey: @"foremanName"] retain_stub];
    __foremanName_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDistribute"])
  {
    __isDistribute = [[decoder decodeObjectForKey: @"isDistribute"] retain_stub];
    __isDistribute_isset = YES;
  }
  if ([decoder containsValueForKey: @"doorTimeShow"])
  {
    __doorTimeShow = [[decoder decodeObjectForKey: @"doorTimeShow"] retain_stub];
    __doorTimeShow_isset = YES;
  }
  if ([decoder containsValueForKey: @"activitiesName"])
  {
    __activitiesName = [[decoder decodeObjectForKey: @"activitiesName"] retain_stub];
    __activitiesName_isset = YES;
  }
  if ([decoder containsValueForKey: @"workerName"])
  {
    __workerName = [[decoder decodeObjectForKey: @"workerName"] retain_stub];
    __workerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"cameraIsBack"])
  {
    __cameraIsBack = [decoder decodeIntForKey: @"cameraIsBack"];
    __cameraIsBack_isset = YES;
  }
  if ([decoder containsValueForKey: @"cameraCode"])
  {
    __cameraCode = [[decoder decodeObjectForKey: @"cameraCode"] retain_stub];
    __cameraCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__customerId_isset)
  {
    [encoder encodeInt64: __customerId forKey: @"customerId"];
  }
  if (__mobilePhone_isset)
  {
    [encoder encodeObject: __mobilePhone forKey: @"mobilePhone"];
  }
  if (__userCalled_isset)
  {
    [encoder encodeObject: __userCalled forKey: @"userCalled"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__servicePriceId_isset)
  {
    [encoder encodeInt64: __servicePriceId forKey: @"servicePriceId"];
  }
  if (__sourceId_isset)
  {
    [encoder encodeObject: __sourceId forKey: @"sourceId"];
  }
  if (__provinceName_isset)
  {
    [encoder encodeObject: __provinceName forKey: @"provinceName"];
  }
  if (__provinceCode_isset)
  {
    [encoder encodeObject: __provinceCode forKey: @"provinceCode"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
  if (__cityCode_isset)
  {
    [encoder encodeInt32: __cityCode forKey: @"cityCode"];
  }
  if (__storeId_isset)
  {
    [encoder encodeInt32: __storeId forKey: @"storeId"];
  }
  if (__psrId_isset)
  {
    [encoder encodeInt64: __psrId forKey: @"psrId"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__camera_isset)
  {
    [encoder encodeInt: __camera forKey: @"camera"];
  }
  if (__doorTime_isset)
  {
    [encoder encodeObject: __doorTime forKey: @"doorTime"];
  }
  if (__contractTime_isset)
  {
    [encoder encodeObject: __contractTime forKey: @"contractTime"];
  }
  if (__startTime_isset)
  {
    [encoder encodeObject: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeObject: __endTime forKey: @"endTime"];
  }
  if (__totalFeeOrigin_isset)
  {
    [encoder encodeDouble: __totalFeeOrigin forKey: @"totalFeeOrigin"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeDouble: __totalFee forKey: @"totalFee"];
  }
  if (__photoBefore_isset)
  {
    [encoder encodeObject: __photoBefore forKey: @"photoBefore"];
  }
  if (__photoInProgress_isset)
  {
    [encoder encodeObject: __photoInProgress forKey: @"photoInProgress"];
  }
  if (__photoAfter_isset)
  {
    [encoder encodeObject: __photoAfter forKey: @"photoAfter"];
  }
  if (__pauseReasonMemo_isset)
  {
    [encoder encodeObject: __pauseReasonMemo forKey: @"pauseReasonMemo"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__modifyTime_isset)
  {
    [encoder encodeObject: __modifyTime forKey: @"modifyTime"];
  }
  if (__statusName_isset)
  {
    [encoder encodeObject: __statusName forKey: @"statusName"];
  }
  if (__revServiceName_isset)
  {
    [encoder encodeObject: __revServiceName forKey: @"revServiceName"];
  }
  if (__psrServiceMemo_isset)
  {
    [encoder encodeObject: __psrServiceMemo forKey: @"psrServiceMemo"];
  }
  if (__cscAssignsOrderMemo_isset)
  {
    [encoder encodeObject: __cscAssignsOrderMemo forKey: @"cscAssignsOrderMemo"];
  }
  if (__psrStopOrderMemo_isset)
  {
    [encoder encodeObject: __psrStopOrderMemo forKey: @"psrStopOrderMemo"];
  }
  if (__psrDoorMemo_isset)
  {
    [encoder encodeObject: __psrDoorMemo forKey: @"psrDoorMemo"];
  }
  if (__sourceName_isset)
  {
    [encoder encodeObject: __sourceName forKey: @"sourceName"];
  }
  if (__sourceIcon_isset)
  {
    [encoder encodeObject: __sourceIcon forKey: @"sourceIcon"];
  }
  if (__foremanId_isset)
  {
    [encoder encodeObject: __foremanId forKey: @"foremanId"];
  }
  if (__foremanName_isset)
  {
    [encoder encodeObject: __foremanName forKey: @"foremanName"];
  }
  if (__isDistribute_isset)
  {
    [encoder encodeObject: __isDistribute forKey: @"isDistribute"];
  }
  if (__doorTimeShow_isset)
  {
    [encoder encodeObject: __doorTimeShow forKey: @"doorTimeShow"];
  }
  if (__activitiesName_isset)
  {
    [encoder encodeObject: __activitiesName forKey: @"activitiesName"];
  }
  if (__workerName_isset)
  {
    [encoder encodeObject: __workerName forKey: @"workerName"];
  }
  if (__cameraIsBack_isset)
  {
    [encoder encodeInt: __cameraIsBack forKey: @"cameraIsBack"];
  }
  if (__cameraCode_isset)
  {
    [encoder encodeObject: __cameraCode forKey: @"cameraCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __customerId_isset ? 2654435761 : 0;
  if (__customerId_isset)
  {
    hash = (hash * 31) ^ [@(__customerId) hash];
  }
  hash = (hash * 31) ^ __mobilePhone_isset ? 2654435761 : 0;
  if (__mobilePhone_isset)
  {
    hash = (hash * 31) ^ [__mobilePhone hash];
  }
  hash = (hash * 31) ^ __userCalled_isset ? 2654435761 : 0;
  if (__userCalled_isset)
  {
    hash = (hash * 31) ^ [__userCalled hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __servicePriceId_isset ? 2654435761 : 0;
  if (__servicePriceId_isset)
  {
    hash = (hash * 31) ^ [@(__servicePriceId) hash];
  }
  hash = (hash * 31) ^ __sourceId_isset ? 2654435761 : 0;
  if (__sourceId_isset)
  {
    hash = (hash * 31) ^ [__sourceId hash];
  }
  hash = (hash * 31) ^ __provinceName_isset ? 2654435761 : 0;
  if (__provinceName_isset)
  {
    hash = (hash * 31) ^ [__provinceName hash];
  }
  hash = (hash * 31) ^ __provinceCode_isset ? 2654435761 : 0;
  if (__provinceCode_isset)
  {
    hash = (hash * 31) ^ [__provinceCode hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  hash = (hash * 31) ^ __cityCode_isset ? 2654435761 : 0;
  if (__cityCode_isset)
  {
    hash = (hash * 31) ^ [@(__cityCode) hash];
  }
  hash = (hash * 31) ^ __storeId_isset ? 2654435761 : 0;
  if (__storeId_isset)
  {
    hash = (hash * 31) ^ [@(__storeId) hash];
  }
  hash = (hash * 31) ^ __psrId_isset ? 2654435761 : 0;
  if (__psrId_isset)
  {
    hash = (hash * 31) ^ [@(__psrId) hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __camera_isset ? 2654435761 : 0;
  if (__camera_isset)
  {
    hash = (hash * 31) ^ [@(__camera) hash];
  }
  hash = (hash * 31) ^ __doorTime_isset ? 2654435761 : 0;
  if (__doorTime_isset)
  {
    hash = (hash * 31) ^ [__doorTime hash];
  }
  hash = (hash * 31) ^ __contractTime_isset ? 2654435761 : 0;
  if (__contractTime_isset)
  {
    hash = (hash * 31) ^ [__contractTime hash];
  }
  hash = (hash * 31) ^ __startTime_isset ? 2654435761 : 0;
  if (__startTime_isset)
  {
    hash = (hash * 31) ^ [__startTime hash];
  }
  hash = (hash * 31) ^ __endTime_isset ? 2654435761 : 0;
  if (__endTime_isset)
  {
    hash = (hash * 31) ^ [__endTime hash];
  }
  hash = (hash * 31) ^ __totalFeeOrigin_isset ? 2654435761 : 0;
  if (__totalFeeOrigin_isset)
  {
    hash = (hash * 31) ^ [@(__totalFeeOrigin) hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [@(__totalFee) hash];
  }
  hash = (hash * 31) ^ __photoBefore_isset ? 2654435761 : 0;
  if (__photoBefore_isset)
  {
    hash = (hash * 31) ^ [__photoBefore hash];
  }
  hash = (hash * 31) ^ __photoInProgress_isset ? 2654435761 : 0;
  if (__photoInProgress_isset)
  {
    hash = (hash * 31) ^ [__photoInProgress hash];
  }
  hash = (hash * 31) ^ __photoAfter_isset ? 2654435761 : 0;
  if (__photoAfter_isset)
  {
    hash = (hash * 31) ^ [__photoAfter hash];
  }
  hash = (hash * 31) ^ __pauseReasonMemo_isset ? 2654435761 : 0;
  if (__pauseReasonMemo_isset)
  {
    hash = (hash * 31) ^ [__pauseReasonMemo hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __modifyTime_isset ? 2654435761 : 0;
  if (__modifyTime_isset)
  {
    hash = (hash * 31) ^ [__modifyTime hash];
  }
  hash = (hash * 31) ^ __statusName_isset ? 2654435761 : 0;
  if (__statusName_isset)
  {
    hash = (hash * 31) ^ [__statusName hash];
  }
  hash = (hash * 31) ^ __revServiceName_isset ? 2654435761 : 0;
  if (__revServiceName_isset)
  {
    hash = (hash * 31) ^ [__revServiceName hash];
  }
  hash = (hash * 31) ^ __psrServiceMemo_isset ? 2654435761 : 0;
  if (__psrServiceMemo_isset)
  {
    hash = (hash * 31) ^ [__psrServiceMemo hash];
  }
  hash = (hash * 31) ^ __cscAssignsOrderMemo_isset ? 2654435761 : 0;
  if (__cscAssignsOrderMemo_isset)
  {
    hash = (hash * 31) ^ [__cscAssignsOrderMemo hash];
  }
  hash = (hash * 31) ^ __psrStopOrderMemo_isset ? 2654435761 : 0;
  if (__psrStopOrderMemo_isset)
  {
    hash = (hash * 31) ^ [__psrStopOrderMemo hash];
  }
  hash = (hash * 31) ^ __psrDoorMemo_isset ? 2654435761 : 0;
  if (__psrDoorMemo_isset)
  {
    hash = (hash * 31) ^ [__psrDoorMemo hash];
  }
  hash = (hash * 31) ^ __sourceName_isset ? 2654435761 : 0;
  if (__sourceName_isset)
  {
    hash = (hash * 31) ^ [__sourceName hash];
  }
  hash = (hash * 31) ^ __sourceIcon_isset ? 2654435761 : 0;
  if (__sourceIcon_isset)
  {
    hash = (hash * 31) ^ [__sourceIcon hash];
  }
  hash = (hash * 31) ^ __foremanId_isset ? 2654435761 : 0;
  if (__foremanId_isset)
  {
    hash = (hash * 31) ^ [__foremanId hash];
  }
  hash = (hash * 31) ^ __foremanName_isset ? 2654435761 : 0;
  if (__foremanName_isset)
  {
    hash = (hash * 31) ^ [__foremanName hash];
  }
  hash = (hash * 31) ^ __isDistribute_isset ? 2654435761 : 0;
  if (__isDistribute_isset)
  {
    hash = (hash * 31) ^ [__isDistribute hash];
  }
  hash = (hash * 31) ^ __doorTimeShow_isset ? 2654435761 : 0;
  if (__doorTimeShow_isset)
  {
    hash = (hash * 31) ^ [__doorTimeShow hash];
  }
  hash = (hash * 31) ^ __activitiesName_isset ? 2654435761 : 0;
  if (__activitiesName_isset)
  {
    hash = (hash * 31) ^ [__activitiesName hash];
  }
  hash = (hash * 31) ^ __workerName_isset ? 2654435761 : 0;
  if (__workerName_isset)
  {
    hash = (hash * 31) ^ [__workerName hash];
  }
  hash = (hash * 31) ^ __cameraIsBack_isset ? 2654435761 : 0;
  if (__cameraIsBack_isset)
  {
    hash = (hash * 31) ^ [@(__cameraIsBack) hash];
  }
  hash = (hash * 31) ^ __cameraCode_isset ? 2654435761 : 0;
  if (__cameraCode_isset)
  {
    hash = (hash * 31) ^ [__cameraCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Order class]]) {
    return NO;
  }
  Order *other = (Order *)anObject;
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__customerId_isset != other->__customerId_isset) ||
      (__customerId_isset && (__customerId != other->__customerId))) {
    return NO;
  }
  if ((__mobilePhone_isset != other->__mobilePhone_isset) ||
      (__mobilePhone_isset && ((__mobilePhone || other->__mobilePhone) && ![__mobilePhone isEqual:other->__mobilePhone]))) {
    return NO;
  }
  if ((__userCalled_isset != other->__userCalled_isset) ||
      (__userCalled_isset && ((__userCalled || other->__userCalled) && ![__userCalled isEqual:other->__userCalled]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__servicePriceId_isset != other->__servicePriceId_isset) ||
      (__servicePriceId_isset && (__servicePriceId != other->__servicePriceId))) {
    return NO;
  }
  if ((__sourceId_isset != other->__sourceId_isset) ||
      (__sourceId_isset && ((__sourceId || other->__sourceId) && ![__sourceId isEqual:other->__sourceId]))) {
    return NO;
  }
  if ((__provinceName_isset != other->__provinceName_isset) ||
      (__provinceName_isset && ((__provinceName || other->__provinceName) && ![__provinceName isEqual:other->__provinceName]))) {
    return NO;
  }
  if ((__provinceCode_isset != other->__provinceCode_isset) ||
      (__provinceCode_isset && ((__provinceCode || other->__provinceCode) && ![__provinceCode isEqual:other->__provinceCode]))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  if ((__cityCode_isset != other->__cityCode_isset) ||
      (__cityCode_isset && (__cityCode != other->__cityCode))) {
    return NO;
  }
  if ((__storeId_isset != other->__storeId_isset) ||
      (__storeId_isset && (__storeId != other->__storeId))) {
    return NO;
  }
  if ((__psrId_isset != other->__psrId_isset) ||
      (__psrId_isset && (__psrId != other->__psrId))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__camera_isset != other->__camera_isset) ||
      (__camera_isset && (__camera != other->__camera))) {
    return NO;
  }
  if ((__doorTime_isset != other->__doorTime_isset) ||
      (__doorTime_isset && ((__doorTime || other->__doorTime) && ![__doorTime isEqual:other->__doorTime]))) {
    return NO;
  }
  if ((__contractTime_isset != other->__contractTime_isset) ||
      (__contractTime_isset && ((__contractTime || other->__contractTime) && ![__contractTime isEqual:other->__contractTime]))) {
    return NO;
  }
  if ((__startTime_isset != other->__startTime_isset) ||
      (__startTime_isset && ((__startTime || other->__startTime) && ![__startTime isEqual:other->__startTime]))) {
    return NO;
  }
  if ((__endTime_isset != other->__endTime_isset) ||
      (__endTime_isset && ((__endTime || other->__endTime) && ![__endTime isEqual:other->__endTime]))) {
    return NO;
  }
  if ((__totalFeeOrigin_isset != other->__totalFeeOrigin_isset) ||
      (__totalFeeOrigin_isset && (__totalFeeOrigin != other->__totalFeeOrigin))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && (__totalFee != other->__totalFee))) {
    return NO;
  }
  if ((__photoBefore_isset != other->__photoBefore_isset) ||
      (__photoBefore_isset && ((__photoBefore || other->__photoBefore) && ![__photoBefore isEqual:other->__photoBefore]))) {
    return NO;
  }
  if ((__photoInProgress_isset != other->__photoInProgress_isset) ||
      (__photoInProgress_isset && ((__photoInProgress || other->__photoInProgress) && ![__photoInProgress isEqual:other->__photoInProgress]))) {
    return NO;
  }
  if ((__photoAfter_isset != other->__photoAfter_isset) ||
      (__photoAfter_isset && ((__photoAfter || other->__photoAfter) && ![__photoAfter isEqual:other->__photoAfter]))) {
    return NO;
  }
  if ((__pauseReasonMemo_isset != other->__pauseReasonMemo_isset) ||
      (__pauseReasonMemo_isset && ((__pauseReasonMemo || other->__pauseReasonMemo) && ![__pauseReasonMemo isEqual:other->__pauseReasonMemo]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__modifyTime_isset != other->__modifyTime_isset) ||
      (__modifyTime_isset && ((__modifyTime || other->__modifyTime) && ![__modifyTime isEqual:other->__modifyTime]))) {
    return NO;
  }
  if ((__statusName_isset != other->__statusName_isset) ||
      (__statusName_isset && ((__statusName || other->__statusName) && ![__statusName isEqual:other->__statusName]))) {
    return NO;
  }
  if ((__revServiceName_isset != other->__revServiceName_isset) ||
      (__revServiceName_isset && ((__revServiceName || other->__revServiceName) && ![__revServiceName isEqual:other->__revServiceName]))) {
    return NO;
  }
  if ((__psrServiceMemo_isset != other->__psrServiceMemo_isset) ||
      (__psrServiceMemo_isset && ((__psrServiceMemo || other->__psrServiceMemo) && ![__psrServiceMemo isEqual:other->__psrServiceMemo]))) {
    return NO;
  }
  if ((__cscAssignsOrderMemo_isset != other->__cscAssignsOrderMemo_isset) ||
      (__cscAssignsOrderMemo_isset && ((__cscAssignsOrderMemo || other->__cscAssignsOrderMemo) && ![__cscAssignsOrderMemo isEqual:other->__cscAssignsOrderMemo]))) {
    return NO;
  }
  if ((__psrStopOrderMemo_isset != other->__psrStopOrderMemo_isset) ||
      (__psrStopOrderMemo_isset && ((__psrStopOrderMemo || other->__psrStopOrderMemo) && ![__psrStopOrderMemo isEqual:other->__psrStopOrderMemo]))) {
    return NO;
  }
  if ((__psrDoorMemo_isset != other->__psrDoorMemo_isset) ||
      (__psrDoorMemo_isset && ((__psrDoorMemo || other->__psrDoorMemo) && ![__psrDoorMemo isEqual:other->__psrDoorMemo]))) {
    return NO;
  }
  if ((__sourceName_isset != other->__sourceName_isset) ||
      (__sourceName_isset && ((__sourceName || other->__sourceName) && ![__sourceName isEqual:other->__sourceName]))) {
    return NO;
  }
  if ((__sourceIcon_isset != other->__sourceIcon_isset) ||
      (__sourceIcon_isset && ((__sourceIcon || other->__sourceIcon) && ![__sourceIcon isEqual:other->__sourceIcon]))) {
    return NO;
  }
  if ((__foremanId_isset != other->__foremanId_isset) ||
      (__foremanId_isset && ((__foremanId || other->__foremanId) && ![__foremanId isEqual:other->__foremanId]))) {
    return NO;
  }
  if ((__foremanName_isset != other->__foremanName_isset) ||
      (__foremanName_isset && ((__foremanName || other->__foremanName) && ![__foremanName isEqual:other->__foremanName]))) {
    return NO;
  }
  if ((__isDistribute_isset != other->__isDistribute_isset) ||
      (__isDistribute_isset && ((__isDistribute || other->__isDistribute) && ![__isDistribute isEqual:other->__isDistribute]))) {
    return NO;
  }
  if ((__doorTimeShow_isset != other->__doorTimeShow_isset) ||
      (__doorTimeShow_isset && ((__doorTimeShow || other->__doorTimeShow) && ![__doorTimeShow isEqual:other->__doorTimeShow]))) {
    return NO;
  }
  if ((__activitiesName_isset != other->__activitiesName_isset) ||
      (__activitiesName_isset && ((__activitiesName || other->__activitiesName) && ![__activitiesName isEqual:other->__activitiesName]))) {
    return NO;
  }
  if ((__workerName_isset != other->__workerName_isset) ||
      (__workerName_isset && ((__workerName || other->__workerName) && ![__workerName isEqual:other->__workerName]))) {
    return NO;
  }
  if ((__cameraIsBack_isset != other->__cameraIsBack_isset) ||
      (__cameraIsBack_isset && (__cameraIsBack != other->__cameraIsBack))) {
    return NO;
  }
  if ((__cameraCode_isset != other->__cameraCode_isset) ||
      (__cameraCode_isset && ((__cameraCode || other->__cameraCode) && ![__cameraCode isEqual:other->__cameraCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mobilePhone release_stub];
  [__userCalled release_stub];
  [__address release_stub];
  [__sourceId release_stub];
  [__provinceName release_stub];
  [__provinceCode release_stub];
  [__cityName release_stub];
  [__doorTime release_stub];
  [__contractTime release_stub];
  [__startTime release_stub];
  [__endTime release_stub];
  [__photoBefore release_stub];
  [__photoInProgress release_stub];
  [__photoAfter release_stub];
  [__pauseReasonMemo release_stub];
  [__remark release_stub];
  [__createTime release_stub];
  [__modifyTime release_stub];
  [__statusName release_stub];
  [__revServiceName release_stub];
  [__psrServiceMemo release_stub];
  [__cscAssignsOrderMemo release_stub];
  [__psrStopOrderMemo release_stub];
  [__psrDoorMemo release_stub];
  [__sourceName release_stub];
  [__sourceIcon release_stub];
  [__foremanId release_stub];
  [__foremanName release_stub];
  [__isDistribute release_stub];
  [__doorTimeShow release_stub];
  [__activitiesName release_stub];
  [__workerName release_stub];
  [__cameraCode release_stub];
  [super dealloc_stub];
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (int64_t) customerId {
  return __customerId;
}

- (void) setCustomerId: (int64_t) customerId {
  __customerId = customerId;
  __customerId_isset = YES;
}

- (BOOL) customerIdIsSet {
  return __customerId_isset;
}

- (void) unsetCustomerId {
  __customerId_isset = NO;
}

- (NSString *) mobilePhone {
  return [[__mobilePhone retain_stub] autorelease_stub];
}

- (void) setMobilePhone: (NSString *) mobilePhone {
  [mobilePhone retain_stub];
  [__mobilePhone release_stub];
  __mobilePhone = mobilePhone;
  __mobilePhone_isset = YES;
}

- (BOOL) mobilePhoneIsSet {
  return __mobilePhone_isset;
}

- (void) unsetMobilePhone {
  [__mobilePhone release_stub];
  __mobilePhone = nil;
  __mobilePhone_isset = NO;
}

- (NSString *) userCalled {
  return [[__userCalled retain_stub] autorelease_stub];
}

- (void) setUserCalled: (NSString *) userCalled {
  [userCalled retain_stub];
  [__userCalled release_stub];
  __userCalled = userCalled;
  __userCalled_isset = YES;
}

- (BOOL) userCalledIsSet {
  return __userCalled_isset;
}

- (void) unsetUserCalled {
  [__userCalled release_stub];
  __userCalled = nil;
  __userCalled_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (int64_t) servicePriceId {
  return __servicePriceId;
}

- (void) setServicePriceId: (int64_t) servicePriceId {
  __servicePriceId = servicePriceId;
  __servicePriceId_isset = YES;
}

- (BOOL) servicePriceIdIsSet {
  return __servicePriceId_isset;
}

- (void) unsetServicePriceId {
  __servicePriceId_isset = NO;
}

- (NSString *) sourceId {
  return [[__sourceId retain_stub] autorelease_stub];
}

- (void) setSourceId: (NSString *) sourceId {
  [sourceId retain_stub];
  [__sourceId release_stub];
  __sourceId = sourceId;
  __sourceId_isset = YES;
}

- (BOOL) sourceIdIsSet {
  return __sourceId_isset;
}

- (void) unsetSourceId {
  [__sourceId release_stub];
  __sourceId = nil;
  __sourceId_isset = NO;
}

- (NSString *) provinceName {
  return [[__provinceName retain_stub] autorelease_stub];
}

- (void) setProvinceName: (NSString *) provinceName {
  [provinceName retain_stub];
  [__provinceName release_stub];
  __provinceName = provinceName;
  __provinceName_isset = YES;
}

- (BOOL) provinceNameIsSet {
  return __provinceName_isset;
}

- (void) unsetProvinceName {
  [__provinceName release_stub];
  __provinceName = nil;
  __provinceName_isset = NO;
}

- (NSString *) provinceCode {
  return [[__provinceCode retain_stub] autorelease_stub];
}

- (void) setProvinceCode: (NSString *) provinceCode {
  [provinceCode retain_stub];
  [__provinceCode release_stub];
  __provinceCode = provinceCode;
  __provinceCode_isset = YES;
}

- (BOOL) provinceCodeIsSet {
  return __provinceCode_isset;
}

- (void) unsetProvinceCode {
  [__provinceCode release_stub];
  __provinceCode = nil;
  __provinceCode_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (int32_t) cityCode {
  return __cityCode;
}

- (void) setCityCode: (int32_t) cityCode {
  __cityCode = cityCode;
  __cityCode_isset = YES;
}

- (BOOL) cityCodeIsSet {
  return __cityCode_isset;
}

- (void) unsetCityCode {
  __cityCode_isset = NO;
}

- (int32_t) storeId {
  return __storeId;
}

- (void) setStoreId: (int32_t) storeId {
  __storeId = storeId;
  __storeId_isset = YES;
}

- (BOOL) storeIdIsSet {
  return __storeId_isset;
}

- (void) unsetStoreId {
  __storeId_isset = NO;
}

- (int64_t) psrId {
  return __psrId;
}

- (void) setPsrId: (int64_t) psrId {
  __psrId = psrId;
  __psrId_isset = YES;
}

- (BOOL) psrIdIsSet {
  return __psrId_isset;
}

- (void) unsetPsrId {
  __psrId_isset = NO;
}

- (uint8_t) status {
  return __status;
}

- (void) setStatus: (uint8_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (uint8_t) camera {
  return __camera;
}

- (void) setCamera: (uint8_t) camera {
  __camera = camera;
  __camera_isset = YES;
}

- (BOOL) cameraIsSet {
  return __camera_isset;
}

- (void) unsetCamera {
  __camera_isset = NO;
}

- (NSString *) doorTime {
  return [[__doorTime retain_stub] autorelease_stub];
}

- (void) setDoorTime: (NSString *) doorTime {
  [doorTime retain_stub];
  [__doorTime release_stub];
  __doorTime = doorTime;
  __doorTime_isset = YES;
}

- (BOOL) doorTimeIsSet {
  return __doorTime_isset;
}

- (void) unsetDoorTime {
  [__doorTime release_stub];
  __doorTime = nil;
  __doorTime_isset = NO;
}

- (NSString *) contractTime {
  return [[__contractTime retain_stub] autorelease_stub];
}

- (void) setContractTime: (NSString *) contractTime {
  [contractTime retain_stub];
  [__contractTime release_stub];
  __contractTime = contractTime;
  __contractTime_isset = YES;
}

- (BOOL) contractTimeIsSet {
  return __contractTime_isset;
}

- (void) unsetContractTime {
  [__contractTime release_stub];
  __contractTime = nil;
  __contractTime_isset = NO;
}

- (NSString *) startTime {
  return [[__startTime retain_stub] autorelease_stub];
}

- (void) setStartTime: (NSString *) startTime {
  [startTime retain_stub];
  [__startTime release_stub];
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  [__startTime release_stub];
  __startTime = nil;
  __startTime_isset = NO;
}

- (NSString *) endTime {
  return [[__endTime retain_stub] autorelease_stub];
}

- (void) setEndTime: (NSString *) endTime {
  [endTime retain_stub];
  [__endTime release_stub];
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  [__endTime release_stub];
  __endTime = nil;
  __endTime_isset = NO;
}

- (double) totalFeeOrigin {
  return __totalFeeOrigin;
}

- (void) setTotalFeeOrigin: (double) totalFeeOrigin {
  __totalFeeOrigin = totalFeeOrigin;
  __totalFeeOrigin_isset = YES;
}

- (BOOL) totalFeeOriginIsSet {
  return __totalFeeOrigin_isset;
}

- (void) unsetTotalFeeOrigin {
  __totalFeeOrigin_isset = NO;
}

- (double) totalFee {
  return __totalFee;
}

- (void) setTotalFee: (double) totalFee {
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  __totalFee_isset = NO;
}

- (NSString *) photoBefore {
  return [[__photoBefore retain_stub] autorelease_stub];
}

- (void) setPhotoBefore: (NSString *) photoBefore {
  [photoBefore retain_stub];
  [__photoBefore release_stub];
  __photoBefore = photoBefore;
  __photoBefore_isset = YES;
}

- (BOOL) photoBeforeIsSet {
  return __photoBefore_isset;
}

- (void) unsetPhotoBefore {
  [__photoBefore release_stub];
  __photoBefore = nil;
  __photoBefore_isset = NO;
}

- (NSString *) photoInProgress {
  return [[__photoInProgress retain_stub] autorelease_stub];
}

- (void) setPhotoInProgress: (NSString *) photoInProgress {
  [photoInProgress retain_stub];
  [__photoInProgress release_stub];
  __photoInProgress = photoInProgress;
  __photoInProgress_isset = YES;
}

- (BOOL) photoInProgressIsSet {
  return __photoInProgress_isset;
}

- (void) unsetPhotoInProgress {
  [__photoInProgress release_stub];
  __photoInProgress = nil;
  __photoInProgress_isset = NO;
}

- (NSString *) photoAfter {
  return [[__photoAfter retain_stub] autorelease_stub];
}

- (void) setPhotoAfter: (NSString *) photoAfter {
  [photoAfter retain_stub];
  [__photoAfter release_stub];
  __photoAfter = photoAfter;
  __photoAfter_isset = YES;
}

- (BOOL) photoAfterIsSet {
  return __photoAfter_isset;
}

- (void) unsetPhotoAfter {
  [__photoAfter release_stub];
  __photoAfter = nil;
  __photoAfter_isset = NO;
}

- (NSString *) pauseReasonMemo {
  return [[__pauseReasonMemo retain_stub] autorelease_stub];
}

- (void) setPauseReasonMemo: (NSString *) pauseReasonMemo {
  [pauseReasonMemo retain_stub];
  [__pauseReasonMemo release_stub];
  __pauseReasonMemo = pauseReasonMemo;
  __pauseReasonMemo_isset = YES;
}

- (BOOL) pauseReasonMemoIsSet {
  return __pauseReasonMemo_isset;
}

- (void) unsetPauseReasonMemo {
  [__pauseReasonMemo release_stub];
  __pauseReasonMemo = nil;
  __pauseReasonMemo_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) modifyTime {
  return [[__modifyTime retain_stub] autorelease_stub];
}

- (void) setModifyTime: (NSString *) modifyTime {
  [modifyTime retain_stub];
  [__modifyTime release_stub];
  __modifyTime = modifyTime;
  __modifyTime_isset = YES;
}

- (BOOL) modifyTimeIsSet {
  return __modifyTime_isset;
}

- (void) unsetModifyTime {
  [__modifyTime release_stub];
  __modifyTime = nil;
  __modifyTime_isset = NO;
}

- (NSString *) statusName {
  return [[__statusName retain_stub] autorelease_stub];
}

- (void) setStatusName: (NSString *) statusName {
  [statusName retain_stub];
  [__statusName release_stub];
  __statusName = statusName;
  __statusName_isset = YES;
}

- (BOOL) statusNameIsSet {
  return __statusName_isset;
}

- (void) unsetStatusName {
  [__statusName release_stub];
  __statusName = nil;
  __statusName_isset = NO;
}

- (NSString *) revServiceName {
  return [[__revServiceName retain_stub] autorelease_stub];
}

- (void) setRevServiceName: (NSString *) revServiceName {
  [revServiceName retain_stub];
  [__revServiceName release_stub];
  __revServiceName = revServiceName;
  __revServiceName_isset = YES;
}

- (BOOL) revServiceNameIsSet {
  return __revServiceName_isset;
}

- (void) unsetRevServiceName {
  [__revServiceName release_stub];
  __revServiceName = nil;
  __revServiceName_isset = NO;
}

- (NSString *) psrServiceMemo {
  return [[__psrServiceMemo retain_stub] autorelease_stub];
}

- (void) setPsrServiceMemo: (NSString *) psrServiceMemo {
  [psrServiceMemo retain_stub];
  [__psrServiceMemo release_stub];
  __psrServiceMemo = psrServiceMemo;
  __psrServiceMemo_isset = YES;
}

- (BOOL) psrServiceMemoIsSet {
  return __psrServiceMemo_isset;
}

- (void) unsetPsrServiceMemo {
  [__psrServiceMemo release_stub];
  __psrServiceMemo = nil;
  __psrServiceMemo_isset = NO;
}

- (NSString *) cscAssignsOrderMemo {
  return [[__cscAssignsOrderMemo retain_stub] autorelease_stub];
}

- (void) setCscAssignsOrderMemo: (NSString *) cscAssignsOrderMemo {
  [cscAssignsOrderMemo retain_stub];
  [__cscAssignsOrderMemo release_stub];
  __cscAssignsOrderMemo = cscAssignsOrderMemo;
  __cscAssignsOrderMemo_isset = YES;
}

- (BOOL) cscAssignsOrderMemoIsSet {
  return __cscAssignsOrderMemo_isset;
}

- (void) unsetCscAssignsOrderMemo {
  [__cscAssignsOrderMemo release_stub];
  __cscAssignsOrderMemo = nil;
  __cscAssignsOrderMemo_isset = NO;
}

- (NSString *) psrStopOrderMemo {
  return [[__psrStopOrderMemo retain_stub] autorelease_stub];
}

- (void) setPsrStopOrderMemo: (NSString *) psrStopOrderMemo {
  [psrStopOrderMemo retain_stub];
  [__psrStopOrderMemo release_stub];
  __psrStopOrderMemo = psrStopOrderMemo;
  __psrStopOrderMemo_isset = YES;
}

- (BOOL) psrStopOrderMemoIsSet {
  return __psrStopOrderMemo_isset;
}

- (void) unsetPsrStopOrderMemo {
  [__psrStopOrderMemo release_stub];
  __psrStopOrderMemo = nil;
  __psrStopOrderMemo_isset = NO;
}

- (NSString *) psrDoorMemo {
  return [[__psrDoorMemo retain_stub] autorelease_stub];
}

- (void) setPsrDoorMemo: (NSString *) psrDoorMemo {
  [psrDoorMemo retain_stub];
  [__psrDoorMemo release_stub];
  __psrDoorMemo = psrDoorMemo;
  __psrDoorMemo_isset = YES;
}

- (BOOL) psrDoorMemoIsSet {
  return __psrDoorMemo_isset;
}

- (void) unsetPsrDoorMemo {
  [__psrDoorMemo release_stub];
  __psrDoorMemo = nil;
  __psrDoorMemo_isset = NO;
}

- (NSString *) sourceName {
  return [[__sourceName retain_stub] autorelease_stub];
}

- (void) setSourceName: (NSString *) sourceName {
  [sourceName retain_stub];
  [__sourceName release_stub];
  __sourceName = sourceName;
  __sourceName_isset = YES;
}

- (BOOL) sourceNameIsSet {
  return __sourceName_isset;
}

- (void) unsetSourceName {
  [__sourceName release_stub];
  __sourceName = nil;
  __sourceName_isset = NO;
}

- (NSString *) sourceIcon {
  return [[__sourceIcon retain_stub] autorelease_stub];
}

- (void) setSourceIcon: (NSString *) sourceIcon {
  [sourceIcon retain_stub];
  [__sourceIcon release_stub];
  __sourceIcon = sourceIcon;
  __sourceIcon_isset = YES;
}

- (BOOL) sourceIconIsSet {
  return __sourceIcon_isset;
}

- (void) unsetSourceIcon {
  [__sourceIcon release_stub];
  __sourceIcon = nil;
  __sourceIcon_isset = NO;
}

- (NSString *) foremanId {
  return [[__foremanId retain_stub] autorelease_stub];
}

- (void) setForemanId: (NSString *) foremanId {
  [foremanId retain_stub];
  [__foremanId release_stub];
  __foremanId = foremanId;
  __foremanId_isset = YES;
}

- (BOOL) foremanIdIsSet {
  return __foremanId_isset;
}

- (void) unsetForemanId {
  [__foremanId release_stub];
  __foremanId = nil;
  __foremanId_isset = NO;
}

- (NSString *) foremanName {
  return [[__foremanName retain_stub] autorelease_stub];
}

- (void) setForemanName: (NSString *) foremanName {
  [foremanName retain_stub];
  [__foremanName release_stub];
  __foremanName = foremanName;
  __foremanName_isset = YES;
}

- (BOOL) foremanNameIsSet {
  return __foremanName_isset;
}

- (void) unsetForemanName {
  [__foremanName release_stub];
  __foremanName = nil;
  __foremanName_isset = NO;
}

- (NSString *) isDistribute {
  return [[__isDistribute retain_stub] autorelease_stub];
}

- (void) setIsDistribute: (NSString *) isDistribute {
  [isDistribute retain_stub];
  [__isDistribute release_stub];
  __isDistribute = isDistribute;
  __isDistribute_isset = YES;
}

- (BOOL) isDistributeIsSet {
  return __isDistribute_isset;
}

- (void) unsetIsDistribute {
  [__isDistribute release_stub];
  __isDistribute = nil;
  __isDistribute_isset = NO;
}

- (NSString *) doorTimeShow {
  return [[__doorTimeShow retain_stub] autorelease_stub];
}

- (void) setDoorTimeShow: (NSString *) doorTimeShow {
  [doorTimeShow retain_stub];
  [__doorTimeShow release_stub];
  __doorTimeShow = doorTimeShow;
  __doorTimeShow_isset = YES;
}

- (BOOL) doorTimeShowIsSet {
  return __doorTimeShow_isset;
}

- (void) unsetDoorTimeShow {
  [__doorTimeShow release_stub];
  __doorTimeShow = nil;
  __doorTimeShow_isset = NO;
}

- (NSString *) activitiesName {
  return [[__activitiesName retain_stub] autorelease_stub];
}

- (void) setActivitiesName: (NSString *) activitiesName {
  [activitiesName retain_stub];
  [__activitiesName release_stub];
  __activitiesName = activitiesName;
  __activitiesName_isset = YES;
}

- (BOOL) activitiesNameIsSet {
  return __activitiesName_isset;
}

- (void) unsetActivitiesName {
  [__activitiesName release_stub];
  __activitiesName = nil;
  __activitiesName_isset = NO;
}

- (NSString *) workerName {
  return [[__workerName retain_stub] autorelease_stub];
}

- (void) setWorkerName: (NSString *) workerName {
  [workerName retain_stub];
  [__workerName release_stub];
  __workerName = workerName;
  __workerName_isset = YES;
}

- (BOOL) workerNameIsSet {
  return __workerName_isset;
}

- (void) unsetWorkerName {
  [__workerName release_stub];
  __workerName = nil;
  __workerName_isset = NO;
}

- (uint8_t) cameraIsBack {
  return __cameraIsBack;
}

- (void) setCameraIsBack: (uint8_t) cameraIsBack {
  __cameraIsBack = cameraIsBack;
  __cameraIsBack_isset = YES;
}

- (BOOL) cameraIsBackIsSet {
  return __cameraIsBack_isset;
}

- (void) unsetCameraIsBack {
  __cameraIsBack_isset = NO;
}

- (NSString *) cameraCode {
  return [[__cameraCode retain_stub] autorelease_stub];
}

- (void) setCameraCode: (NSString *) cameraCode {
  [cameraCode retain_stub];
  [__cameraCode release_stub];
  __cameraCode = cameraCode;
  __cameraCode_isset = YES;
}

- (BOOL) cameraCodeIsSet {
  return __cameraCode_isset;
}

- (void) unsetCameraCode {
  [__cameraCode release_stub];
  __cameraCode = nil;
  __cameraCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCustomerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobilePhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserCalled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServicePriceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvinceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvinceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStoreId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPsrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setCamera: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoorTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContractTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTotalFeeOrigin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoBefore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoInProgress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoAfter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPauseReasonMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setModifyTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatusName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRevServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPsrServiceMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCscAssignsOrderMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPsrStopOrderMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPsrDoorMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 36:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 37:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceIcon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 38:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setForemanId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 39:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setForemanName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 40:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsDistribute: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 41:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoorTimeShow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 42:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivitiesName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 43:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 44:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setCameraIsBack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 45:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCameraCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Order"];
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__customerId_isset) {
    [outProtocol writeFieldBeginWithName: @"customerId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __customerId];
    [outProtocol writeFieldEnd];
  }
  if (__mobilePhone_isset) {
    if (__mobilePhone != nil) {
      [outProtocol writeFieldBeginWithName: @"mobilePhone" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __mobilePhone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userCalled_isset) {
    if (__userCalled != nil) {
      [outProtocol writeFieldBeginWithName: @"userCalled" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __userCalled];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__servicePriceId_isset) {
    [outProtocol writeFieldBeginWithName: @"servicePriceId" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __servicePriceId];
    [outProtocol writeFieldEnd];
  }
  if (__sourceId_isset) {
    if (__sourceId != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __sourceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__provinceName_isset) {
    if (__provinceName != nil) {
      [outProtocol writeFieldBeginWithName: @"provinceName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __provinceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__provinceCode_isset) {
    if (__provinceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"provinceCode" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __provinceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityCode_isset) {
    [outProtocol writeFieldBeginWithName: @"cityCode" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __cityCode];
    [outProtocol writeFieldEnd];
  }
  if (__storeId_isset) {
    [outProtocol writeFieldBeginWithName: @"storeId" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __storeId];
    [outProtocol writeFieldEnd];
  }
  if (__psrId_isset) {
    [outProtocol writeFieldBeginWithName: @"psrId" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __psrId];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BYTE fieldID: 15];
    [outProtocol writeByte: __status];
    [outProtocol writeFieldEnd];
  }
  if (__camera_isset) {
    [outProtocol writeFieldBeginWithName: @"camera" type: TType_BYTE fieldID: 16];
    [outProtocol writeByte: __camera];
    [outProtocol writeFieldEnd];
  }
  if (__doorTime_isset) {
    if (__doorTime != nil) {
      [outProtocol writeFieldBeginWithName: @"doorTime" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __doorTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractTime_isset) {
    if (__contractTime != nil) {
      [outProtocol writeFieldBeginWithName: @"contractTime" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __contractTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startTime_isset) {
    if (__startTime != nil) {
      [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __startTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endTime_isset) {
    if (__endTime != nil) {
      [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __endTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalFeeOrigin_isset) {
    [outProtocol writeFieldBeginWithName: @"totalFeeOrigin" type: TType_DOUBLE fieldID: 21];
    [outProtocol writeDouble: __totalFeeOrigin];
    [outProtocol writeFieldEnd];
  }
  if (__totalFee_isset) {
    [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_DOUBLE fieldID: 22];
    [outProtocol writeDouble: __totalFee];
    [outProtocol writeFieldEnd];
  }
  if (__photoBefore_isset) {
    if (__photoBefore != nil) {
      [outProtocol writeFieldBeginWithName: @"photoBefore" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __photoBefore];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photoInProgress_isset) {
    if (__photoInProgress != nil) {
      [outProtocol writeFieldBeginWithName: @"photoInProgress" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __photoInProgress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photoAfter_isset) {
    if (__photoAfter != nil) {
      [outProtocol writeFieldBeginWithName: @"photoAfter" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __photoAfter];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pauseReasonMemo_isset) {
    if (__pauseReasonMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"pauseReasonMemo" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __pauseReasonMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modifyTime_isset) {
    if (__modifyTime != nil) {
      [outProtocol writeFieldBeginWithName: @"modifyTime" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __modifyTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusName_isset) {
    if (__statusName != nil) {
      [outProtocol writeFieldBeginWithName: @"statusName" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __statusName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__revServiceName_isset) {
    if (__revServiceName != nil) {
      [outProtocol writeFieldBeginWithName: @"revServiceName" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __revServiceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__psrServiceMemo_isset) {
    if (__psrServiceMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"psrServiceMemo" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __psrServiceMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cscAssignsOrderMemo_isset) {
    if (__cscAssignsOrderMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"cscAssignsOrderMemo" type: TType_STRING fieldID: 33];
      [outProtocol writeString: __cscAssignsOrderMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__psrStopOrderMemo_isset) {
    if (__psrStopOrderMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"psrStopOrderMemo" type: TType_STRING fieldID: 34];
      [outProtocol writeString: __psrStopOrderMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__psrDoorMemo_isset) {
    if (__psrDoorMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"psrDoorMemo" type: TType_STRING fieldID: 35];
      [outProtocol writeString: __psrDoorMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceName_isset) {
    if (__sourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceName" type: TType_STRING fieldID: 36];
      [outProtocol writeString: __sourceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceIcon_isset) {
    if (__sourceIcon != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceIcon" type: TType_STRING fieldID: 37];
      [outProtocol writeString: __sourceIcon];
      [outProtocol writeFieldEnd];
    }
  }
  if (__foremanId_isset) {
    if (__foremanId != nil) {
      [outProtocol writeFieldBeginWithName: @"foremanId" type: TType_STRING fieldID: 38];
      [outProtocol writeString: __foremanId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__foremanName_isset) {
    if (__foremanName != nil) {
      [outProtocol writeFieldBeginWithName: @"foremanName" type: TType_STRING fieldID: 39];
      [outProtocol writeString: __foremanName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDistribute_isset) {
    if (__isDistribute != nil) {
      [outProtocol writeFieldBeginWithName: @"isDistribute" type: TType_STRING fieldID: 40];
      [outProtocol writeString: __isDistribute];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doorTimeShow_isset) {
    if (__doorTimeShow != nil) {
      [outProtocol writeFieldBeginWithName: @"doorTimeShow" type: TType_STRING fieldID: 41];
      [outProtocol writeString: __doorTimeShow];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activitiesName_isset) {
    if (__activitiesName != nil) {
      [outProtocol writeFieldBeginWithName: @"activitiesName" type: TType_STRING fieldID: 42];
      [outProtocol writeString: __activitiesName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workerName_isset) {
    if (__workerName != nil) {
      [outProtocol writeFieldBeginWithName: @"workerName" type: TType_STRING fieldID: 43];
      [outProtocol writeString: __workerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cameraIsBack_isset) {
    [outProtocol writeFieldBeginWithName: @"cameraIsBack" type: TType_BYTE fieldID: 44];
    [outProtocol writeByte: __cameraIsBack];
    [outProtocol writeFieldEnd];
  }
  if (__cameraCode_isset) {
    if (__cameraCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cameraCode" type: TType_STRING fieldID: 45];
      [outProtocol writeString: __cameraCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__customerId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'customerId' is not set."];
  }
  if (!__mobilePhone_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobilePhone' is not set."];
  }
  if (!__userCalled_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'userCalled' is not set."];
  }
  if (!__address_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'address' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Order("];
  [ms appendString: @"orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",customerId:"];
  [ms appendFormat: @"%qi", __customerId];
  [ms appendString: @",mobilePhone:"];
  [ms appendFormat: @"\"%@\"", __mobilePhone];
  [ms appendString: @",userCalled:"];
  [ms appendFormat: @"\"%@\"", __userCalled];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",servicePriceId:"];
  [ms appendFormat: @"%qi", __servicePriceId];
  [ms appendString: @",sourceId:"];
  [ms appendFormat: @"\"%@\"", __sourceId];
  [ms appendString: @",provinceName:"];
  [ms appendFormat: @"\"%@\"", __provinceName];
  [ms appendString: @",provinceCode:"];
  [ms appendFormat: @"\"%@\"", __provinceCode];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @",cityCode:"];
  [ms appendFormat: @"%i", __cityCode];
  [ms appendString: @",storeId:"];
  [ms appendFormat: @"%i", __storeId];
  [ms appendString: @",psrId:"];
  [ms appendFormat: @"%qi", __psrId];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",camera:"];
  [ms appendFormat: @"%i", __camera];
  [ms appendString: @",doorTime:"];
  [ms appendFormat: @"\"%@\"", __doorTime];
  [ms appendString: @",contractTime:"];
  [ms appendFormat: @"\"%@\"", __contractTime];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"\"%@\"", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"\"%@\"", __endTime];
  [ms appendString: @",totalFeeOrigin:"];
  [ms appendFormat: @"%f", __totalFeeOrigin];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"%f", __totalFee];
  [ms appendString: @",photoBefore:"];
  [ms appendFormat: @"\"%@\"", __photoBefore];
  [ms appendString: @",photoInProgress:"];
  [ms appendFormat: @"\"%@\"", __photoInProgress];
  [ms appendString: @",photoAfter:"];
  [ms appendFormat: @"\"%@\"", __photoAfter];
  [ms appendString: @",pauseReasonMemo:"];
  [ms appendFormat: @"\"%@\"", __pauseReasonMemo];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",modifyTime:"];
  [ms appendFormat: @"\"%@\"", __modifyTime];
  [ms appendString: @",statusName:"];
  [ms appendFormat: @"\"%@\"", __statusName];
  [ms appendString: @",revServiceName:"];
  [ms appendFormat: @"\"%@\"", __revServiceName];
  [ms appendString: @",psrServiceMemo:"];
  [ms appendFormat: @"\"%@\"", __psrServiceMemo];
  [ms appendString: @",cscAssignsOrderMemo:"];
  [ms appendFormat: @"\"%@\"", __cscAssignsOrderMemo];
  [ms appendString: @",psrStopOrderMemo:"];
  [ms appendFormat: @"\"%@\"", __psrStopOrderMemo];
  [ms appendString: @",psrDoorMemo:"];
  [ms appendFormat: @"\"%@\"", __psrDoorMemo];
  [ms appendString: @",sourceName:"];
  [ms appendFormat: @"\"%@\"", __sourceName];
  [ms appendString: @",sourceIcon:"];
  [ms appendFormat: @"\"%@\"", __sourceIcon];
  [ms appendString: @",foremanId:"];
  [ms appendFormat: @"\"%@\"", __foremanId];
  [ms appendString: @",foremanName:"];
  [ms appendFormat: @"\"%@\"", __foremanName];
  [ms appendString: @",isDistribute:"];
  [ms appendFormat: @"\"%@\"", __isDistribute];
  [ms appendString: @",doorTimeShow:"];
  [ms appendFormat: @"\"%@\"", __doorTimeShow];
  [ms appendString: @",activitiesName:"];
  [ms appendFormat: @"\"%@\"", __activitiesName];
  [ms appendString: @",workerName:"];
  [ms appendFormat: @"\"%@\"", __workerName];
  [ms appendString: @",cameraIsBack:"];
  [ms appendFormat: @"%i", __cameraIsBack];
  [ms appendString: @",cameraCode:"];
  [ms appendFormat: @"\"%@\"", __cameraCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OrderList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTotal: (int64_t) total currentPage: (int32_t) currentPage pageNumber: (int32_t) pageNumber orders: (NSMutableArray *) orders type: (int32_t) type searchKey: (NSString *) searchKey
{
  self = [super init];
  __total = total;
  __total_isset = YES;
  __currentPage = currentPage;
  __currentPage_isset = YES;
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
  __orders = [orders retain_stub];
  __orders_isset = YES;
  __type = type;
  __type_isset = YES;
  __searchKey = [searchKey retain_stub];
  __searchKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt64ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentPage"])
  {
    __currentPage = [decoder decodeInt32ForKey: @"currentPage"];
    __currentPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageNumber"])
  {
    __pageNumber = [decoder decodeInt32ForKey: @"pageNumber"];
    __pageNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"orders"])
  {
    __orders = [[decoder decodeObjectForKey: @"orders"] retain_stub];
    __orders_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchKey"])
  {
    __searchKey = [[decoder decodeObjectForKey: @"searchKey"] retain_stub];
    __searchKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__total_isset)
  {
    [encoder encodeInt64: __total forKey: @"total"];
  }
  if (__currentPage_isset)
  {
    [encoder encodeInt32: __currentPage forKey: @"currentPage"];
  }
  if (__pageNumber_isset)
  {
    [encoder encodeInt32: __pageNumber forKey: @"pageNumber"];
  }
  if (__orders_isset)
  {
    [encoder encodeObject: __orders forKey: @"orders"];
  }
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
  if (__searchKey_isset)
  {
    [encoder encodeObject: __searchKey forKey: @"searchKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __total_isset ? 2654435761 : 0;
  if (__total_isset)
  {
    hash = (hash * 31) ^ [@(__total) hash];
  }
  hash = (hash * 31) ^ __currentPage_isset ? 2654435761 : 0;
  if (__currentPage_isset)
  {
    hash = (hash * 31) ^ [@(__currentPage) hash];
  }
  hash = (hash * 31) ^ __pageNumber_isset ? 2654435761 : 0;
  if (__pageNumber_isset)
  {
    hash = (hash * 31) ^ [@(__pageNumber) hash];
  }
  hash = (hash * 31) ^ __orders_isset ? 2654435761 : 0;
  if (__orders_isset)
  {
    hash = (hash * 31) ^ [__orders hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __searchKey_isset ? 2654435761 : 0;
  if (__searchKey_isset)
  {
    hash = (hash * 31) ^ [__searchKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[OrderList class]]) {
    return NO;
  }
  OrderList *other = (OrderList *)anObject;
  if ((__total_isset != other->__total_isset) ||
      (__total_isset && (__total != other->__total))) {
    return NO;
  }
  if ((__currentPage_isset != other->__currentPage_isset) ||
      (__currentPage_isset && (__currentPage != other->__currentPage))) {
    return NO;
  }
  if ((__pageNumber_isset != other->__pageNumber_isset) ||
      (__pageNumber_isset && (__pageNumber != other->__pageNumber))) {
    return NO;
  }
  if ((__orders_isset != other->__orders_isset) ||
      (__orders_isset && ((__orders || other->__orders) && ![__orders isEqual:other->__orders]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__searchKey_isset != other->__searchKey_isset) ||
      (__searchKey_isset && ((__searchKey || other->__searchKey) && ![__searchKey isEqual:other->__searchKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__orders release_stub];
  [__searchKey release_stub];
  [super dealloc_stub];
}

- (int64_t) total {
  return __total;
}

- (void) setTotal: (int64_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (int32_t) currentPage {
  return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
  __currentPage = currentPage;
  __currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
  return __currentPage_isset;
}

- (void) unsetCurrentPage {
  __currentPage_isset = NO;
}

- (int32_t) pageNumber {
  return __pageNumber;
}

- (void) setPageNumber: (int32_t) pageNumber {
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
}

- (BOOL) pageNumberIsSet {
  return __pageNumber_isset;
}

- (void) unsetPageNumber {
  __pageNumber_isset = NO;
}

- (NSMutableArray *) orders {
  return [[__orders retain_stub] autorelease_stub];
}

- (void) setOrders: (NSMutableArray *) orders {
  [orders retain_stub];
  [__orders release_stub];
  __orders = orders;
  __orders_isset = YES;
}

- (BOOL) ordersIsSet {
  return __orders_isset;
}

- (void) unsetOrders {
  [__orders release_stub];
  __orders = nil;
  __orders_isset = NO;
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) searchKey {
  return [[__searchKey retain_stub] autorelease_stub];
}

- (void) setSearchKey: (NSString *) searchKey {
  [searchKey retain_stub];
  [__searchKey release_stub];
  __searchKey = searchKey;
  __searchKey_isset = YES;
}

- (BOOL) searchKeyIsSet {
  return __searchKey_isset;
}

- (void) unsetSearchKey {
  [__searchKey release_stub];
  __searchKey = nil;
  __searchKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Order *_elem2 = [[Order alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setOrders: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderList"];
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __total];
    [outProtocol writeFieldEnd];
  }
  if (__currentPage_isset) {
    [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __currentPage];
    [outProtocol writeFieldEnd];
  }
  if (__pageNumber_isset) {
    [outProtocol writeFieldBeginWithName: @"pageNumber" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageNumber];
    [outProtocol writeFieldEnd];
  }
  if (__orders_isset) {
    if (__orders != nil) {
      [outProtocol writeFieldBeginWithName: @"orders" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__orders count]];
        int idx4;
        for (idx4 = 0; idx4 < [__orders count]; idx4++)
        {
          [[__orders objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__searchKey_isset) {
    if (__searchKey != nil) {
      [outProtocol writeFieldBeginWithName: @"searchKey" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __searchKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__total_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'total' is not set."];
  }
  if (!__currentPage_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'currentPage' is not set."];
  }
  if (!__pageNumber_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pageNumber' is not set."];
  }
  if (!__orders_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orders' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OrderList("];
  [ms appendString: @"total:"];
  [ms appendFormat: @"%qi", __total];
  [ms appendString: @",currentPage:"];
  [ms appendFormat: @"%i", __currentPage];
  [ms appendString: @",pageNumber:"];
  [ms appendFormat: @"%i", __pageNumber];
  [ms appendString: @",orders:"];
  [ms appendFormat: @"%@", __orders];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",searchKey:"];
  [ms appendFormat: @"\"%@\"", __searchKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Notice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id uid: (int64_t) uid orderId: (int64_t) orderId title: (NSString *) title content: (NSString *) content status: (uint8_t) status createTime: (NSString *) createTime modifyTime: (NSString *) modifyTime
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __status = status;
  __status_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __modifyTime = [modifyTime retain_stub];
  __modifyTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"modifyTime"])
  {
    __modifyTime = [[decoder decodeObjectForKey: @"modifyTime"] retain_stub];
    __modifyTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__modifyTime_isset)
  {
    [encoder encodeObject: __modifyTime forKey: @"modifyTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __content_isset ? 2654435761 : 0;
  if (__content_isset)
  {
    hash = (hash * 31) ^ [__content hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __modifyTime_isset ? 2654435761 : 0;
  if (__modifyTime_isset)
  {
    hash = (hash * 31) ^ [__modifyTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Notice class]]) {
    return NO;
  }
  Notice *other = (Notice *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__content_isset != other->__content_isset) ||
      (__content_isset && ((__content || other->__content) && ![__content isEqual:other->__content]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__modifyTime_isset != other->__modifyTime_isset) ||
      (__modifyTime_isset && ((__modifyTime || other->__modifyTime) && ![__modifyTime isEqual:other->__modifyTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__title release_stub];
  [__content release_stub];
  [__createTime release_stub];
  [__modifyTime release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (uint8_t) status {
  return __status;
}

- (void) setStatus: (uint8_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) modifyTime {
  return [[__modifyTime retain_stub] autorelease_stub];
}

- (void) setModifyTime: (NSString *) modifyTime {
  [modifyTime retain_stub];
  [__modifyTime release_stub];
  __modifyTime = modifyTime;
  __modifyTime_isset = YES;
}

- (BOOL) modifyTimeIsSet {
  return __modifyTime_isset;
}

- (void) unsetModifyTime {
  [__modifyTime release_stub];
  __modifyTime = nil;
  __modifyTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setModifyTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Notice"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BYTE fieldID: 6];
    [outProtocol writeByte: __status];
    [outProtocol writeFieldEnd];
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modifyTime_isset) {
    if (__modifyTime != nil) {
      [outProtocol writeFieldBeginWithName: @"modifyTime" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __modifyTime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__uid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uid' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__content_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'content' is not set."];
  }
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Notice("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",modifyTime:"];
  [ms appendFormat: @"\"%@\"", __modifyTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NoticeList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTotal: (int32_t) total currentPage: (int32_t) currentPage pageNumber: (int32_t) pageNumber notices: (NSMutableArray *) notices
{
  self = [super init];
  __total = total;
  __total_isset = YES;
  __currentPage = currentPage;
  __currentPage_isset = YES;
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
  __notices = [notices retain_stub];
  __notices_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt32ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentPage"])
  {
    __currentPage = [decoder decodeInt32ForKey: @"currentPage"];
    __currentPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageNumber"])
  {
    __pageNumber = [decoder decodeInt32ForKey: @"pageNumber"];
    __pageNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"notices"])
  {
    __notices = [[decoder decodeObjectForKey: @"notices"] retain_stub];
    __notices_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__total_isset)
  {
    [encoder encodeInt32: __total forKey: @"total"];
  }
  if (__currentPage_isset)
  {
    [encoder encodeInt32: __currentPage forKey: @"currentPage"];
  }
  if (__pageNumber_isset)
  {
    [encoder encodeInt32: __pageNumber forKey: @"pageNumber"];
  }
  if (__notices_isset)
  {
    [encoder encodeObject: __notices forKey: @"notices"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __total_isset ? 2654435761 : 0;
  if (__total_isset)
  {
    hash = (hash * 31) ^ [@(__total) hash];
  }
  hash = (hash * 31) ^ __currentPage_isset ? 2654435761 : 0;
  if (__currentPage_isset)
  {
    hash = (hash * 31) ^ [@(__currentPage) hash];
  }
  hash = (hash * 31) ^ __pageNumber_isset ? 2654435761 : 0;
  if (__pageNumber_isset)
  {
    hash = (hash * 31) ^ [@(__pageNumber) hash];
  }
  hash = (hash * 31) ^ __notices_isset ? 2654435761 : 0;
  if (__notices_isset)
  {
    hash = (hash * 31) ^ [__notices hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NoticeList class]]) {
    return NO;
  }
  NoticeList *other = (NoticeList *)anObject;
  if ((__total_isset != other->__total_isset) ||
      (__total_isset && (__total != other->__total))) {
    return NO;
  }
  if ((__currentPage_isset != other->__currentPage_isset) ||
      (__currentPage_isset && (__currentPage != other->__currentPage))) {
    return NO;
  }
  if ((__pageNumber_isset != other->__pageNumber_isset) ||
      (__pageNumber_isset && (__pageNumber != other->__pageNumber))) {
    return NO;
  }
  if ((__notices_isset != other->__notices_isset) ||
      (__notices_isset && ((__notices || other->__notices) && ![__notices isEqual:other->__notices]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__notices release_stub];
  [super dealloc_stub];
}

- (int32_t) total {
  return __total;
}

- (void) setTotal: (int32_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (int32_t) currentPage {
  return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
  __currentPage = currentPage;
  __currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
  return __currentPage_isset;
}

- (void) unsetCurrentPage {
  __currentPage_isset = NO;
}

- (int32_t) pageNumber {
  return __pageNumber;
}

- (void) setPageNumber: (int32_t) pageNumber {
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
}

- (BOOL) pageNumberIsSet {
  return __pageNumber_isset;
}

- (void) unsetPageNumber {
  __pageNumber_isset = NO;
}

- (NSMutableArray *) notices {
  return [[__notices retain_stub] autorelease_stub];
}

- (void) setNotices: (NSMutableArray *) notices {
  [notices retain_stub];
  [__notices release_stub];
  __notices = notices;
  __notices_isset = YES;
}

- (BOOL) noticesIsSet {
  return __notices_isset;
}

- (void) unsetNotices {
  [__notices release_stub];
  __notices = nil;
  __notices_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Notice *_elem7 = [[Notice alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setNotices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NoticeList"];
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __total];
    [outProtocol writeFieldEnd];
  }
  if (__currentPage_isset) {
    [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __currentPage];
    [outProtocol writeFieldEnd];
  }
  if (__pageNumber_isset) {
    [outProtocol writeFieldBeginWithName: @"pageNumber" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageNumber];
    [outProtocol writeFieldEnd];
  }
  if (__notices_isset) {
    if (__notices != nil) {
      [outProtocol writeFieldBeginWithName: @"notices" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__notices count]];
        int idx9;
        for (idx9 = 0; idx9 < [__notices count]; idx9++)
        {
          [[__notices objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__total_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'total' is not set."];
  }
  if (!__currentPage_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'currentPage' is not set."];
  }
  if (!__pageNumber_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pageNumber' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NoticeList("];
  [ms appendString: @"total:"];
  [ms appendFormat: @"%i", __total];
  [ms appendString: @",currentPage:"];
  [ms appendFormat: @"%i", __currentPage];
  [ms appendString: @",pageNumber:"];
  [ms appendFormat: @"%i", __pageNumber];
  [ms appendString: @",notices:"];
  [ms appendFormat: @"%@", __notices];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ServiceItem

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name unit: (NSString *) unit
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ServiceItem class]]) {
    return NO;
  }
  ServiceItem *other = (ServiceItem *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__unit release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceItem"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceItem("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Material

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id brandId: (int32_t) brandId name: (NSString *) name unit: (NSString *) unit
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __brandId = brandId;
  __brandId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"brandId"])
  {
    __brandId = [decoder decodeInt32ForKey: @"brandId"];
    __brandId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__brandId_isset)
  {
    [encoder encodeInt32: __brandId forKey: @"brandId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __brandId_isset ? 2654435761 : 0;
  if (__brandId_isset)
  {
    hash = (hash * 31) ^ [@(__brandId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Material class]]) {
    return NO;
  }
  Material *other = (Material *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__brandId_isset != other->__brandId_isset) ||
      (__brandId_isset && (__brandId != other->__brandId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__unit release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) brandId {
  return __brandId;
}

- (void) setBrandId: (int32_t) brandId {
  __brandId = brandId;
  __brandId_isset = YES;
}

- (BOOL) brandIdIsSet {
  return __brandId_isset;
}

- (void) unsetBrandId {
  __brandId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBrandId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Material"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__brandId_isset) {
    [outProtocol writeFieldBeginWithName: @"brandId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __brandId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__brandId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'brandId' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Material("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",brandId:"];
  [ms appendFormat: @"%i", __brandId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CraftSuit

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CraftSuit class]]) {
    return NO;
  }
  CraftSuit *other = (CraftSuit *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CraftSuit"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CraftSuit("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OrderService

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id orderId: (int64_t) orderId servicePriceId: (int64_t) servicePriceId area: (double) area fee: (double) fee createTime: (NSString *) createTime modifyTime: (NSString *) modifyTime brandName: (NSString *) brandName brandId: (int64_t) brandId materialName: (NSString *) materialName materialId: (int64_t) materialId serviceItemName: (NSString *) serviceItemName serviceItemId: (int64_t) serviceItemId craftSuitName: (NSString *) craftSuitName craftSuitId: (int64_t) craftSuitId materialUnit: (NSString *) materialUnit unit: (NSString *) unit
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __servicePriceId = servicePriceId;
  __servicePriceId_isset = YES;
  __area = area;
  __area_isset = YES;
  __fee = fee;
  __fee_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __modifyTime = [modifyTime retain_stub];
  __modifyTime_isset = YES;
  __brandName = [brandName retain_stub];
  __brandName_isset = YES;
  __brandId = brandId;
  __brandId_isset = YES;
  __materialName = [materialName retain_stub];
  __materialName_isset = YES;
  __materialId = materialId;
  __materialId_isset = YES;
  __serviceItemName = [serviceItemName retain_stub];
  __serviceItemName_isset = YES;
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
  __craftSuitName = [craftSuitName retain_stub];
  __craftSuitName_isset = YES;
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
  __materialUnit = [materialUnit retain_stub];
  __materialUnit_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"servicePriceId"])
  {
    __servicePriceId = [decoder decodeInt64ForKey: @"servicePriceId"];
    __servicePriceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [decoder decodeDoubleForKey: @"area"];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [decoder decodeDoubleForKey: @"fee"];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"modifyTime"])
  {
    __modifyTime = [[decoder decodeObjectForKey: @"modifyTime"] retain_stub];
    __modifyTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"brandName"])
  {
    __brandName = [[decoder decodeObjectForKey: @"brandName"] retain_stub];
    __brandName_isset = YES;
  }
  if ([decoder containsValueForKey: @"brandId"])
  {
    __brandId = [decoder decodeInt64ForKey: @"brandId"];
    __brandId_isset = YES;
  }
  if ([decoder containsValueForKey: @"materialName"])
  {
    __materialName = [[decoder decodeObjectForKey: @"materialName"] retain_stub];
    __materialName_isset = YES;
  }
  if ([decoder containsValueForKey: @"materialId"])
  {
    __materialId = [decoder decodeInt64ForKey: @"materialId"];
    __materialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemName"])
  {
    __serviceItemName = [[decoder decodeObjectForKey: @"serviceItemName"] retain_stub];
    __serviceItemName_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemId"])
  {
    __serviceItemId = [decoder decodeInt64ForKey: @"serviceItemId"];
    __serviceItemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"craftSuitName"])
  {
    __craftSuitName = [[decoder decodeObjectForKey: @"craftSuitName"] retain_stub];
    __craftSuitName_isset = YES;
  }
  if ([decoder containsValueForKey: @"craftSuitId"])
  {
    __craftSuitId = [decoder decodeInt64ForKey: @"craftSuitId"];
    __craftSuitId_isset = YES;
  }
  if ([decoder containsValueForKey: @"materialUnit"])
  {
    __materialUnit = [[decoder decodeObjectForKey: @"materialUnit"] retain_stub];
    __materialUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__servicePriceId_isset)
  {
    [encoder encodeInt64: __servicePriceId forKey: @"servicePriceId"];
  }
  if (__area_isset)
  {
    [encoder encodeDouble: __area forKey: @"area"];
  }
  if (__fee_isset)
  {
    [encoder encodeDouble: __fee forKey: @"fee"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__modifyTime_isset)
  {
    [encoder encodeObject: __modifyTime forKey: @"modifyTime"];
  }
  if (__brandName_isset)
  {
    [encoder encodeObject: __brandName forKey: @"brandName"];
  }
  if (__brandId_isset)
  {
    [encoder encodeInt64: __brandId forKey: @"brandId"];
  }
  if (__materialName_isset)
  {
    [encoder encodeObject: __materialName forKey: @"materialName"];
  }
  if (__materialId_isset)
  {
    [encoder encodeInt64: __materialId forKey: @"materialId"];
  }
  if (__serviceItemName_isset)
  {
    [encoder encodeObject: __serviceItemName forKey: @"serviceItemName"];
  }
  if (__serviceItemId_isset)
  {
    [encoder encodeInt64: __serviceItemId forKey: @"serviceItemId"];
  }
  if (__craftSuitName_isset)
  {
    [encoder encodeObject: __craftSuitName forKey: @"craftSuitName"];
  }
  if (__craftSuitId_isset)
  {
    [encoder encodeInt64: __craftSuitId forKey: @"craftSuitId"];
  }
  if (__materialUnit_isset)
  {
    [encoder encodeObject: __materialUnit forKey: @"materialUnit"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __servicePriceId_isset ? 2654435761 : 0;
  if (__servicePriceId_isset)
  {
    hash = (hash * 31) ^ [@(__servicePriceId) hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [@(__area) hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [@(__fee) hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __modifyTime_isset ? 2654435761 : 0;
  if (__modifyTime_isset)
  {
    hash = (hash * 31) ^ [__modifyTime hash];
  }
  hash = (hash * 31) ^ __brandName_isset ? 2654435761 : 0;
  if (__brandName_isset)
  {
    hash = (hash * 31) ^ [__brandName hash];
  }
  hash = (hash * 31) ^ __brandId_isset ? 2654435761 : 0;
  if (__brandId_isset)
  {
    hash = (hash * 31) ^ [@(__brandId) hash];
  }
  hash = (hash * 31) ^ __materialName_isset ? 2654435761 : 0;
  if (__materialName_isset)
  {
    hash = (hash * 31) ^ [__materialName hash];
  }
  hash = (hash * 31) ^ __materialId_isset ? 2654435761 : 0;
  if (__materialId_isset)
  {
    hash = (hash * 31) ^ [@(__materialId) hash];
  }
  hash = (hash * 31) ^ __serviceItemName_isset ? 2654435761 : 0;
  if (__serviceItemName_isset)
  {
    hash = (hash * 31) ^ [__serviceItemName hash];
  }
  hash = (hash * 31) ^ __serviceItemId_isset ? 2654435761 : 0;
  if (__serviceItemId_isset)
  {
    hash = (hash * 31) ^ [@(__serviceItemId) hash];
  }
  hash = (hash * 31) ^ __craftSuitName_isset ? 2654435761 : 0;
  if (__craftSuitName_isset)
  {
    hash = (hash * 31) ^ [__craftSuitName hash];
  }
  hash = (hash * 31) ^ __craftSuitId_isset ? 2654435761 : 0;
  if (__craftSuitId_isset)
  {
    hash = (hash * 31) ^ [@(__craftSuitId) hash];
  }
  hash = (hash * 31) ^ __materialUnit_isset ? 2654435761 : 0;
  if (__materialUnit_isset)
  {
    hash = (hash * 31) ^ [__materialUnit hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[OrderService class]]) {
    return NO;
  }
  OrderService *other = (OrderService *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__servicePriceId_isset != other->__servicePriceId_isset) ||
      (__servicePriceId_isset && (__servicePriceId != other->__servicePriceId))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && (__area != other->__area))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && (__fee != other->__fee))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__modifyTime_isset != other->__modifyTime_isset) ||
      (__modifyTime_isset && ((__modifyTime || other->__modifyTime) && ![__modifyTime isEqual:other->__modifyTime]))) {
    return NO;
  }
  if ((__brandName_isset != other->__brandName_isset) ||
      (__brandName_isset && ((__brandName || other->__brandName) && ![__brandName isEqual:other->__brandName]))) {
    return NO;
  }
  if ((__brandId_isset != other->__brandId_isset) ||
      (__brandId_isset && (__brandId != other->__brandId))) {
    return NO;
  }
  if ((__materialName_isset != other->__materialName_isset) ||
      (__materialName_isset && ((__materialName || other->__materialName) && ![__materialName isEqual:other->__materialName]))) {
    return NO;
  }
  if ((__materialId_isset != other->__materialId_isset) ||
      (__materialId_isset && (__materialId != other->__materialId))) {
    return NO;
  }
  if ((__serviceItemName_isset != other->__serviceItemName_isset) ||
      (__serviceItemName_isset && ((__serviceItemName || other->__serviceItemName) && ![__serviceItemName isEqual:other->__serviceItemName]))) {
    return NO;
  }
  if ((__serviceItemId_isset != other->__serviceItemId_isset) ||
      (__serviceItemId_isset && (__serviceItemId != other->__serviceItemId))) {
    return NO;
  }
  if ((__craftSuitName_isset != other->__craftSuitName_isset) ||
      (__craftSuitName_isset && ((__craftSuitName || other->__craftSuitName) && ![__craftSuitName isEqual:other->__craftSuitName]))) {
    return NO;
  }
  if ((__craftSuitId_isset != other->__craftSuitId_isset) ||
      (__craftSuitId_isset && (__craftSuitId != other->__craftSuitId))) {
    return NO;
  }
  if ((__materialUnit_isset != other->__materialUnit_isset) ||
      (__materialUnit_isset && ((__materialUnit || other->__materialUnit) && ![__materialUnit isEqual:other->__materialUnit]))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__createTime release_stub];
  [__modifyTime release_stub];
  [__brandName release_stub];
  [__materialName release_stub];
  [__serviceItemName release_stub];
  [__craftSuitName release_stub];
  [__materialUnit release_stub];
  [__unit release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (int64_t) servicePriceId {
  return __servicePriceId;
}

- (void) setServicePriceId: (int64_t) servicePriceId {
  __servicePriceId = servicePriceId;
  __servicePriceId_isset = YES;
}

- (BOOL) servicePriceIdIsSet {
  return __servicePriceId_isset;
}

- (void) unsetServicePriceId {
  __servicePriceId_isset = NO;
}

- (double) area {
  return __area;
}

- (void) setArea: (double) area {
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  __area_isset = NO;
}

- (double) fee {
  return __fee;
}

- (void) setFee: (double) fee {
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  __fee_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) modifyTime {
  return [[__modifyTime retain_stub] autorelease_stub];
}

- (void) setModifyTime: (NSString *) modifyTime {
  [modifyTime retain_stub];
  [__modifyTime release_stub];
  __modifyTime = modifyTime;
  __modifyTime_isset = YES;
}

- (BOOL) modifyTimeIsSet {
  return __modifyTime_isset;
}

- (void) unsetModifyTime {
  [__modifyTime release_stub];
  __modifyTime = nil;
  __modifyTime_isset = NO;
}

- (NSString *) brandName {
  return [[__brandName retain_stub] autorelease_stub];
}

- (void) setBrandName: (NSString *) brandName {
  [brandName retain_stub];
  [__brandName release_stub];
  __brandName = brandName;
  __brandName_isset = YES;
}

- (BOOL) brandNameIsSet {
  return __brandName_isset;
}

- (void) unsetBrandName {
  [__brandName release_stub];
  __brandName = nil;
  __brandName_isset = NO;
}

- (int64_t) brandId {
  return __brandId;
}

- (void) setBrandId: (int64_t) brandId {
  __brandId = brandId;
  __brandId_isset = YES;
}

- (BOOL) brandIdIsSet {
  return __brandId_isset;
}

- (void) unsetBrandId {
  __brandId_isset = NO;
}

- (NSString *) materialName {
  return [[__materialName retain_stub] autorelease_stub];
}

- (void) setMaterialName: (NSString *) materialName {
  [materialName retain_stub];
  [__materialName release_stub];
  __materialName = materialName;
  __materialName_isset = YES;
}

- (BOOL) materialNameIsSet {
  return __materialName_isset;
}

- (void) unsetMaterialName {
  [__materialName release_stub];
  __materialName = nil;
  __materialName_isset = NO;
}

- (int64_t) materialId {
  return __materialId;
}

- (void) setMaterialId: (int64_t) materialId {
  __materialId = materialId;
  __materialId_isset = YES;
}

- (BOOL) materialIdIsSet {
  return __materialId_isset;
}

- (void) unsetMaterialId {
  __materialId_isset = NO;
}

- (NSString *) serviceItemName {
  return [[__serviceItemName retain_stub] autorelease_stub];
}

- (void) setServiceItemName: (NSString *) serviceItemName {
  [serviceItemName retain_stub];
  [__serviceItemName release_stub];
  __serviceItemName = serviceItemName;
  __serviceItemName_isset = YES;
}

- (BOOL) serviceItemNameIsSet {
  return __serviceItemName_isset;
}

- (void) unsetServiceItemName {
  [__serviceItemName release_stub];
  __serviceItemName = nil;
  __serviceItemName_isset = NO;
}

- (int64_t) serviceItemId {
  return __serviceItemId;
}

- (void) setServiceItemId: (int64_t) serviceItemId {
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
}

- (BOOL) serviceItemIdIsSet {
  return __serviceItemId_isset;
}

- (void) unsetServiceItemId {
  __serviceItemId_isset = NO;
}

- (NSString *) craftSuitName {
  return [[__craftSuitName retain_stub] autorelease_stub];
}

- (void) setCraftSuitName: (NSString *) craftSuitName {
  [craftSuitName retain_stub];
  [__craftSuitName release_stub];
  __craftSuitName = craftSuitName;
  __craftSuitName_isset = YES;
}

- (BOOL) craftSuitNameIsSet {
  return __craftSuitName_isset;
}

- (void) unsetCraftSuitName {
  [__craftSuitName release_stub];
  __craftSuitName = nil;
  __craftSuitName_isset = NO;
}

- (int64_t) craftSuitId {
  return __craftSuitId;
}

- (void) setCraftSuitId: (int64_t) craftSuitId {
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
}

- (BOOL) craftSuitIdIsSet {
  return __craftSuitId_isset;
}

- (void) unsetCraftSuitId {
  __craftSuitId_isset = NO;
}

- (NSString *) materialUnit {
  return [[__materialUnit retain_stub] autorelease_stub];
}

- (void) setMaterialUnit: (NSString *) materialUnit {
  [materialUnit retain_stub];
  [__materialUnit release_stub];
  __materialUnit = materialUnit;
  __materialUnit_isset = YES;
}

- (BOOL) materialUnitIsSet {
  return __materialUnit_isset;
}

- (void) unsetMaterialUnit {
  [__materialUnit release_stub];
  __materialUnit = nil;
  __materialUnit_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServicePriceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setArea: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setModifyTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBrandName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBrandId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMaterialName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMaterialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceItemName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCraftSuitName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCraftSuitId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMaterialUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderService"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__servicePriceId_isset) {
    [outProtocol writeFieldBeginWithName: @"servicePriceId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __servicePriceId];
    [outProtocol writeFieldEnd];
  }
  if (__area_isset) {
    [outProtocol writeFieldBeginWithName: @"area" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __area];
    [outProtocol writeFieldEnd];
  }
  if (__fee_isset) {
    [outProtocol writeFieldBeginWithName: @"fee" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __fee];
    [outProtocol writeFieldEnd];
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modifyTime_isset) {
    if (__modifyTime != nil) {
      [outProtocol writeFieldBeginWithName: @"modifyTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __modifyTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__brandName_isset) {
    if (__brandName != nil) {
      [outProtocol writeFieldBeginWithName: @"brandName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __brandName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__brandId_isset) {
    [outProtocol writeFieldBeginWithName: @"brandId" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __brandId];
    [outProtocol writeFieldEnd];
  }
  if (__materialName_isset) {
    if (__materialName != nil) {
      [outProtocol writeFieldBeginWithName: @"materialName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __materialName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__materialId_isset) {
    [outProtocol writeFieldBeginWithName: @"materialId" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __materialId];
    [outProtocol writeFieldEnd];
  }
  if (__serviceItemName_isset) {
    if (__serviceItemName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceItemName" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __serviceItemName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __serviceItemId];
    [outProtocol writeFieldEnd];
  }
  if (__craftSuitName_isset) {
    if (__craftSuitName != nil) {
      [outProtocol writeFieldBeginWithName: @"craftSuitName" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __craftSuitName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__craftSuitId_isset) {
    [outProtocol writeFieldBeginWithName: @"craftSuitId" type: TType_I64 fieldID: 15];
    [outProtocol writeI64: __craftSuitId];
    [outProtocol writeFieldEnd];
  }
  if (__materialUnit_isset) {
    if (__materialUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"materialUnit" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __materialUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__servicePriceId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'servicePriceId' is not set."];
  }
  if (!__area_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'area' is not set."];
  }
  if (!__fee_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'fee' is not set."];
  }
  if (!__brandName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'brandName' is not set."];
  }
  if (!__brandId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'brandId' is not set."];
  }
  if (!__materialName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'materialName' is not set."];
  }
  if (!__materialId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'materialId' is not set."];
  }
  if (!__serviceItemName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemName' is not set."];
  }
  if (!__serviceItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemId' is not set."];
  }
  if (!__craftSuitName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'craftSuitName' is not set."];
  }
  if (!__craftSuitId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'craftSuitId' is not set."];
  }
  if (!__materialUnit_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'materialUnit' is not set."];
  }
  if (!__unit_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'unit' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OrderService("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",servicePriceId:"];
  [ms appendFormat: @"%qi", __servicePriceId];
  [ms appendString: @",area:"];
  [ms appendFormat: @"%f", __area];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"%f", __fee];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",modifyTime:"];
  [ms appendFormat: @"\"%@\"", __modifyTime];
  [ms appendString: @",brandName:"];
  [ms appendFormat: @"\"%@\"", __brandName];
  [ms appendString: @",brandId:"];
  [ms appendFormat: @"%qi", __brandId];
  [ms appendString: @",materialName:"];
  [ms appendFormat: @"\"%@\"", __materialName];
  [ms appendString: @",materialId:"];
  [ms appendFormat: @"%qi", __materialId];
  [ms appendString: @",serviceItemName:"];
  [ms appendFormat: @"\"%@\"", __serviceItemName];
  [ms appendString: @",serviceItemId:"];
  [ms appendFormat: @"%qi", __serviceItemId];
  [ms appendString: @",craftSuitName:"];
  [ms appendFormat: @"\"%@\"", __craftSuitName];
  [ms appendString: @",craftSuitId:"];
  [ms appendFormat: @"%qi", __craftSuitId];
  [ms appendString: @",materialUnit:"];
  [ms appendFormat: @"\"%@\"", __materialUnit];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OrderPage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTotal: (int32_t) total currentPage: (int32_t) currentPage pageNumber: (int32_t) pageNumber orders: (NSMutableDictionary *) orders type: (int32_t) type searchKey: (NSString *) searchKey
{
  self = [super init];
  __total = total;
  __total_isset = YES;
  __currentPage = currentPage;
  __currentPage_isset = YES;
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
  __orders = [orders retain_stub];
  __orders_isset = YES;
  __type = type;
  __type_isset = YES;
  __searchKey = [searchKey retain_stub];
  __searchKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"total"])
  {
    __total = [decoder decodeInt32ForKey: @"total"];
    __total_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentPage"])
  {
    __currentPage = [decoder decodeInt32ForKey: @"currentPage"];
    __currentPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageNumber"])
  {
    __pageNumber = [decoder decodeInt32ForKey: @"pageNumber"];
    __pageNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"orders"])
  {
    __orders = [[decoder decodeObjectForKey: @"orders"] retain_stub];
    __orders_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchKey"])
  {
    __searchKey = [[decoder decodeObjectForKey: @"searchKey"] retain_stub];
    __searchKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__total_isset)
  {
    [encoder encodeInt32: __total forKey: @"total"];
  }
  if (__currentPage_isset)
  {
    [encoder encodeInt32: __currentPage forKey: @"currentPage"];
  }
  if (__pageNumber_isset)
  {
    [encoder encodeInt32: __pageNumber forKey: @"pageNumber"];
  }
  if (__orders_isset)
  {
    [encoder encodeObject: __orders forKey: @"orders"];
  }
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
  if (__searchKey_isset)
  {
    [encoder encodeObject: __searchKey forKey: @"searchKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __total_isset ? 2654435761 : 0;
  if (__total_isset)
  {
    hash = (hash * 31) ^ [@(__total) hash];
  }
  hash = (hash * 31) ^ __currentPage_isset ? 2654435761 : 0;
  if (__currentPage_isset)
  {
    hash = (hash * 31) ^ [@(__currentPage) hash];
  }
  hash = (hash * 31) ^ __pageNumber_isset ? 2654435761 : 0;
  if (__pageNumber_isset)
  {
    hash = (hash * 31) ^ [@(__pageNumber) hash];
  }
  hash = (hash * 31) ^ __orders_isset ? 2654435761 : 0;
  if (__orders_isset)
  {
    hash = (hash * 31) ^ [__orders hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __searchKey_isset ? 2654435761 : 0;
  if (__searchKey_isset)
  {
    hash = (hash * 31) ^ [__searchKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[OrderPage class]]) {
    return NO;
  }
  OrderPage *other = (OrderPage *)anObject;
  if ((__total_isset != other->__total_isset) ||
      (__total_isset && (__total != other->__total))) {
    return NO;
  }
  if ((__currentPage_isset != other->__currentPage_isset) ||
      (__currentPage_isset && (__currentPage != other->__currentPage))) {
    return NO;
  }
  if ((__pageNumber_isset != other->__pageNumber_isset) ||
      (__pageNumber_isset && (__pageNumber != other->__pageNumber))) {
    return NO;
  }
  if ((__orders_isset != other->__orders_isset) ||
      (__orders_isset && ((__orders || other->__orders) && ![__orders isEqual:other->__orders]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__searchKey_isset != other->__searchKey_isset) ||
      (__searchKey_isset && ((__searchKey || other->__searchKey) && ![__searchKey isEqual:other->__searchKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__orders release_stub];
  [__searchKey release_stub];
  [super dealloc_stub];
}

- (int32_t) total {
  return __total;
}

- (void) setTotal: (int32_t) total {
  __total = total;
  __total_isset = YES;
}

- (BOOL) totalIsSet {
  return __total_isset;
}

- (void) unsetTotal {
  __total_isset = NO;
}

- (int32_t) currentPage {
  return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
  __currentPage = currentPage;
  __currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
  return __currentPage_isset;
}

- (void) unsetCurrentPage {
  __currentPage_isset = NO;
}

- (int32_t) pageNumber {
  return __pageNumber;
}

- (void) setPageNumber: (int32_t) pageNumber {
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
}

- (BOOL) pageNumberIsSet {
  return __pageNumber_isset;
}

- (void) unsetPageNumber {
  __pageNumber_isset = NO;
}

- (NSMutableDictionary *) orders {
  return [[__orders retain_stub] autorelease_stub];
}

- (void) setOrders: (NSMutableDictionary *) orders {
  [orders retain_stub];
  [__orders release_stub];
  __orders = orders;
  __orders_isset = YES;
}

- (BOOL) ordersIsSet {
  return __orders_isset;
}

- (void) unsetOrders {
  [__orders release_stub];
  __orders = nil;
  __orders_isset = NO;
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) searchKey {
  return [[__searchKey retain_stub] autorelease_stub];
}

- (void) setSearchKey: (NSString *) searchKey {
  [searchKey retain_stub];
  [__searchKey release_stub];
  __searchKey = searchKey;
  __searchKey_isset = YES;
}

- (BOOL) searchKeyIsSet {
  return __searchKey_isset;
}

- (void) unsetSearchKey {
  [__searchKey release_stub];
  __searchKey = nil;
  __searchKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size10;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size10];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            int32_t _key12 = [inProtocol readI32];
            Order *_val13 = [[Order alloc] init];
            [_val13 read: inProtocol];
            [fieldValue setObject: _val13 forKey: [NSNumber numberWithLong: _key12]];
            [_val13 release_stub];
          }
          [inProtocol readMapEnd];
          [self setOrders: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderPage"];
  if (__total_isset) {
    [outProtocol writeFieldBeginWithName: @"total" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __total];
    [outProtocol writeFieldEnd];
  }
  if (__currentPage_isset) {
    [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __currentPage];
    [outProtocol writeFieldEnd];
  }
  if (__pageNumber_isset) {
    [outProtocol writeFieldBeginWithName: @"pageNumber" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageNumber];
    [outProtocol writeFieldEnd];
  }
  if (__orders_isset) {
    if (__orders != nil) {
      [outProtocol writeFieldBeginWithName: @"orders" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__orders count]];
        NSEnumerator * _iter14 = [__orders keyEnumerator];
        id key15;
        while ((key15 = [_iter14 nextObject]))
        {
          [outProtocol writeI32: [key15 longValue]];
          [[__orders objectForKey: key15] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__searchKey_isset) {
    if (__searchKey != nil) {
      [outProtocol writeFieldBeginWithName: @"searchKey" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __searchKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__total_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'total' is not set."];
  }
  if (!__currentPage_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'currentPage' is not set."];
  }
  if (!__pageNumber_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pageNumber' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__searchKey_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'searchKey' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OrderPage("];
  [ms appendString: @"total:"];
  [ms appendFormat: @"%i", __total];
  [ms appendString: @",currentPage:"];
  [ms appendFormat: @"%i", __currentPage];
  [ms appendString: @",pageNumber:"];
  [ms appendFormat: @"%i", __pageNumber];
  [ms appendString: @",orders:"];
  [ms appendFormat: @"%@", __orders];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",searchKey:"];
  [ms appendFormat: @"\"%@\"", __searchKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivitiesList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id name: (NSString *) name type: (uint8_t) type
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ActivitiesList class]]) {
    return NO;
  }
  ActivitiesList *other = (ActivitiesList *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (uint8_t) type {
  return __type;
}

- (void) setType: (uint8_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivitiesList"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivitiesList("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Payment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id orderId: (int64_t) orderId paymentNo: (NSString *) paymentNo paymentId: (NSString *) paymentId type: (uint8_t) type amount: (double) amount ipay: (uint8_t) ipay status: (uint8_t) status statusName: (NSString *) statusName remark: (NSString *) remark createTime: (NSString *) createTime modifyTime: (NSString *) modifyTime
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __paymentNo = [paymentNo retain_stub];
  __paymentNo_isset = YES;
  __paymentId = [paymentId retain_stub];
  __paymentId_isset = YES;
  __type = type;
  __type_isset = YES;
  __amount = amount;
  __amount_isset = YES;
  __ipay = ipay;
  __ipay_isset = YES;
  __status = status;
  __status_isset = YES;
  __statusName = [statusName retain_stub];
  __statusName_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __modifyTime = [modifyTime retain_stub];
  __modifyTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentNo"])
  {
    __paymentNo = [[decoder decodeObjectForKey: @"paymentNo"] retain_stub];
    __paymentNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentId"])
  {
    __paymentId = [[decoder decodeObjectForKey: @"paymentId"] retain_stub];
    __paymentId_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"amount"])
  {
    __amount = [decoder decodeDoubleForKey: @"amount"];
    __amount_isset = YES;
  }
  if ([decoder containsValueForKey: @"ipay"])
  {
    __ipay = [decoder decodeIntForKey: @"ipay"];
    __ipay_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusName"])
  {
    __statusName = [[decoder decodeObjectForKey: @"statusName"] retain_stub];
    __statusName_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"modifyTime"])
  {
    __modifyTime = [[decoder decodeObjectForKey: @"modifyTime"] retain_stub];
    __modifyTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__paymentNo_isset)
  {
    [encoder encodeObject: __paymentNo forKey: @"paymentNo"];
  }
  if (__paymentId_isset)
  {
    [encoder encodeObject: __paymentId forKey: @"paymentId"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__amount_isset)
  {
    [encoder encodeDouble: __amount forKey: @"amount"];
  }
  if (__ipay_isset)
  {
    [encoder encodeInt: __ipay forKey: @"ipay"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__statusName_isset)
  {
    [encoder encodeObject: __statusName forKey: @"statusName"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__modifyTime_isset)
  {
    [encoder encodeObject: __modifyTime forKey: @"modifyTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __paymentNo_isset ? 2654435761 : 0;
  if (__paymentNo_isset)
  {
    hash = (hash * 31) ^ [__paymentNo hash];
  }
  hash = (hash * 31) ^ __paymentId_isset ? 2654435761 : 0;
  if (__paymentId_isset)
  {
    hash = (hash * 31) ^ [__paymentId hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __amount_isset ? 2654435761 : 0;
  if (__amount_isset)
  {
    hash = (hash * 31) ^ [@(__amount) hash];
  }
  hash = (hash * 31) ^ __ipay_isset ? 2654435761 : 0;
  if (__ipay_isset)
  {
    hash = (hash * 31) ^ [@(__ipay) hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __statusName_isset ? 2654435761 : 0;
  if (__statusName_isset)
  {
    hash = (hash * 31) ^ [__statusName hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __modifyTime_isset ? 2654435761 : 0;
  if (__modifyTime_isset)
  {
    hash = (hash * 31) ^ [__modifyTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Payment class]]) {
    return NO;
  }
  Payment *other = (Payment *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__paymentNo_isset != other->__paymentNo_isset) ||
      (__paymentNo_isset && ((__paymentNo || other->__paymentNo) && ![__paymentNo isEqual:other->__paymentNo]))) {
    return NO;
  }
  if ((__paymentId_isset != other->__paymentId_isset) ||
      (__paymentId_isset && ((__paymentId || other->__paymentId) && ![__paymentId isEqual:other->__paymentId]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__amount_isset != other->__amount_isset) ||
      (__amount_isset && (__amount != other->__amount))) {
    return NO;
  }
  if ((__ipay_isset != other->__ipay_isset) ||
      (__ipay_isset && (__ipay != other->__ipay))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__statusName_isset != other->__statusName_isset) ||
      (__statusName_isset && ((__statusName || other->__statusName) && ![__statusName isEqual:other->__statusName]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__modifyTime_isset != other->__modifyTime_isset) ||
      (__modifyTime_isset && ((__modifyTime || other->__modifyTime) && ![__modifyTime isEqual:other->__modifyTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__paymentNo release_stub];
  [__paymentId release_stub];
  [__statusName release_stub];
  [__remark release_stub];
  [__createTime release_stub];
  [__modifyTime release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) paymentNo {
  return [[__paymentNo retain_stub] autorelease_stub];
}

- (void) setPaymentNo: (NSString *) paymentNo {
  [paymentNo retain_stub];
  [__paymentNo release_stub];
  __paymentNo = paymentNo;
  __paymentNo_isset = YES;
}

- (BOOL) paymentNoIsSet {
  return __paymentNo_isset;
}

- (void) unsetPaymentNo {
  [__paymentNo release_stub];
  __paymentNo = nil;
  __paymentNo_isset = NO;
}

- (NSString *) paymentId {
  return [[__paymentId retain_stub] autorelease_stub];
}

- (void) setPaymentId: (NSString *) paymentId {
  [paymentId retain_stub];
  [__paymentId release_stub];
  __paymentId = paymentId;
  __paymentId_isset = YES;
}

- (BOOL) paymentIdIsSet {
  return __paymentId_isset;
}

- (void) unsetPaymentId {
  [__paymentId release_stub];
  __paymentId = nil;
  __paymentId_isset = NO;
}

- (uint8_t) type {
  return __type;
}

- (void) setType: (uint8_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (double) amount {
  return __amount;
}

- (void) setAmount: (double) amount {
  __amount = amount;
  __amount_isset = YES;
}

- (BOOL) amountIsSet {
  return __amount_isset;
}

- (void) unsetAmount {
  __amount_isset = NO;
}

- (uint8_t) ipay {
  return __ipay;
}

- (void) setIpay: (uint8_t) ipay {
  __ipay = ipay;
  __ipay_isset = YES;
}

- (BOOL) ipayIsSet {
  return __ipay_isset;
}

- (void) unsetIpay {
  __ipay_isset = NO;
}

- (uint8_t) status {
  return __status;
}

- (void) setStatus: (uint8_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) statusName {
  return [[__statusName retain_stub] autorelease_stub];
}

- (void) setStatusName: (NSString *) statusName {
  [statusName retain_stub];
  [__statusName release_stub];
  __statusName = statusName;
  __statusName_isset = YES;
}

- (BOOL) statusNameIsSet {
  return __statusName_isset;
}

- (void) unsetStatusName {
  [__statusName release_stub];
  __statusName = nil;
  __statusName_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) modifyTime {
  return [[__modifyTime retain_stub] autorelease_stub];
}

- (void) setModifyTime: (NSString *) modifyTime {
  [modifyTime retain_stub];
  [__modifyTime release_stub];
  __modifyTime = modifyTime;
  __modifyTime_isset = YES;
}

- (BOOL) modifyTimeIsSet {
  return __modifyTime_isset;
}

- (void) unsetModifyTime {
  [__modifyTime release_stub];
  __modifyTime = nil;
  __modifyTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPaymentNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPaymentId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setIpay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatusName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setModifyTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Payment"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__paymentNo_isset) {
    if (__paymentNo != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __paymentNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentId_isset) {
    if (__paymentId != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __paymentId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 5];
    [outProtocol writeByte: __type];
    [outProtocol writeFieldEnd];
  }
  if (__amount_isset) {
    [outProtocol writeFieldBeginWithName: @"amount" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __amount];
    [outProtocol writeFieldEnd];
  }
  if (__ipay_isset) {
    [outProtocol writeFieldBeginWithName: @"ipay" type: TType_BYTE fieldID: 7];
    [outProtocol writeByte: __ipay];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BYTE fieldID: 8];
    [outProtocol writeByte: __status];
    [outProtocol writeFieldEnd];
  }
  if (__statusName_isset) {
    if (__statusName != nil) {
      [outProtocol writeFieldBeginWithName: @"statusName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __statusName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modifyTime_isset) {
    if (__modifyTime != nil) {
      [outProtocol writeFieldBeginWithName: @"modifyTime" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __modifyTime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__paymentNo_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'paymentNo' is not set."];
  }
  if (!__paymentId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'paymentId' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__amount_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'amount' is not set."];
  }
  if (!__ipay_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'ipay' is not set."];
  }
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
  if (!__statusName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusName' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Payment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",paymentNo:"];
  [ms appendFormat: @"\"%@\"", __paymentNo];
  [ms appendString: @",paymentId:"];
  [ms appendFormat: @"\"%@\"", __paymentId];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",amount:"];
  [ms appendFormat: @"%f", __amount];
  [ms appendString: @",ipay:"];
  [ms appendFormat: @"%i", __ipay];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",statusName:"];
  [ms appendFormat: @"\"%@\"", __statusName];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",modifyTime:"];
  [ms appendFormat: @"\"%@\"", __modifyTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id username: (NSString *) username name: (NSString *) name avatar: (NSString *) avatar mobilePhone: (int64_t) mobilePhone storeIds: (NSString *) storeIds email: (NSString *) email emploeId: (NSString *) emploeId aclExtra: (NSString *) aclExtra areaIds: (NSString *) areaIds level: (uint8_t) level gender: (int) gender age: (NSString *) age
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __avatar = [avatar retain_stub];
  __avatar_isset = YES;
  __mobilePhone = mobilePhone;
  __mobilePhone_isset = YES;
  __storeIds = [storeIds retain_stub];
  __storeIds_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __emploeId = [emploeId retain_stub];
  __emploeId_isset = YES;
  __aclExtra = [aclExtra retain_stub];
  __aclExtra_isset = YES;
  __areaIds = [areaIds retain_stub];
  __areaIds_isset = YES;
  __level = level;
  __level_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain_stub];
    __avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobilePhone"])
  {
    __mobilePhone = [decoder decodeInt64ForKey: @"mobilePhone"];
    __mobilePhone_isset = YES;
  }
  if ([decoder containsValueForKey: @"storeIds"])
  {
    __storeIds = [[decoder decodeObjectForKey: @"storeIds"] retain_stub];
    __storeIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"emploeId"])
  {
    __emploeId = [[decoder decodeObjectForKey: @"emploeId"] retain_stub];
    __emploeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"aclExtra"])
  {
    __aclExtra = [[decoder decodeObjectForKey: @"aclExtra"] retain_stub];
    __aclExtra_isset = YES;
  }
  if ([decoder containsValueForKey: @"areaIds"])
  {
    __areaIds = [[decoder decodeObjectForKey: @"areaIds"] retain_stub];
    __areaIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [decoder decodeIntForKey: @"level"];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
  if (__mobilePhone_isset)
  {
    [encoder encodeInt64: __mobilePhone forKey: @"mobilePhone"];
  }
  if (__storeIds_isset)
  {
    [encoder encodeObject: __storeIds forKey: @"storeIds"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__emploeId_isset)
  {
    [encoder encodeObject: __emploeId forKey: @"emploeId"];
  }
  if (__aclExtra_isset)
  {
    [encoder encodeObject: __aclExtra forKey: @"aclExtra"];
  }
  if (__areaIds_isset)
  {
    [encoder encodeObject: __areaIds forKey: @"areaIds"];
  }
  if (__level_isset)
  {
    [encoder encodeInt: __level forKey: @"level"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __avatar_isset ? 2654435761 : 0;
  if (__avatar_isset)
  {
    hash = (hash * 31) ^ [__avatar hash];
  }
  hash = (hash * 31) ^ __mobilePhone_isset ? 2654435761 : 0;
  if (__mobilePhone_isset)
  {
    hash = (hash * 31) ^ [@(__mobilePhone) hash];
  }
  hash = (hash * 31) ^ __storeIds_isset ? 2654435761 : 0;
  if (__storeIds_isset)
  {
    hash = (hash * 31) ^ [__storeIds hash];
  }
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __emploeId_isset ? 2654435761 : 0;
  if (__emploeId_isset)
  {
    hash = (hash * 31) ^ [__emploeId hash];
  }
  hash = (hash * 31) ^ __aclExtra_isset ? 2654435761 : 0;
  if (__aclExtra_isset)
  {
    hash = (hash * 31) ^ [__aclExtra hash];
  }
  hash = (hash * 31) ^ __areaIds_isset ? 2654435761 : 0;
  if (__areaIds_isset)
  {
    hash = (hash * 31) ^ [__areaIds hash];
  }
  hash = (hash * 31) ^ __level_isset ? 2654435761 : 0;
  if (__level_isset)
  {
    hash = (hash * 31) ^ [@(__level) hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[User class]]) {
    return NO;
  }
  User *other = (User *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__avatar_isset != other->__avatar_isset) ||
      (__avatar_isset && ((__avatar || other->__avatar) && ![__avatar isEqual:other->__avatar]))) {
    return NO;
  }
  if ((__mobilePhone_isset != other->__mobilePhone_isset) ||
      (__mobilePhone_isset && (__mobilePhone != other->__mobilePhone))) {
    return NO;
  }
  if ((__storeIds_isset != other->__storeIds_isset) ||
      (__storeIds_isset && ((__storeIds || other->__storeIds) && ![__storeIds isEqual:other->__storeIds]))) {
    return NO;
  }
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__emploeId_isset != other->__emploeId_isset) ||
      (__emploeId_isset && ((__emploeId || other->__emploeId) && ![__emploeId isEqual:other->__emploeId]))) {
    return NO;
  }
  if ((__aclExtra_isset != other->__aclExtra_isset) ||
      (__aclExtra_isset && ((__aclExtra || other->__aclExtra) && ![__aclExtra isEqual:other->__aclExtra]))) {
    return NO;
  }
  if ((__areaIds_isset != other->__areaIds_isset) ||
      (__areaIds_isset && ((__areaIds || other->__areaIds) && ![__areaIds isEqual:other->__areaIds]))) {
    return NO;
  }
  if ((__level_isset != other->__level_isset) ||
      (__level_isset && (__level != other->__level))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__username release_stub];
  [__name release_stub];
  [__avatar release_stub];
  [__storeIds release_stub];
  [__email release_stub];
  [__emploeId release_stub];
  [__aclExtra release_stub];
  [__areaIds release_stub];
  [__age release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) avatar {
  return [[__avatar retain_stub] autorelease_stub];
}

- (void) setAvatar: (NSString *) avatar {
  [avatar retain_stub];
  [__avatar release_stub];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release_stub];
  __avatar = nil;
  __avatar_isset = NO;
}

- (int64_t) mobilePhone {
  return __mobilePhone;
}

- (void) setMobilePhone: (int64_t) mobilePhone {
  __mobilePhone = mobilePhone;
  __mobilePhone_isset = YES;
}

- (BOOL) mobilePhoneIsSet {
  return __mobilePhone_isset;
}

- (void) unsetMobilePhone {
  __mobilePhone_isset = NO;
}

- (NSString *) storeIds {
  return [[__storeIds retain_stub] autorelease_stub];
}

- (void) setStoreIds: (NSString *) storeIds {
  [storeIds retain_stub];
  [__storeIds release_stub];
  __storeIds = storeIds;
  __storeIds_isset = YES;
}

- (BOOL) storeIdsIsSet {
  return __storeIds_isset;
}

- (void) unsetStoreIds {
  [__storeIds release_stub];
  __storeIds = nil;
  __storeIds_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) emploeId {
  return [[__emploeId retain_stub] autorelease_stub];
}

- (void) setEmploeId: (NSString *) emploeId {
  [emploeId retain_stub];
  [__emploeId release_stub];
  __emploeId = emploeId;
  __emploeId_isset = YES;
}

- (BOOL) emploeIdIsSet {
  return __emploeId_isset;
}

- (void) unsetEmploeId {
  [__emploeId release_stub];
  __emploeId = nil;
  __emploeId_isset = NO;
}

- (NSString *) aclExtra {
  return [[__aclExtra retain_stub] autorelease_stub];
}

- (void) setAclExtra: (NSString *) aclExtra {
  [aclExtra retain_stub];
  [__aclExtra release_stub];
  __aclExtra = aclExtra;
  __aclExtra_isset = YES;
}

- (BOOL) aclExtraIsSet {
  return __aclExtra_isset;
}

- (void) unsetAclExtra {
  [__aclExtra release_stub];
  __aclExtra = nil;
  __aclExtra_isset = NO;
}

- (NSString *) areaIds {
  return [[__areaIds retain_stub] autorelease_stub];
}

- (void) setAreaIds: (NSString *) areaIds {
  [areaIds retain_stub];
  [__areaIds release_stub];
  __areaIds = areaIds;
  __areaIds_isset = YES;
}

- (BOOL) areaIdsIsSet {
  return __areaIds_isset;
}

- (void) unsetAreaIds {
  [__areaIds release_stub];
  __areaIds = nil;
  __areaIds_isset = NO;
}

- (uint8_t) level {
  return __level;
}

- (void) setLevel: (uint8_t) level {
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  __level_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobilePhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStoreIds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmploeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAclExtra: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAreaIds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobilePhone_isset) {
    [outProtocol writeFieldBeginWithName: @"mobilePhone" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __mobilePhone];
    [outProtocol writeFieldEnd];
  }
  if (__storeIds_isset) {
    if (__storeIds != nil) {
      [outProtocol writeFieldBeginWithName: @"storeIds" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __storeIds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__emploeId_isset) {
    if (__emploeId != nil) {
      [outProtocol writeFieldBeginWithName: @"emploeId" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __emploeId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__aclExtra_isset) {
    if (__aclExtra != nil) {
      [outProtocol writeFieldBeginWithName: @"aclExtra" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __aclExtra];
      [outProtocol writeFieldEnd];
    }
  }
  if (__areaIds_isset) {
    if (__areaIds != nil) {
      [outProtocol writeFieldBeginWithName: @"areaIds" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __areaIds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    [outProtocol writeFieldBeginWithName: @"level" type: TType_BYTE fieldID: 12];
    [outProtocol writeByte: __level];
    [outProtocol writeFieldEnd];
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__username_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'username' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @",mobilePhone:"];
  [ms appendFormat: @"%qi", __mobilePhone];
  [ms appendString: @",storeIds:"];
  [ms appendFormat: @"\"%@\"", __storeIds];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",emploeId:"];
  [ms appendFormat: @"\"%@\"", __emploeId];
  [ms appendString: @",aclExtra:"];
  [ms appendFormat: @"\"%@\"", __aclExtra];
  [ms appendString: @",areaIds:"];
  [ms appendFormat: @"\"%@\"", __areaIds];
  [ms appendString: @",level:"];
  [ms appendFormat: @"%i", __level];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseMaterialInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableDictionary *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseMaterialInfo class]]) {
    return NO;
  }
  ResponseMaterialInfo *other = (ResponseMaterialInfo *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableDictionary *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableDictionary *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size16;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size16];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            NSString * _key18 = [inProtocol readString];
            int _size20;
            [inProtocol readListBeginReturningElementType: NULL size: &_size20];
            NSMutableArray * _val19 = [[NSMutableArray alloc] initWithCapacity: _size20];
            int _i21;
            for (_i21 = 0; _i21 < _size20; ++_i21)
            {
              Material *_elem22 = [[Material alloc] init];
              [_elem22 read: inProtocol];
              [_val19 addObject: _elem22];
              [_elem22 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue setObject: _val19 forKey: _key18];
            [_val19 release_stub];
          }
          [inProtocol readMapEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseMaterialInfo"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_LIST size: [__data count]];
        NSEnumerator * _iter23 = [__data keyEnumerator];
        id key24;
        while ((key24 = [_iter23 nextObject]))
        {
          [outProtocol writeString: key24];
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__data objectForKey: key24] count]];
            int idx26;
            for (idx26 = 0; idx26 < [[__data objectForKey: key24] count]; idx26++)
            {
              [[[__data objectForKey: key24] objectAtIndex: idx26] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseMaterialInfo("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseCraftSuit

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableArray *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseCraftSuit class]]) {
    return NO;
  }
  ResponseCraftSuit *other = (ResponseCraftSuit *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size27;
          [inProtocol readListBeginReturningElementType: NULL size: &_size27];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size27];
          int _i28;
          for (_i28 = 0; _i28 < _size27; ++_i28)
          {
            CraftSuit *_elem29 = [[CraftSuit alloc] init];
            [_elem29 read: inProtocol];
            [fieldValue addObject: _elem29];
            [_elem29 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseCraftSuit"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx31;
        for (idx31 = 0; idx31 < [__data count]; idx31++)
        {
          [[__data objectAtIndex: idx31] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseCraftSuit("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseServiceItem

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableArray *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseServiceItem class]]) {
    return NO;
  }
  ResponseServiceItem *other = (ResponseServiceItem *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size32;
          [inProtocol readListBeginReturningElementType: NULL size: &_size32];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size32];
          int _i33;
          for (_i33 = 0; _i33 < _size32; ++_i33)
          {
            ServiceItem *_elem34 = [[ServiceItem alloc] init];
            [_elem34 read: inProtocol];
            [fieldValue addObject: _elem34];
            [_elem34 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseServiceItem"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx36;
        for (idx36 = 0; idx36 < [__data count]; idx36++)
        {
          [[__data objectAtIndex: idx36] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseServiceItem("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseOrderService

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableDictionary *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseOrderService class]]) {
    return NO;
  }
  ResponseOrderService *other = (ResponseOrderService *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableDictionary *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableDictionary *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size37;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size37];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size37];
          int _i38;
          for (_i38 = 0; _i38 < _size37; ++_i38)
          {
            int64_t _key39 = [inProtocol readI64];
            OrderService *_val40 = [[OrderService alloc] init];
            [_val40 read: inProtocol];
            [fieldValue setObject: _val40 forKey: [NSNumber numberWithLongLong: _key39]];
            [_val40 release_stub];
          }
          [inProtocol readMapEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseOrderService"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__data count]];
        NSEnumerator * _iter41 = [__data keyEnumerator];
        id key42;
        while ((key42 = [_iter41 nextObject]))
        {
          [outProtocol writeI64: [key42 longLongValue]];
          [[__data objectForKey: key42] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseOrderService("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseOrder

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (Order *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseOrder class]]) {
    return NO;
  }
  ResponseOrder *other = (ResponseOrder *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (Order *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (Order *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Order *fieldValue = [[Order alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseOrder"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseOrder("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseOrderList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (OrderPage *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseOrderList class]]) {
    return NO;
  }
  ResponseOrderList *other = (ResponseOrderList *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (OrderPage *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (OrderPage *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          OrderPage *fieldValue = [[OrderPage alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseOrderList"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseOrderList("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseActivities

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableDictionary *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseActivities class]]) {
    return NO;
  }
  ResponseActivities *other = (ResponseActivities *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableDictionary *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableDictionary *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size43;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size43];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size43];
          int _i44;
          for (_i44 = 0; _i44 < _size43; ++_i44)
          {
            int32_t _key45 = [inProtocol readI32];
            ActivitiesList *_val46 = [[ActivitiesList alloc] init];
            [_val46 read: inProtocol];
            [fieldValue setObject: _val46 forKey: [NSNumber numberWithLong: _key45]];
            [_val46 release_stub];
          }
          [inProtocol readMapEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseActivities"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__data count]];
        NSEnumerator * _iter47 = [__data keyEnumerator];
        id key48;
        while ((key48 = [_iter47 nextObject]))
        {
          [outProtocol writeI32: [key48 longValue]];
          [[__data objectForKey: key48] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseActivities("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseNoticeList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NoticeList *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseNoticeList class]]) {
    return NO;
  }
  ResponseNoticeList *other = (ResponseNoticeList *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NoticeList *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NoticeList *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NoticeList *fieldValue = [[NoticeList alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseNoticeList"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseNoticeList("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUid: (int32_t) uid name: (NSString *) name
{
  self = [super init];
  __uid = uid;
  __uid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt32ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uid_isset)
  {
    [encoder encodeInt32: __uid forKey: @"uid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AUser class]]) {
    return NO;
  }
  AUser *other = (AUser *)anObject;
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) uid {
  return __uid;
}

- (void) setUid: (int32_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AUser"];
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__uid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uid' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AUser("];
  [ms appendString: @"uid:"];
  [ms appendFormat: @"%i", __uid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseUserList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableArray *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseUserList class]]) {
    return NO;
  }
  ResponseUserList *other = (ResponseUserList *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size49;
          [inProtocol readListBeginReturningElementType: NULL size: &_size49];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size49];
          int _i50;
          for (_i50 = 0; _i50 < _size49; ++_i50)
          {
            AUser *_elem51 = [[AUser alloc] init];
            [_elem51 read: inProtocol];
            [fieldValue addObject: _elem51];
            [_elem51 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseUserList"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx53;
        for (idx53 = 0; idx53 < [__data count]; idx53++)
        {
          [[__data objectAtIndex: idx53] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseUserList("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponsePaymentList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (NSMutableArray *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponsePaymentList class]]) {
    return NO;
  }
  ResponsePaymentList *other = (ResponsePaymentList *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size54;
          [inProtocol readListBeginReturningElementType: NULL size: &_size54];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size54];
          int _i55;
          for (_i55 = 0; _i55 < _size54; ++_i55)
          {
            Payment *_elem56 = [[Payment alloc] init];
            [_elem56 read: inProtocol];
            [fieldValue addObject: _elem56];
            [_elem56 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponsePaymentList"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx58;
        for (idx58 = 0; idx58 < [__data count]; idx58++)
        {
          [[__data objectAtIndex: idx58] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponsePaymentList("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseUserInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode msg: (NSString *) msg data: (User *) data
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ResponseUserInfo class]]) {
    return NO;
  }
  ResponseUserInfo *other = (ResponseUserInfo *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (User *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (User *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseUserInfo"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__msg_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'msg' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseUserInfo("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation IpadPSRConstants
+ (void) initialize {
}
@end

@interface getVerificationCode_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  NSString * __mobile;

  BOOL __auth_isset;
  BOOL __mobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSString * mobile;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobile;
- (void) setMobile: (NSString *) mobile;
#endif
- (BOOL) mobileIsSet;

@end

@implementation getVerificationCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getVerificationCode_args class]]) {
    return NO;
  }
  getVerificationCode_args *other = (getVerificationCode_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__mobile release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getVerificationCode_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__mobile_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobile' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getVerificationCode_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetVerificationCode_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetVerificationCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetVerificationCode_result class]]) {
    return NO;
  }
  GetVerificationCode_result *other = (GetVerificationCode_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVerificationCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVerificationCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface login_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  NSString * __mobile;
  NSString * __verificationCode;
  NSString * __deviceToken;

  BOOL __auth_isset;
  BOOL __mobile_isset;
  BOOL __verificationCode_isset;
  BOOL __deviceToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSString * mobile;
@property (nonatomic, retain, getter=verificationCode, setter=setVerificationCode:) NSString * verificationCode;
@property (nonatomic, retain, getter=deviceToken, setter=setDeviceToken:) NSString * deviceToken;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile verificationCode: (NSString *) verificationCode deviceToken: (NSString *) deviceToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobile;
- (void) setMobile: (NSString *) mobile;
#endif
- (BOOL) mobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) verificationCode;
- (void) setVerificationCode: (NSString *) verificationCode;
#endif
- (BOOL) verificationCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceToken;
- (void) setDeviceToken: (NSString *) deviceToken;
#endif
- (BOOL) deviceTokenIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile verificationCode: (NSString *) verificationCode deviceToken: (NSString *) deviceToken
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __verificationCode = [verificationCode retain_stub];
  __verificationCode_isset = YES;
  __deviceToken = [deviceToken retain_stub];
  __deviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"verificationCode"])
  {
    __verificationCode = [[decoder decodeObjectForKey: @"verificationCode"] retain_stub];
    __verificationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceToken"])
  {
    __deviceToken = [[decoder decodeObjectForKey: @"deviceToken"] retain_stub];
    __deviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__verificationCode_isset)
  {
    [encoder encodeObject: __verificationCode forKey: @"verificationCode"];
  }
  if (__deviceToken_isset)
  {
    [encoder encodeObject: __deviceToken forKey: @"deviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  hash = (hash * 31) ^ __verificationCode_isset ? 2654435761 : 0;
  if (__verificationCode_isset)
  {
    hash = (hash * 31) ^ [__verificationCode hash];
  }
  hash = (hash * 31) ^ __deviceToken_isset ? 2654435761 : 0;
  if (__deviceToken_isset)
  {
    hash = (hash * 31) ^ [__deviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[login_args class]]) {
    return NO;
  }
  login_args *other = (login_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  if ((__verificationCode_isset != other->__verificationCode_isset) ||
      (__verificationCode_isset && ((__verificationCode || other->__verificationCode) && ![__verificationCode isEqual:other->__verificationCode]))) {
    return NO;
  }
  if ((__deviceToken_isset != other->__deviceToken_isset) ||
      (__deviceToken_isset && ((__deviceToken || other->__deviceToken) && ![__deviceToken isEqual:other->__deviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__mobile release_stub];
  [__verificationCode release_stub];
  [__deviceToken release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSString *) verificationCode {
  return [[__verificationCode retain_stub] autorelease_stub];
}

- (void) setVerificationCode: (NSString *) verificationCode {
  [verificationCode retain_stub];
  [__verificationCode release_stub];
  __verificationCode = verificationCode;
  __verificationCode_isset = YES;
}

- (BOOL) verificationCodeIsSet {
  return __verificationCode_isset;
}

- (void) unsetVerificationCode {
  [__verificationCode release_stub];
  __verificationCode = nil;
  __verificationCode_isset = NO;
}

- (NSString *) deviceToken {
  return [[__deviceToken retain_stub] autorelease_stub];
}

- (void) setDeviceToken: (NSString *) deviceToken {
  [deviceToken retain_stub];
  [__deviceToken release_stub];
  __deviceToken = deviceToken;
  __deviceToken_isset = YES;
}

- (BOOL) deviceTokenIsSet {
  return __deviceToken_isset;
}

- (void) unsetDeviceToken {
  [__deviceToken release_stub];
  __deviceToken = nil;
  __deviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVerificationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__verificationCode_isset) {
    if (__verificationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"verificationCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __verificationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceToken_isset) {
    if (__deviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __deviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__mobile_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobile' is not set."];
  }
  if (!__verificationCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'verificationCode' is not set."];
  }
  if (!__deviceToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'deviceToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @",verificationCode:"];
  [ms appendFormat: @"\"%@\"", __verificationCode];
  [ms appendString: @",deviceToken:"];
  [ms appendFormat: @"\"%@\"", __deviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  ResponseAuth * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseAuth * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseAuth *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseAuth *) success;
- (void) setSuccess: (ResponseAuth *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseAuth *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Login_result class]]) {
    return NO;
  }
  Login_result *other = (Login_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseAuth *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseAuth *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseAuth *fieldValue = [[ResponseAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  NSString * __mobile;

  BOOL __auth_isset;
  BOOL __mobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSString * mobile;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobile;
- (void) setMobile: (NSString *) mobile;
#endif
- (BOOL) mobileIsSet;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth mobile: (NSString *) mobile
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[logout_args class]]) {
    return NO;
  }
  logout_args *other = (logout_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__mobile release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__mobile_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobile' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation Logout_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Logout_result class]]) {
    return NO;
  }
  Logout_result *other = (Logout_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getOrderList_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  uint8_t __type;
  int32_t __page;
  int32_t __size;
  NSString * __searchKey;

  BOOL __auth_isset;
  BOOL __type_isset;
  BOOL __page_isset;
  BOOL __size_isset;
  BOOL __searchKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=type, setter=setType:) uint8_t type;
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=size, setter=setSize:) int32_t size;
@property (nonatomic, retain, getter=searchKey, setter=setSearchKey:) NSString * searchKey;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth type: (uint8_t) type page: (int32_t) page size: (int32_t) size searchKey: (NSString *) searchKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) type;
- (void) setType: (uint8_t) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) size;
- (void) setSize: (int32_t) size;
#endif
- (BOOL) sizeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) searchKey;
- (void) setSearchKey: (NSString *) searchKey;
#endif
- (BOOL) searchKeyIsSet;

@end

@implementation getOrderList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth type: (uint8_t) type page: (int32_t) page size: (int32_t) size searchKey: (NSString *) searchKey
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __type = type;
  __type_isset = YES;
  __page = page;
  __page_isset = YES;
  __size = size;
  __size_isset = YES;
  __searchKey = [searchKey retain_stub];
  __searchKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt32ForKey: @"size"];
    __size_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchKey"])
  {
    __searchKey = [[decoder decodeObjectForKey: @"searchKey"] retain_stub];
    __searchKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__size_isset)
  {
    [encoder encodeInt32: __size forKey: @"size"];
  }
  if (__searchKey_isset)
  {
    [encoder encodeObject: __searchKey forKey: @"searchKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [@(__page) hash];
  }
  hash = (hash * 31) ^ __size_isset ? 2654435761 : 0;
  if (__size_isset)
  {
    hash = (hash * 31) ^ [@(__size) hash];
  }
  hash = (hash * 31) ^ __searchKey_isset ? 2654435761 : 0;
  if (__searchKey_isset)
  {
    hash = (hash * 31) ^ [__searchKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getOrderList_args class]]) {
    return NO;
  }
  getOrderList_args *other = (getOrderList_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && (__page != other->__page))) {
    return NO;
  }
  if ((__size_isset != other->__size_isset) ||
      (__size_isset && (__size != other->__size))) {
    return NO;
  }
  if ((__searchKey_isset != other->__searchKey_isset) ||
      (__searchKey_isset && ((__searchKey || other->__searchKey) && ![__searchKey isEqual:other->__searchKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__searchKey release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (uint8_t) type {
  return __type;
}

- (void) setType: (uint8_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) size {
  return __size;
}

- (void) setSize: (int32_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (NSString *) searchKey {
  return [[__searchKey retain_stub] autorelease_stub];
}

- (void) setSearchKey: (NSString *) searchKey {
  [searchKey retain_stub];
  [__searchKey release_stub];
  __searchKey = searchKey;
  __searchKey_isset = YES;
}

- (BOOL) searchKeyIsSet {
  return __searchKey_isset;
}

- (void) unsetSearchKey {
  [__searchKey release_stub];
  __searchKey = nil;
  __searchKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getOrderList_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: __type];
    [outProtocol writeFieldEnd];
  }
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __size];
    [outProtocol writeFieldEnd];
  }
  if (__searchKey_isset) {
    if (__searchKey != nil) {
      [outProtocol writeFieldBeginWithName: @"searchKey" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __searchKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__page_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'page' is not set."];
  }
  if (!__size_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'size' is not set."];
  }
  if (!__searchKey_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'searchKey' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getOrderList_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%i", __size];
  [ms appendString: @",searchKey:"];
  [ms appendFormat: @"\"%@\"", __searchKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetOrderList_result : NSObject <TBase, NSCoding> {
  ResponseOrderList * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseOrderList * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseOrderList *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseOrderList *) success;
- (void) setSuccess: (ResponseOrderList *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetOrderList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseOrderList *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetOrderList_result class]]) {
    return NO;
  }
  GetOrderList_result *other = (GetOrderList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseOrderList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseOrderList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseOrderList *fieldValue = [[ResponseOrderList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetOrderList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetOrderList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getOrderInfoByOrderId_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation getOrderInfoByOrderId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getOrderInfoByOrderId_args class]]) {
    return NO;
  }
  getOrderInfoByOrderId_args *other = (getOrderInfoByOrderId_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getOrderInfoByOrderId_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getOrderInfoByOrderId_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetOrderInfoByOrderId_result : NSObject <TBase, NSCoding> {
  ResponseOrder * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseOrder * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseOrder *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseOrder *) success;
- (void) setSuccess: (ResponseOrder *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetOrderInfoByOrderId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseOrder *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetOrderInfoByOrderId_result class]]) {
    return NO;
  }
  GetOrderInfoByOrderId_result *other = (GetOrderInfoByOrderId_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseOrder *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseOrder *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseOrder *fieldValue = [[ResponseOrder alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetOrderInfoByOrderId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetOrderInfoByOrderId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getOrderMeasureByOrderId_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation getOrderMeasureByOrderId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getOrderMeasureByOrderId_args class]]) {
    return NO;
  }
  getOrderMeasureByOrderId_args *other = (getOrderMeasureByOrderId_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getOrderMeasureByOrderId_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getOrderMeasureByOrderId_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetOrderMeasureByOrderId_result : NSObject <TBase, NSCoding> {
  ResponseOrderService * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseOrderService * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseOrderService *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseOrderService *) success;
- (void) setSuccess: (ResponseOrderService *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetOrderMeasureByOrderId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseOrderService *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetOrderMeasureByOrderId_result class]]) {
    return NO;
  }
  GetOrderMeasureByOrderId_result *other = (GetOrderMeasureByOrderId_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseOrderService *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseOrderService *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseOrderService *fieldValue = [[ResponseOrderService alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetOrderMeasureByOrderId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetOrderMeasureByOrderId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setOrderDoorTime_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __doorTime;
  NSString * __remark;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __doorTime_isset;
  BOOL __remark_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=doorTime, setter=setDoorTime:) NSString * doorTime;
@property (nonatomic, retain, getter=remark, setter=setRemark:) NSString * remark;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId doorTime: (NSString *) doorTime remark: (NSString *) remark;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) doorTime;
- (void) setDoorTime: (NSString *) doorTime;
#endif
- (BOOL) doorTimeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) remark;
- (void) setRemark: (NSString *) remark;
#endif
- (BOOL) remarkIsSet;

@end

@implementation setOrderDoorTime_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId doorTime: (NSString *) doorTime remark: (NSString *) remark
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __doorTime = [doorTime retain_stub];
  __doorTime_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"doorTime"])
  {
    __doorTime = [[decoder decodeObjectForKey: @"doorTime"] retain_stub];
    __doorTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__doorTime_isset)
  {
    [encoder encodeObject: __doorTime forKey: @"doorTime"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __doorTime_isset ? 2654435761 : 0;
  if (__doorTime_isset)
  {
    hash = (hash * 31) ^ [__doorTime hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[setOrderDoorTime_args class]]) {
    return NO;
  }
  setOrderDoorTime_args *other = (setOrderDoorTime_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__doorTime_isset != other->__doorTime_isset) ||
      (__doorTime_isset && ((__doorTime || other->__doorTime) && ![__doorTime isEqual:other->__doorTime]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__doorTime release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) doorTime {
  return [[__doorTime retain_stub] autorelease_stub];
}

- (void) setDoorTime: (NSString *) doorTime {
  [doorTime retain_stub];
  [__doorTime release_stub];
  __doorTime = doorTime;
  __doorTime_isset = YES;
}

- (BOOL) doorTimeIsSet {
  return __doorTime_isset;
}

- (void) unsetDoorTime {
  [__doorTime release_stub];
  __doorTime = nil;
  __doorTime_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoorTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setOrderDoorTime_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__doorTime_isset) {
    if (__doorTime != nil) {
      [outProtocol writeFieldBeginWithName: @"doorTime" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __doorTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__doorTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'doorTime' is not set."];
  }
  if (!__remark_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'remark' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setOrderDoorTime_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",doorTime:"];
  [ms appendFormat: @"\"%@\"", __doorTime];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetOrderDoorTime_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation SetOrderDoorTime_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetOrderDoorTime_result class]]) {
    return NO;
  }
  SetOrderDoorTime_result *other = (SetOrderDoorTime_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetOrderDoorTime_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetOrderDoorTime_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface psrStopOrder_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __pauseReasonMemo;
  NSString * __remark;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __pauseReasonMemo_isset;
  BOOL __remark_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=pauseReasonMemo, setter=setPauseReasonMemo:) NSString * pauseReasonMemo;
@property (nonatomic, retain, getter=remark, setter=setRemark:) NSString * remark;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId pauseReasonMemo: (NSString *) pauseReasonMemo remark: (NSString *) remark;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pauseReasonMemo;
- (void) setPauseReasonMemo: (NSString *) pauseReasonMemo;
#endif
- (BOOL) pauseReasonMemoIsSet;

#if !__has_feature(objc_arc)
- (NSString *) remark;
- (void) setRemark: (NSString *) remark;
#endif
- (BOOL) remarkIsSet;

@end

@implementation psrStopOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId pauseReasonMemo: (NSString *) pauseReasonMemo remark: (NSString *) remark
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __pauseReasonMemo = [pauseReasonMemo retain_stub];
  __pauseReasonMemo_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pauseReasonMemo"])
  {
    __pauseReasonMemo = [[decoder decodeObjectForKey: @"pauseReasonMemo"] retain_stub];
    __pauseReasonMemo_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__pauseReasonMemo_isset)
  {
    [encoder encodeObject: __pauseReasonMemo forKey: @"pauseReasonMemo"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __pauseReasonMemo_isset ? 2654435761 : 0;
  if (__pauseReasonMemo_isset)
  {
    hash = (hash * 31) ^ [__pauseReasonMemo hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[psrStopOrder_args class]]) {
    return NO;
  }
  psrStopOrder_args *other = (psrStopOrder_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__pauseReasonMemo_isset != other->__pauseReasonMemo_isset) ||
      (__pauseReasonMemo_isset && ((__pauseReasonMemo || other->__pauseReasonMemo) && ![__pauseReasonMemo isEqual:other->__pauseReasonMemo]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__pauseReasonMemo release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) pauseReasonMemo {
  return [[__pauseReasonMemo retain_stub] autorelease_stub];
}

- (void) setPauseReasonMemo: (NSString *) pauseReasonMemo {
  [pauseReasonMemo retain_stub];
  [__pauseReasonMemo release_stub];
  __pauseReasonMemo = pauseReasonMemo;
  __pauseReasonMemo_isset = YES;
}

- (BOOL) pauseReasonMemoIsSet {
  return __pauseReasonMemo_isset;
}

- (void) unsetPauseReasonMemo {
  [__pauseReasonMemo release_stub];
  __pauseReasonMemo = nil;
  __pauseReasonMemo_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPauseReasonMemo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"psrStopOrder_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__pauseReasonMemo_isset) {
    if (__pauseReasonMemo != nil) {
      [outProtocol writeFieldBeginWithName: @"pauseReasonMemo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pauseReasonMemo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__pauseReasonMemo_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pauseReasonMemo' is not set."];
  }
  if (!__remark_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'remark' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"psrStopOrder_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",pauseReasonMemo:"];
  [ms appendFormat: @"\"%@\"", __pauseReasonMemo];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PsrStopOrder_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation PsrStopOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[PsrStopOrder_result class]]) {
    return NO;
  }
  PsrStopOrder_result *other = (PsrStopOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PsrStopOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PsrStopOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getForeman_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __startTime;
  NSString * __endTime;
  double __longitude;
  double __latitude;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __startTime_isset;
  BOOL __endTime_isset;
  BOOL __longitude_isset;
  BOOL __latitude_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=startTime, setter=setStartTime:) NSString * startTime;
@property (nonatomic, retain, getter=endTime, setter=setEndTime:) NSString * endTime;
@property (nonatomic, getter=longitude, setter=setLongitude:) double longitude;
@property (nonatomic, getter=latitude, setter=setLatitude:) double latitude;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime longitude: (double) longitude latitude: (double) latitude;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) startTime;
- (void) setStartTime: (NSString *) startTime;
#endif
- (BOOL) startTimeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) endTime;
- (void) setEndTime: (NSString *) endTime;
#endif
- (BOOL) endTimeIsSet;

#if !__has_feature(objc_arc)
- (double) longitude;
- (void) setLongitude: (double) longitude;
#endif
- (BOOL) longitudeIsSet;

#if !__has_feature(objc_arc)
- (double) latitude;
- (void) setLatitude: (double) latitude;
#endif
- (BOOL) latitudeIsSet;

@end

@implementation getForeman_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime longitude: (double) longitude latitude: (double) latitude
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __startTime = [startTime retain_stub];
  __startTime_isset = YES;
  __endTime = [endTime retain_stub];
  __endTime_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [[decoder decodeObjectForKey: @"startTime"] retain_stub];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [[decoder decodeObjectForKey: @"endTime"] retain_stub];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__startTime_isset)
  {
    [encoder encodeObject: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeObject: __endTime forKey: @"endTime"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __startTime_isset ? 2654435761 : 0;
  if (__startTime_isset)
  {
    hash = (hash * 31) ^ [__startTime hash];
  }
  hash = (hash * 31) ^ __endTime_isset ? 2654435761 : 0;
  if (__endTime_isset)
  {
    hash = (hash * 31) ^ [__endTime hash];
  }
  hash = (hash * 31) ^ __longitude_isset ? 2654435761 : 0;
  if (__longitude_isset)
  {
    hash = (hash * 31) ^ [@(__longitude) hash];
  }
  hash = (hash * 31) ^ __latitude_isset ? 2654435761 : 0;
  if (__latitude_isset)
  {
    hash = (hash * 31) ^ [@(__latitude) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getForeman_args class]]) {
    return NO;
  }
  getForeman_args *other = (getForeman_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__startTime_isset != other->__startTime_isset) ||
      (__startTime_isset && ((__startTime || other->__startTime) && ![__startTime isEqual:other->__startTime]))) {
    return NO;
  }
  if ((__endTime_isset != other->__endTime_isset) ||
      (__endTime_isset && ((__endTime || other->__endTime) && ![__endTime isEqual:other->__endTime]))) {
    return NO;
  }
  if ((__longitude_isset != other->__longitude_isset) ||
      (__longitude_isset && (__longitude != other->__longitude))) {
    return NO;
  }
  if ((__latitude_isset != other->__latitude_isset) ||
      (__latitude_isset && (__latitude != other->__latitude))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__startTime release_stub];
  [__endTime release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) startTime {
  return [[__startTime retain_stub] autorelease_stub];
}

- (void) setStartTime: (NSString *) startTime {
  [startTime retain_stub];
  [__startTime release_stub];
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  [__startTime release_stub];
  __startTime = nil;
  __startTime_isset = NO;
}

- (NSString *) endTime {
  return [[__endTime retain_stub] autorelease_stub];
}

- (void) setEndTime: (NSString *) endTime {
  [endTime retain_stub];
  [__endTime release_stub];
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  [__endTime release_stub];
  __endTime = nil;
  __endTime_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getForeman_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__startTime_isset) {
    if (__startTime != nil) {
      [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __startTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endTime_isset) {
    if (__endTime != nil) {
      [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __endTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__startTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'startTime' is not set."];
  }
  if (!__endTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'endTime' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getForeman_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"\"%@\"", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"\"%@\"", __endTime];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetForeman_result : NSObject <TBase, NSCoding> {
  ResponseUserList * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseUserList * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseUserList *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseUserList *) success;
- (void) setSuccess: (ResponseUserList *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetForeman_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseUserList *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetForeman_result class]]) {
    return NO;
  }
  GetForeman_result *other = (GetForeman_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseUserList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseUserList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseUserList *fieldValue = [[ResponseUserList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetForeman_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetForeman_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setForeman_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __startTime;
  NSString * __endTime;
  int32_t __uid;
  NSString * __remark;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __startTime_isset;
  BOOL __endTime_isset;
  BOOL __uid_isset;
  BOOL __remark_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=startTime, setter=setStartTime:) NSString * startTime;
@property (nonatomic, retain, getter=endTime, setter=setEndTime:) NSString * endTime;
@property (nonatomic, getter=uid, setter=setUid:) int32_t uid;
@property (nonatomic, retain, getter=remark, setter=setRemark:) NSString * remark;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime uid: (int32_t) uid remark: (NSString *) remark;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) startTime;
- (void) setStartTime: (NSString *) startTime;
#endif
- (BOOL) startTimeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) endTime;
- (void) setEndTime: (NSString *) endTime;
#endif
- (BOOL) endTimeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) uid;
- (void) setUid: (int32_t) uid;
#endif
- (BOOL) uidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) remark;
- (void) setRemark: (NSString *) remark;
#endif
- (BOOL) remarkIsSet;

@end

@implementation setForeman_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime uid: (int32_t) uid remark: (NSString *) remark
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __startTime = [startTime retain_stub];
  __startTime_isset = YES;
  __endTime = [endTime retain_stub];
  __endTime_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [[decoder decodeObjectForKey: @"startTime"] retain_stub];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [[decoder decodeObjectForKey: @"endTime"] retain_stub];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt32ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__startTime_isset)
  {
    [encoder encodeObject: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeObject: __endTime forKey: @"endTime"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt32: __uid forKey: @"uid"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __startTime_isset ? 2654435761 : 0;
  if (__startTime_isset)
  {
    hash = (hash * 31) ^ [__startTime hash];
  }
  hash = (hash * 31) ^ __endTime_isset ? 2654435761 : 0;
  if (__endTime_isset)
  {
    hash = (hash * 31) ^ [__endTime hash];
  }
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[setForeman_args class]]) {
    return NO;
  }
  setForeman_args *other = (setForeman_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__startTime_isset != other->__startTime_isset) ||
      (__startTime_isset && ((__startTime || other->__startTime) && ![__startTime isEqual:other->__startTime]))) {
    return NO;
  }
  if ((__endTime_isset != other->__endTime_isset) ||
      (__endTime_isset && ((__endTime || other->__endTime) && ![__endTime isEqual:other->__endTime]))) {
    return NO;
  }
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__startTime release_stub];
  [__endTime release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) startTime {
  return [[__startTime retain_stub] autorelease_stub];
}

- (void) setStartTime: (NSString *) startTime {
  [startTime retain_stub];
  [__startTime release_stub];
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  [__startTime release_stub];
  __startTime = nil;
  __startTime_isset = NO;
}

- (NSString *) endTime {
  return [[__endTime retain_stub] autorelease_stub];
}

- (void) setEndTime: (NSString *) endTime {
  [endTime retain_stub];
  [__endTime release_stub];
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  [__endTime release_stub];
  __endTime = nil;
  __endTime_isset = NO;
}

- (int32_t) uid {
  return __uid;
}

- (void) setUid: (int32_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setForeman_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__startTime_isset) {
    if (__startTime != nil) {
      [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __startTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endTime_isset) {
    if (__endTime != nil) {
      [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __endTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__startTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'startTime' is not set."];
  }
  if (!__endTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'endTime' is not set."];
  }
  if (!__uid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uid' is not set."];
  }
  if (!__remark_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'remark' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setForeman_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"\"%@\"", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"\"%@\"", __endTime];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%i", __uid];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetForeman_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation SetForeman_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetForeman_result class]]) {
    return NO;
  }
  SetForeman_result *other = (SetForeman_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetForeman_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetForeman_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uploadOrderPhoto_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  uint8_t __type;
  NSData * __photo;
  NSString * __ext;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __type_isset;
  BOOL __photo_isset;
  BOOL __ext_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, getter=type, setter=setType:) uint8_t type;
@property (nonatomic, retain, getter=photo, setter=setPhoto:) NSData * photo;
@property (nonatomic, retain, getter=ext, setter=setExt:) NSString * ext;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type photo: (NSData *) photo ext: (NSString *) ext;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) type;
- (void) setType: (uint8_t) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (NSData *) photo;
- (void) setPhoto: (NSData *) photo;
#endif
- (BOOL) photoIsSet;

#if !__has_feature(objc_arc)
- (NSString *) ext;
- (void) setExt: (NSString *) ext;
#endif
- (BOOL) extIsSet;

@end

@implementation uploadOrderPhoto_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type photo: (NSData *) photo ext: (NSString *) ext
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __type = type;
  __type_isset = YES;
  __photo = [photo retain_stub];
  __photo_isset = YES;
  __ext = [ext retain_stub];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo"])
  {
    __photo = [[decoder decodeObjectForKey: @"photo"] retain_stub];
    __photo_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain_stub];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__photo_isset)
  {
    [encoder encodeObject: __photo forKey: @"photo"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __photo_isset ? 2654435761 : 0;
  if (__photo_isset)
  {
    hash = (hash * 31) ^ [__photo hash];
  }
  hash = (hash * 31) ^ __ext_isset ? 2654435761 : 0;
  if (__ext_isset)
  {
    hash = (hash * 31) ^ [__ext hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[uploadOrderPhoto_args class]]) {
    return NO;
  }
  uploadOrderPhoto_args *other = (uploadOrderPhoto_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__photo_isset != other->__photo_isset) ||
      (__photo_isset && ((__photo || other->__photo) && ![__photo isEqual:other->__photo]))) {
    return NO;
  }
  if ((__ext_isset != other->__ext_isset) ||
      (__ext_isset && ((__ext || other->__ext) && ![__ext isEqual:other->__ext]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__photo release_stub];
  [__ext release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (uint8_t) type {
  return __type;
}

- (void) setType: (uint8_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSData *) photo {
  return [[__photo retain_stub] autorelease_stub];
}

- (void) setPhoto: (NSData *) photo {
  [photo retain_stub];
  [__photo release_stub];
  __photo = photo;
  __photo_isset = YES;
}

- (BOOL) photoIsSet {
  return __photo_isset;
}

- (void) unsetPhoto {
  [__photo release_stub];
  __photo = nil;
  __photo_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain_stub] autorelease_stub];
}

- (void) setExt: (NSString *) ext {
  [ext retain_stub];
  [__ext release_stub];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release_stub];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPhoto: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uploadOrderPhoto_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: __type];
    [outProtocol writeFieldEnd];
  }
  if (__photo_isset) {
    if (__photo != nil) {
      [outProtocol writeFieldBeginWithName: @"photo" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __photo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__photo_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'photo' is not set."];
  }
  if (!__ext_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'ext' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uploadOrderPhoto_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",photo:"];
  [ms appendFormat: @"\"%@\"", __photo];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UploadOrderPhoto_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation UploadOrderPhoto_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UploadOrderPhoto_result class]]) {
    return NO;
  }
  UploadOrderPhoto_result *other = (UploadOrderPhoto_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadOrderPhoto_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadOrderPhoto_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deleteOrderPhoto_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  uint8_t __type;
  NSMutableArray * __filename;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __type_isset;
  BOOL __filename_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, getter=type, setter=setType:) uint8_t type;
@property (nonatomic, retain, getter=filename, setter=setFilename:) NSMutableArray * filename;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type filename: (NSMutableArray *) filename;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) type;
- (void) setType: (uint8_t) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) filename;
- (void) setFilename: (NSMutableArray *) filename;
#endif
- (BOOL) filenameIsSet;

@end

@implementation deleteOrderPhoto_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type filename: (NSMutableArray *) filename
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __type = type;
  __type_isset = YES;
  __filename = [filename retain_stub];
  __filename_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"filename"])
  {
    __filename = [[decoder decodeObjectForKey: @"filename"] retain_stub];
    __filename_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__filename_isset)
  {
    [encoder encodeObject: __filename forKey: @"filename"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __filename_isset ? 2654435761 : 0;
  if (__filename_isset)
  {
    hash = (hash * 31) ^ [__filename hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[deleteOrderPhoto_args class]]) {
    return NO;
  }
  deleteOrderPhoto_args *other = (deleteOrderPhoto_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__filename_isset != other->__filename_isset) ||
      (__filename_isset && ((__filename || other->__filename) && ![__filename isEqual:other->__filename]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__filename release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (uint8_t) type {
  return __type;
}

- (void) setType: (uint8_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSMutableArray *) filename {
  return [[__filename retain_stub] autorelease_stub];
}

- (void) setFilename: (NSMutableArray *) filename {
  [filename retain_stub];
  [__filename release_stub];
  __filename = filename;
  __filename_isset = YES;
}

- (BOOL) filenameIsSet {
  return __filename_isset;
}

- (void) unsetFilename {
  [__filename release_stub];
  __filename = nil;
  __filename_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size59;
          [inProtocol readListBeginReturningElementType: NULL size: &_size59];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size59];
          int _i60;
          for (_i60 = 0; _i60 < _size59; ++_i60)
          {
            NSString * _elem61 = [inProtocol readString];
            [fieldValue addObject: _elem61];
          }
          [inProtocol readListEnd];
          [self setFilename: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deleteOrderPhoto_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: __type];
    [outProtocol writeFieldEnd];
  }
  if (__filename_isset) {
    if (__filename != nil) {
      [outProtocol writeFieldBeginWithName: @"filename" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__filename count]];
        int idx63;
        for (idx63 = 0; idx63 < [__filename count]; idx63++)
        {
          [outProtocol writeString: [__filename objectAtIndex: idx63]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__filename_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'filename' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deleteOrderPhoto_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",filename:"];
  [ms appendFormat: @"%@", __filename];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteOrderPhoto_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation DeleteOrderPhoto_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteOrderPhoto_result class]]) {
    return NO;
  }
  DeleteOrderPhoto_result *other = (DeleteOrderPhoto_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteOrderPhoto_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteOrderPhoto_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface finishOrder_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation finishOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[finishOrder_args class]]) {
    return NO;
  }
  finishOrder_args *other = (finishOrder_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"finishOrder_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"finishOrder_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FinishOrder_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation FinishOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FinishOrder_result class]]) {
    return NO;
  }
  FinishOrder_result *other = (FinishOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FinishOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FinishOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface bindCamera_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __cameraCode;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __cameraCode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=cameraCode, setter=setCameraCode:) NSString * cameraCode;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId cameraCode: (NSString *) cameraCode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) cameraCode;
- (void) setCameraCode: (NSString *) cameraCode;
#endif
- (BOOL) cameraCodeIsSet;

@end

@implementation bindCamera_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId cameraCode: (NSString *) cameraCode
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __cameraCode = [cameraCode retain_stub];
  __cameraCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cameraCode"])
  {
    __cameraCode = [[decoder decodeObjectForKey: @"cameraCode"] retain_stub];
    __cameraCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__cameraCode_isset)
  {
    [encoder encodeObject: __cameraCode forKey: @"cameraCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __cameraCode_isset ? 2654435761 : 0;
  if (__cameraCode_isset)
  {
    hash = (hash * 31) ^ [__cameraCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[bindCamera_args class]]) {
    return NO;
  }
  bindCamera_args *other = (bindCamera_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__cameraCode_isset != other->__cameraCode_isset) ||
      (__cameraCode_isset && ((__cameraCode || other->__cameraCode) && ![__cameraCode isEqual:other->__cameraCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__cameraCode release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) cameraCode {
  return [[__cameraCode retain_stub] autorelease_stub];
}

- (void) setCameraCode: (NSString *) cameraCode {
  [cameraCode retain_stub];
  [__cameraCode release_stub];
  __cameraCode = cameraCode;
  __cameraCode_isset = YES;
}

- (BOOL) cameraCodeIsSet {
  return __cameraCode_isset;
}

- (void) unsetCameraCode {
  [__cameraCode release_stub];
  __cameraCode = nil;
  __cameraCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCameraCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"bindCamera_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__cameraCode_isset) {
    if (__cameraCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cameraCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cameraCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__cameraCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'cameraCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"bindCamera_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",cameraCode:"];
  [ms appendFormat: @"\"%@\"", __cameraCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BindCamera_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation BindCamera_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BindCamera_result class]]) {
    return NO;
  }
  BindCamera_result *other = (BindCamera_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindCamera_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BindCamera_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCameraUrl_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation getCameraUrl_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getCameraUrl_args class]]) {
    return NO;
  }
  getCameraUrl_args *other = (getCameraUrl_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCameraUrl_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCameraUrl_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCameraUrl_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetCameraUrl_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetCameraUrl_result class]]) {
    return NO;
  }
  GetCameraUrl_result *other = (GetCameraUrl_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCameraUrl_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCameraUrl_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getNoticeList_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int32_t __page;
  int32_t __pageNumber;

  BOOL __auth_isset;
  BOOL __page_isset;
  BOOL __pageNumber_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=pageNumber, setter=setPageNumber:) int32_t pageNumber;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth page: (int32_t) page pageNumber: (int32_t) pageNumber;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageNumber;
- (void) setPageNumber: (int32_t) pageNumber;
#endif
- (BOOL) pageNumberIsSet;

@end

@implementation getNoticeList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth page: (int32_t) page pageNumber: (int32_t) pageNumber
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __page = page;
  __page_isset = YES;
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageNumber"])
  {
    __pageNumber = [decoder decodeInt32ForKey: @"pageNumber"];
    __pageNumber_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__pageNumber_isset)
  {
    [encoder encodeInt32: __pageNumber forKey: @"pageNumber"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [@(__page) hash];
  }
  hash = (hash * 31) ^ __pageNumber_isset ? 2654435761 : 0;
  if (__pageNumber_isset)
  {
    hash = (hash * 31) ^ [@(__pageNumber) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getNoticeList_args class]]) {
    return NO;
  }
  getNoticeList_args *other = (getNoticeList_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && (__page != other->__page))) {
    return NO;
  }
  if ((__pageNumber_isset != other->__pageNumber_isset) ||
      (__pageNumber_isset && (__pageNumber != other->__pageNumber))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) pageNumber {
  return __pageNumber;
}

- (void) setPageNumber: (int32_t) pageNumber {
  __pageNumber = pageNumber;
  __pageNumber_isset = YES;
}

- (BOOL) pageNumberIsSet {
  return __pageNumber_isset;
}

- (void) unsetPageNumber {
  __pageNumber_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getNoticeList_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__pageNumber_isset) {
    [outProtocol writeFieldBeginWithName: @"pageNumber" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageNumber];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__page_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'page' is not set."];
  }
  if (!__pageNumber_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pageNumber' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getNoticeList_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",pageNumber:"];
  [ms appendFormat: @"%i", __pageNumber];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetNoticeList_result : NSObject <TBase, NSCoding> {
  ResponseNoticeList * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseNoticeList * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseNoticeList *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseNoticeList *) success;
- (void) setSuccess: (ResponseNoticeList *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetNoticeList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseNoticeList *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetNoticeList_result class]]) {
    return NO;
  }
  GetNoticeList_result *other = (GetNoticeList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseNoticeList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseNoticeList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseNoticeList *fieldValue = [[ResponseNoticeList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNoticeList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNoticeList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setNoticeHaveRead_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __noticeId;

  BOOL __auth_isset;
  BOOL __noticeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=noticeId, setter=setNoticeId:) int64_t noticeId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth noticeId: (int64_t) noticeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) noticeId;
- (void) setNoticeId: (int64_t) noticeId;
#endif
- (BOOL) noticeIdIsSet;

@end

@implementation setNoticeHaveRead_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth noticeId: (int64_t) noticeId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __noticeId = noticeId;
  __noticeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"noticeId"])
  {
    __noticeId = [decoder decodeInt64ForKey: @"noticeId"];
    __noticeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__noticeId_isset)
  {
    [encoder encodeInt64: __noticeId forKey: @"noticeId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __noticeId_isset ? 2654435761 : 0;
  if (__noticeId_isset)
  {
    hash = (hash * 31) ^ [@(__noticeId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[setNoticeHaveRead_args class]]) {
    return NO;
  }
  setNoticeHaveRead_args *other = (setNoticeHaveRead_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__noticeId_isset != other->__noticeId_isset) ||
      (__noticeId_isset && (__noticeId != other->__noticeId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) noticeId {
  return __noticeId;
}

- (void) setNoticeId: (int64_t) noticeId {
  __noticeId = noticeId;
  __noticeId_isset = YES;
}

- (BOOL) noticeIdIsSet {
  return __noticeId_isset;
}

- (void) unsetNoticeId {
  __noticeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNoticeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setNoticeHaveRead_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__noticeId_isset) {
    [outProtocol writeFieldBeginWithName: @"noticeId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __noticeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__noticeId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'noticeId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setNoticeHaveRead_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",noticeId:"];
  [ms appendFormat: @"%qi", __noticeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetNoticeHaveRead_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation SetNoticeHaveRead_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetNoticeHaveRead_result class]]) {
    return NO;
  }
  SetNoticeHaveRead_result *other = (SetNoticeHaveRead_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNoticeHaveRead_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNoticeHaveRead_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getServiceListForOptool_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  NSMutableArray * __serviceItemId;

  BOOL __auth_isset;
  BOOL __serviceItemId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, retain, getter=serviceItemId, setter=setServiceItemId:) NSMutableArray * serviceItemId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth serviceItemId: (NSMutableArray *) serviceItemId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) serviceItemId;
- (void) setServiceItemId: (NSMutableArray *) serviceItemId;
#endif
- (BOOL) serviceItemIdIsSet;

@end

@implementation getServiceListForOptool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth serviceItemId: (NSMutableArray *) serviceItemId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __serviceItemId = [serviceItemId retain_stub];
  __serviceItemId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemId"])
  {
    __serviceItemId = [[decoder decodeObjectForKey: @"serviceItemId"] retain_stub];
    __serviceItemId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__serviceItemId_isset)
  {
    [encoder encodeObject: __serviceItemId forKey: @"serviceItemId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __serviceItemId_isset ? 2654435761 : 0;
  if (__serviceItemId_isset)
  {
    hash = (hash * 31) ^ [__serviceItemId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getServiceListForOptool_args class]]) {
    return NO;
  }
  getServiceListForOptool_args *other = (getServiceListForOptool_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__serviceItemId_isset != other->__serviceItemId_isset) ||
      (__serviceItemId_isset && ((__serviceItemId || other->__serviceItemId) && ![__serviceItemId isEqual:other->__serviceItemId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__serviceItemId release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (NSMutableArray *) serviceItemId {
  return [[__serviceItemId retain_stub] autorelease_stub];
}

- (void) setServiceItemId: (NSMutableArray *) serviceItemId {
  [serviceItemId retain_stub];
  [__serviceItemId release_stub];
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
}

- (BOOL) serviceItemIdIsSet {
  return __serviceItemId_isset;
}

- (void) unsetServiceItemId {
  [__serviceItemId release_stub];
  __serviceItemId = nil;
  __serviceItemId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size64;
          [inProtocol readListBeginReturningElementType: NULL size: &_size64];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size64];
          int _i65;
          for (_i65 = 0; _i65 < _size64; ++_i65)
          {
            int64_t _elem66 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem66]];
          }
          [inProtocol readListEnd];
          [self setServiceItemId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getServiceListForOptool_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceItemId_isset) {
    if (__serviceItemId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__serviceItemId count]];
        int idx68;
        for (idx68 = 0; idx68 < [__serviceItemId count]; idx68++)
        {
          [outProtocol writeI64: [[__serviceItemId objectAtIndex: idx68] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__serviceItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getServiceListForOptool_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",serviceItemId:"];
  [ms appendFormat: @"%@", __serviceItemId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetServiceListForOptool_result : NSObject <TBase, NSCoding> {
  ResponseServiceItem * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseServiceItem * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseServiceItem *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseServiceItem *) success;
- (void) setSuccess: (ResponseServiceItem *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetServiceListForOptool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseServiceItem *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetServiceListForOptool_result class]]) {
    return NO;
  }
  GetServiceListForOptool_result *other = (GetServiceListForOptool_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseServiceItem *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseServiceItem *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseServiceItem *fieldValue = [[ResponseServiceItem alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceListForOptool_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetServiceListForOptool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCraftSuitByServiceItemId_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __serviceItemId;

  BOOL __auth_isset;
  BOOL __serviceItemId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=serviceItemId, setter=setServiceItemId:) int64_t serviceItemId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) serviceItemId;
- (void) setServiceItemId: (int64_t) serviceItemId;
#endif
- (BOOL) serviceItemIdIsSet;

@end

@implementation getCraftSuitByServiceItemId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemId"])
  {
    __serviceItemId = [decoder decodeInt64ForKey: @"serviceItemId"];
    __serviceItemId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__serviceItemId_isset)
  {
    [encoder encodeInt64: __serviceItemId forKey: @"serviceItemId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __serviceItemId_isset ? 2654435761 : 0;
  if (__serviceItemId_isset)
  {
    hash = (hash * 31) ^ [@(__serviceItemId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getCraftSuitByServiceItemId_args class]]) {
    return NO;
  }
  getCraftSuitByServiceItemId_args *other = (getCraftSuitByServiceItemId_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__serviceItemId_isset != other->__serviceItemId_isset) ||
      (__serviceItemId_isset && (__serviceItemId != other->__serviceItemId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) serviceItemId {
  return __serviceItemId;
}

- (void) setServiceItemId: (int64_t) serviceItemId {
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
}

- (BOOL) serviceItemIdIsSet {
  return __serviceItemId_isset;
}

- (void) unsetServiceItemId {
  __serviceItemId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCraftSuitByServiceItemId_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __serviceItemId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__serviceItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCraftSuitByServiceItemId_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",serviceItemId:"];
  [ms appendFormat: @"%qi", __serviceItemId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCraftSuitByServiceItemId_result : NSObject <TBase, NSCoding> {
  ResponseCraftSuit * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseCraftSuit * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseCraftSuit *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseCraftSuit *) success;
- (void) setSuccess: (ResponseCraftSuit *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetCraftSuitByServiceItemId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseCraftSuit *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetCraftSuitByServiceItemId_result class]]) {
    return NO;
  }
  GetCraftSuitByServiceItemId_result *other = (GetCraftSuitByServiceItemId_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseCraftSuit *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseCraftSuit *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseCraftSuit *fieldValue = [[ResponseCraftSuit alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCraftSuitByServiceItemId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCraftSuitByServiceItemId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMaterialInfoByCond_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __serviceItemId;
  int64_t __craftSuitId;

  BOOL __auth_isset;
  BOOL __serviceItemId_isset;
  BOOL __craftSuitId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=serviceItemId, setter=setServiceItemId:) int64_t serviceItemId;
@property (nonatomic, getter=craftSuitId, setter=setCraftSuitId:) int64_t craftSuitId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) serviceItemId;
- (void) setServiceItemId: (int64_t) serviceItemId;
#endif
- (BOOL) serviceItemIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) craftSuitId;
- (void) setCraftSuitId: (int64_t) craftSuitId;
#endif
- (BOOL) craftSuitIdIsSet;

@end

@implementation getMaterialInfoByCond_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemId"])
  {
    __serviceItemId = [decoder decodeInt64ForKey: @"serviceItemId"];
    __serviceItemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"craftSuitId"])
  {
    __craftSuitId = [decoder decodeInt64ForKey: @"craftSuitId"];
    __craftSuitId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__serviceItemId_isset)
  {
    [encoder encodeInt64: __serviceItemId forKey: @"serviceItemId"];
  }
  if (__craftSuitId_isset)
  {
    [encoder encodeInt64: __craftSuitId forKey: @"craftSuitId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __serviceItemId_isset ? 2654435761 : 0;
  if (__serviceItemId_isset)
  {
    hash = (hash * 31) ^ [@(__serviceItemId) hash];
  }
  hash = (hash * 31) ^ __craftSuitId_isset ? 2654435761 : 0;
  if (__craftSuitId_isset)
  {
    hash = (hash * 31) ^ [@(__craftSuitId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getMaterialInfoByCond_args class]]) {
    return NO;
  }
  getMaterialInfoByCond_args *other = (getMaterialInfoByCond_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__serviceItemId_isset != other->__serviceItemId_isset) ||
      (__serviceItemId_isset && (__serviceItemId != other->__serviceItemId))) {
    return NO;
  }
  if ((__craftSuitId_isset != other->__craftSuitId_isset) ||
      (__craftSuitId_isset && (__craftSuitId != other->__craftSuitId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) serviceItemId {
  return __serviceItemId;
}

- (void) setServiceItemId: (int64_t) serviceItemId {
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
}

- (BOOL) serviceItemIdIsSet {
  return __serviceItemId_isset;
}

- (void) unsetServiceItemId {
  __serviceItemId_isset = NO;
}

- (int64_t) craftSuitId {
  return __craftSuitId;
}

- (void) setCraftSuitId: (int64_t) craftSuitId {
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
}

- (BOOL) craftSuitIdIsSet {
  return __craftSuitId_isset;
}

- (void) unsetCraftSuitId {
  __craftSuitId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCraftSuitId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMaterialInfoByCond_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __serviceItemId];
    [outProtocol writeFieldEnd];
  }
  if (__craftSuitId_isset) {
    [outProtocol writeFieldBeginWithName: @"craftSuitId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __craftSuitId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__serviceItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemId' is not set."];
  }
  if (!__craftSuitId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'craftSuitId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMaterialInfoByCond_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",serviceItemId:"];
  [ms appendFormat: @"%qi", __serviceItemId];
  [ms appendString: @",craftSuitId:"];
  [ms appendFormat: @"%qi", __craftSuitId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMaterialInfoByCond_result : NSObject <TBase, NSCoding> {
  ResponseMaterialInfo * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseMaterialInfo * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseMaterialInfo *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseMaterialInfo *) success;
- (void) setSuccess: (ResponseMaterialInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMaterialInfoByCond_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseMaterialInfo *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMaterialInfoByCond_result class]]) {
    return NO;
  }
  GetMaterialInfoByCond_result *other = (GetMaterialInfoByCond_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseMaterialInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseMaterialInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseMaterialInfo *fieldValue = [[ResponseMaterialInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMaterialInfoByCond_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMaterialInfoByCond_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getPriceByCond_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __serviceItemId;
  int64_t __craftSuitId;
  int64_t __materialId;

  BOOL __auth_isset;
  BOOL __serviceItemId_isset;
  BOOL __craftSuitId_isset;
  BOOL __materialId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=serviceItemId, setter=setServiceItemId:) int64_t serviceItemId;
@property (nonatomic, getter=craftSuitId, setter=setCraftSuitId:) int64_t craftSuitId;
@property (nonatomic, getter=materialId, setter=setMaterialId:) int64_t materialId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId materialId: (int64_t) materialId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) serviceItemId;
- (void) setServiceItemId: (int64_t) serviceItemId;
#endif
- (BOOL) serviceItemIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) craftSuitId;
- (void) setCraftSuitId: (int64_t) craftSuitId;
#endif
- (BOOL) craftSuitIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) materialId;
- (void) setMaterialId: (int64_t) materialId;
#endif
- (BOOL) materialIdIsSet;

@end

@implementation getPriceByCond_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId materialId: (int64_t) materialId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
  __materialId = materialId;
  __materialId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceItemId"])
  {
    __serviceItemId = [decoder decodeInt64ForKey: @"serviceItemId"];
    __serviceItemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"craftSuitId"])
  {
    __craftSuitId = [decoder decodeInt64ForKey: @"craftSuitId"];
    __craftSuitId_isset = YES;
  }
  if ([decoder containsValueForKey: @"materialId"])
  {
    __materialId = [decoder decodeInt64ForKey: @"materialId"];
    __materialId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__serviceItemId_isset)
  {
    [encoder encodeInt64: __serviceItemId forKey: @"serviceItemId"];
  }
  if (__craftSuitId_isset)
  {
    [encoder encodeInt64: __craftSuitId forKey: @"craftSuitId"];
  }
  if (__materialId_isset)
  {
    [encoder encodeInt64: __materialId forKey: @"materialId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __serviceItemId_isset ? 2654435761 : 0;
  if (__serviceItemId_isset)
  {
    hash = (hash * 31) ^ [@(__serviceItemId) hash];
  }
  hash = (hash * 31) ^ __craftSuitId_isset ? 2654435761 : 0;
  if (__craftSuitId_isset)
  {
    hash = (hash * 31) ^ [@(__craftSuitId) hash];
  }
  hash = (hash * 31) ^ __materialId_isset ? 2654435761 : 0;
  if (__materialId_isset)
  {
    hash = (hash * 31) ^ [@(__materialId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getPriceByCond_args class]]) {
    return NO;
  }
  getPriceByCond_args *other = (getPriceByCond_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__serviceItemId_isset != other->__serviceItemId_isset) ||
      (__serviceItemId_isset && (__serviceItemId != other->__serviceItemId))) {
    return NO;
  }
  if ((__craftSuitId_isset != other->__craftSuitId_isset) ||
      (__craftSuitId_isset && (__craftSuitId != other->__craftSuitId))) {
    return NO;
  }
  if ((__materialId_isset != other->__materialId_isset) ||
      (__materialId_isset && (__materialId != other->__materialId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) serviceItemId {
  return __serviceItemId;
}

- (void) setServiceItemId: (int64_t) serviceItemId {
  __serviceItemId = serviceItemId;
  __serviceItemId_isset = YES;
}

- (BOOL) serviceItemIdIsSet {
  return __serviceItemId_isset;
}

- (void) unsetServiceItemId {
  __serviceItemId_isset = NO;
}

- (int64_t) craftSuitId {
  return __craftSuitId;
}

- (void) setCraftSuitId: (int64_t) craftSuitId {
  __craftSuitId = craftSuitId;
  __craftSuitId_isset = YES;
}

- (BOOL) craftSuitIdIsSet {
  return __craftSuitId_isset;
}

- (void) unsetCraftSuitId {
  __craftSuitId_isset = NO;
}

- (int64_t) materialId {
  return __materialId;
}

- (void) setMaterialId: (int64_t) materialId {
  __materialId = materialId;
  __materialId_isset = YES;
}

- (BOOL) materialIdIsSet {
  return __materialId_isset;
}

- (void) unsetMaterialId {
  __materialId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCraftSuitId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMaterialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getPriceByCond_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __serviceItemId];
    [outProtocol writeFieldEnd];
  }
  if (__craftSuitId_isset) {
    [outProtocol writeFieldBeginWithName: @"craftSuitId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __craftSuitId];
    [outProtocol writeFieldEnd];
  }
  if (__materialId_isset) {
    [outProtocol writeFieldBeginWithName: @"materialId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __materialId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__serviceItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'serviceItemId' is not set."];
  }
  if (!__craftSuitId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'craftSuitId' is not set."];
  }
  if (!__materialId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'materialId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getPriceByCond_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",serviceItemId:"];
  [ms appendFormat: @"%qi", __serviceItemId];
  [ms appendString: @",craftSuitId:"];
  [ms appendFormat: @"%qi", __craftSuitId];
  [ms appendString: @",materialId:"];
  [ms appendFormat: @"%qi", __materialId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetPriceByCond_result : NSObject <TBase, NSCoding> {
  ResponseDouble * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseDouble * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseDouble *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseDouble *) success;
- (void) setSuccess: (ResponseDouble *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetPriceByCond_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseDouble *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetPriceByCond_result class]]) {
    return NO;
  }
  GetPriceByCond_result *other = (GetPriceByCond_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseDouble *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseDouble *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseDouble *fieldValue = [[ResponseDouble alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPriceByCond_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPriceByCond_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface saveOrderService_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  int64_t __mobilePhone;
  NSString * __userCalled;
  NSString * __address;
  NSMutableArray * __services;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __mobilePhone_isset;
  BOOL __userCalled_isset;
  BOOL __address_isset;
  BOOL __services_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, getter=mobilePhone, setter=setMobilePhone:) int64_t mobilePhone;
@property (nonatomic, retain, getter=userCalled, setter=setUserCalled:) NSString * userCalled;
@property (nonatomic, retain, getter=address, setter=setAddress:) NSString * address;
@property (nonatomic, retain, getter=services, setter=setServices:) NSMutableArray * services;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId mobilePhone: (int64_t) mobilePhone userCalled: (NSString *) userCalled address: (NSString *) address services: (NSMutableArray *) services;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) mobilePhone;
- (void) setMobilePhone: (int64_t) mobilePhone;
#endif
- (BOOL) mobilePhoneIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userCalled;
- (void) setUserCalled: (NSString *) userCalled;
#endif
- (BOOL) userCalledIsSet;

#if !__has_feature(objc_arc)
- (NSString *) address;
- (void) setAddress: (NSString *) address;
#endif
- (BOOL) addressIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) services;
- (void) setServices: (NSMutableArray *) services;
#endif
- (BOOL) servicesIsSet;

@end

@implementation saveOrderService_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId mobilePhone: (int64_t) mobilePhone userCalled: (NSString *) userCalled address: (NSString *) address services: (NSMutableArray *) services
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __mobilePhone = mobilePhone;
  __mobilePhone_isset = YES;
  __userCalled = [userCalled retain_stub];
  __userCalled_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __services = [services retain_stub];
  __services_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobilePhone"])
  {
    __mobilePhone = [decoder decodeInt64ForKey: @"mobilePhone"];
    __mobilePhone_isset = YES;
  }
  if ([decoder containsValueForKey: @"userCalled"])
  {
    __userCalled = [[decoder decodeObjectForKey: @"userCalled"] retain_stub];
    __userCalled_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"services"])
  {
    __services = [[decoder decodeObjectForKey: @"services"] retain_stub];
    __services_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__mobilePhone_isset)
  {
    [encoder encodeInt64: __mobilePhone forKey: @"mobilePhone"];
  }
  if (__userCalled_isset)
  {
    [encoder encodeObject: __userCalled forKey: @"userCalled"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__services_isset)
  {
    [encoder encodeObject: __services forKey: @"services"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __mobilePhone_isset ? 2654435761 : 0;
  if (__mobilePhone_isset)
  {
    hash = (hash * 31) ^ [@(__mobilePhone) hash];
  }
  hash = (hash * 31) ^ __userCalled_isset ? 2654435761 : 0;
  if (__userCalled_isset)
  {
    hash = (hash * 31) ^ [__userCalled hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __services_isset ? 2654435761 : 0;
  if (__services_isset)
  {
    hash = (hash * 31) ^ [__services hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[saveOrderService_args class]]) {
    return NO;
  }
  saveOrderService_args *other = (saveOrderService_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__mobilePhone_isset != other->__mobilePhone_isset) ||
      (__mobilePhone_isset && (__mobilePhone != other->__mobilePhone))) {
    return NO;
  }
  if ((__userCalled_isset != other->__userCalled_isset) ||
      (__userCalled_isset && ((__userCalled || other->__userCalled) && ![__userCalled isEqual:other->__userCalled]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__services_isset != other->__services_isset) ||
      (__services_isset && ((__services || other->__services) && ![__services isEqual:other->__services]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__userCalled release_stub];
  [__address release_stub];
  [__services release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (int64_t) mobilePhone {
  return __mobilePhone;
}

- (void) setMobilePhone: (int64_t) mobilePhone {
  __mobilePhone = mobilePhone;
  __mobilePhone_isset = YES;
}

- (BOOL) mobilePhoneIsSet {
  return __mobilePhone_isset;
}

- (void) unsetMobilePhone {
  __mobilePhone_isset = NO;
}

- (NSString *) userCalled {
  return [[__userCalled retain_stub] autorelease_stub];
}

- (void) setUserCalled: (NSString *) userCalled {
  [userCalled retain_stub];
  [__userCalled release_stub];
  __userCalled = userCalled;
  __userCalled_isset = YES;
}

- (BOOL) userCalledIsSet {
  return __userCalled_isset;
}

- (void) unsetUserCalled {
  [__userCalled release_stub];
  __userCalled = nil;
  __userCalled_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSMutableArray *) services {
  return [[__services retain_stub] autorelease_stub];
}

- (void) setServices: (NSMutableArray *) services {
  [services retain_stub];
  [__services release_stub];
  __services = services;
  __services_isset = YES;
}

- (BOOL) servicesIsSet {
  return __services_isset;
}

- (void) unsetServices {
  [__services release_stub];
  __services = nil;
  __services_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobilePhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserCalled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size69;
          [inProtocol readListBeginReturningElementType: NULL size: &_size69];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size69];
          int _i70;
          for (_i70 = 0; _i70 < _size69; ++_i70)
          {
            int _size72;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size72];
            NSMutableDictionary * _elem71 = [[NSMutableDictionary alloc] initWithCapacity: _size72];
            int _i73;
            for (_i73 = 0; _i73 < _size72; ++_i73)
            {
              NSString * _key74 = [inProtocol readString];
              int64_t _val75 = [inProtocol readI64];
              [_elem71 setObject: [NSNumber numberWithLongLong: _val75] forKey: _key74];
            }
            [inProtocol readMapEnd];
            [fieldValue addObject: _elem71];
            [_elem71 release_stub];
          }
          [inProtocol readListEnd];
          [self setServices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveOrderService_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__mobilePhone_isset) {
    [outProtocol writeFieldBeginWithName: @"mobilePhone" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __mobilePhone];
    [outProtocol writeFieldEnd];
  }
  if (__userCalled_isset) {
    if (__userCalled != nil) {
      [outProtocol writeFieldBeginWithName: @"userCalled" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userCalled];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__services_isset) {
    if (__services != nil) {
      [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_MAP size: [__services count]];
        int idx77;
        for (idx77 = 0; idx77 < [__services count]; idx77++)
        {
          {
            [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_I64 size: [[__services objectAtIndex: idx77] count]];
            NSEnumerator * _iter78 = [[__services objectAtIndex: idx77] keyEnumerator];
            id key79;
            while ((key79 = [_iter78 nextObject]))
            {
              [outProtocol writeString: key79];
              [outProtocol writeI64: [[[__services objectAtIndex: idx77] objectForKey: key79] longLongValue]];
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__mobilePhone_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'mobilePhone' is not set."];
  }
  if (!__userCalled_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'userCalled' is not set."];
  }
  if (!__address_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'address' is not set."];
  }
  if (!__services_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'services' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"saveOrderService_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",mobilePhone:"];
  [ms appendFormat: @"%qi", __mobilePhone];
  [ms appendString: @",userCalled:"];
  [ms appendFormat: @"\"%@\"", __userCalled];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",services:"];
  [ms appendFormat: @"%@", __services];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SaveOrderService_result : NSObject <TBase, NSCoding> {
  Response * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation SaveOrderService_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SaveOrderService_result class]]) {
    return NO;
  }
  SaveOrderService_result *other = (SaveOrderService_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveOrderService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SaveOrderService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface followsOrder_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __remark;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __remark_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=remark, setter=setRemark:) NSString * remark;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) remark;
- (void) setRemark: (NSString *) remark;
#endif
- (BOOL) remarkIsSet;

@end

@implementation followsOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[followsOrder_args class]]) {
    return NO;
  }
  followsOrder_args *other = (followsOrder_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"followsOrder_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__remark_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'remark' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"followsOrder_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FollowsOrder_result : NSObject <TBase, NSCoding> {
  Response * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FollowsOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FollowsOrder_result class]]) {
    return NO;
  }
  FollowsOrder_result *other = (FollowsOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FollowsOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FollowsOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface checkIsDeleteErpOrder_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation checkIsDeleteErpOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[checkIsDeleteErpOrder_args class]]) {
    return NO;
  }
  checkIsDeleteErpOrder_args *other = (checkIsDeleteErpOrder_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"checkIsDeleteErpOrder_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"checkIsDeleteErpOrder_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CheckIsDeleteErpOrder_result : NSObject <TBase, NSCoding> {
  Response * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CheckIsDeleteErpOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CheckIsDeleteErpOrder_result class]]) {
    return NO;
  }
  CheckIsDeleteErpOrder_result *other = (CheckIsDeleteErpOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CheckIsDeleteErpOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CheckIsDeleteErpOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getActivitiesList_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation getActivitiesList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getActivitiesList_args class]]) {
    return NO;
  }
  getActivitiesList_args *other = (getActivitiesList_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getActivitiesList_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getActivitiesList_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetActivitiesList_result : NSObject <TBase, NSCoding> {
  ResponseActivities * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseActivities * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseActivities *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseActivities *) success;
- (void) setSuccess: (ResponseActivities *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetActivitiesList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseActivities *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetActivitiesList_result class]]) {
    return NO;
  }
  GetActivitiesList_result *other = (GetActivitiesList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ResponseActivities *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseActivities *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseActivities *fieldValue = [[ResponseActivities alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivitiesList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetActivitiesList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface checkCoupon_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __couponCardNo;
  int64_t __activitiesId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __couponCardNo_isset;
  BOOL __activitiesId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=couponCardNo, setter=setCouponCardNo:) NSString * couponCardNo;
@property (nonatomic, getter=activitiesId, setter=setActivitiesId:) int64_t activitiesId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId couponCardNo: (NSString *) couponCardNo activitiesId: (int64_t) activitiesId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) couponCardNo;
- (void) setCouponCardNo: (NSString *) couponCardNo;
#endif
- (BOOL) couponCardNoIsSet;

#if !__has_feature(objc_arc)
- (int64_t) activitiesId;
- (void) setActivitiesId: (int64_t) activitiesId;
#endif
- (BOOL) activitiesIdIsSet;

@end

@implementation checkCoupon_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId couponCardNo: (NSString *) couponCardNo activitiesId: (int64_t) activitiesId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __couponCardNo = [couponCardNo retain_stub];
  __couponCardNo_isset = YES;
  __activitiesId = activitiesId;
  __activitiesId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"couponCardNo"])
  {
    __couponCardNo = [[decoder decodeObjectForKey: @"couponCardNo"] retain_stub];
    __couponCardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"activitiesId"])
  {
    __activitiesId = [decoder decodeInt64ForKey: @"activitiesId"];
    __activitiesId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__couponCardNo_isset)
  {
    [encoder encodeObject: __couponCardNo forKey: @"couponCardNo"];
  }
  if (__activitiesId_isset)
  {
    [encoder encodeInt64: __activitiesId forKey: @"activitiesId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __couponCardNo_isset ? 2654435761 : 0;
  if (__couponCardNo_isset)
  {
    hash = (hash * 31) ^ [__couponCardNo hash];
  }
  hash = (hash * 31) ^ __activitiesId_isset ? 2654435761 : 0;
  if (__activitiesId_isset)
  {
    hash = (hash * 31) ^ [@(__activitiesId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[checkCoupon_args class]]) {
    return NO;
  }
  checkCoupon_args *other = (checkCoupon_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__couponCardNo_isset != other->__couponCardNo_isset) ||
      (__couponCardNo_isset && ((__couponCardNo || other->__couponCardNo) && ![__couponCardNo isEqual:other->__couponCardNo]))) {
    return NO;
  }
  if ((__activitiesId_isset != other->__activitiesId_isset) ||
      (__activitiesId_isset && (__activitiesId != other->__activitiesId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__couponCardNo release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) couponCardNo {
  return [[__couponCardNo retain_stub] autorelease_stub];
}

- (void) setCouponCardNo: (NSString *) couponCardNo {
  [couponCardNo retain_stub];
  [__couponCardNo release_stub];
  __couponCardNo = couponCardNo;
  __couponCardNo_isset = YES;
}

- (BOOL) couponCardNoIsSet {
  return __couponCardNo_isset;
}

- (void) unsetCouponCardNo {
  [__couponCardNo release_stub];
  __couponCardNo = nil;
  __couponCardNo_isset = NO;
}

- (int64_t) activitiesId {
  return __activitiesId;
}

- (void) setActivitiesId: (int64_t) activitiesId {
  __activitiesId = activitiesId;
  __activitiesId_isset = YES;
}

- (BOOL) activitiesIdIsSet {
  return __activitiesId_isset;
}

- (void) unsetActivitiesId {
  __activitiesId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCouponCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setActivitiesId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"checkCoupon_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__couponCardNo_isset) {
    if (__couponCardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"couponCardNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __couponCardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activitiesId_isset) {
    [outProtocol writeFieldBeginWithName: @"activitiesId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __activitiesId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__couponCardNo_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'couponCardNo' is not set."];
  }
  if (!__activitiesId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'activitiesId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"checkCoupon_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",couponCardNo:"];
  [ms appendFormat: @"\"%@\"", __couponCardNo];
  [ms appendString: @",activitiesId:"];
  [ms appendFormat: @"%qi", __activitiesId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CheckCoupon_result : NSObject <TBase, NSCoding> {
  ResponseDouble * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseDouble * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseDouble *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseDouble *) success;
- (void) setSuccess: (ResponseDouble *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CheckCoupon_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseDouble *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CheckCoupon_result class]]) {
    return NO;
  }
  CheckCoupon_result *other = (CheckCoupon_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ResponseDouble *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseDouble *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseDouble *fieldValue = [[ResponseDouble alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CheckCoupon_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CheckCoupon_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface saveOrderActivities_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;
  NSString * __remark;
  uint8_t __camera;
  NSString * __couponCardNo;
  int32_t __activitiesId;
  int32_t __num;
  double __longitude;
  double __latitude;

  BOOL __auth_isset;
  BOOL __orderId_isset;
  BOOL __remark_isset;
  BOOL __camera_isset;
  BOOL __couponCardNo_isset;
  BOOL __activitiesId_isset;
  BOOL __num_isset;
  BOOL __longitude_isset;
  BOOL __latitude_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
@property (nonatomic, retain, getter=remark, setter=setRemark:) NSString * remark;
@property (nonatomic, getter=camera, setter=setCamera:) uint8_t camera;
@property (nonatomic, retain, getter=couponCardNo, setter=setCouponCardNo:) NSString * couponCardNo;
@property (nonatomic, getter=activitiesId, setter=setActivitiesId:) int32_t activitiesId;
@property (nonatomic, getter=num, setter=setNum:) int32_t num;
@property (nonatomic, getter=longitude, setter=setLongitude:) double longitude;
@property (nonatomic, getter=latitude, setter=setLatitude:) double latitude;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark camera: (uint8_t) camera couponCardNo: (NSString *) couponCardNo activitiesId: (int32_t) activitiesId num: (int32_t) num longitude: (double) longitude latitude: (double) latitude;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) remark;
- (void) setRemark: (NSString *) remark;
#endif
- (BOOL) remarkIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) camera;
- (void) setCamera: (uint8_t) camera;
#endif
- (BOOL) cameraIsSet;

#if !__has_feature(objc_arc)
- (NSString *) couponCardNo;
- (void) setCouponCardNo: (NSString *) couponCardNo;
#endif
- (BOOL) couponCardNoIsSet;

#if !__has_feature(objc_arc)
- (int32_t) activitiesId;
- (void) setActivitiesId: (int32_t) activitiesId;
#endif
- (BOOL) activitiesIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) num;
- (void) setNum: (int32_t) num;
#endif
- (BOOL) numIsSet;

#if !__has_feature(objc_arc)
- (double) longitude;
- (void) setLongitude: (double) longitude;
#endif
- (BOOL) longitudeIsSet;

#if !__has_feature(objc_arc)
- (double) latitude;
- (void) setLatitude: (double) latitude;
#endif
- (BOOL) latitudeIsSet;

@end

@implementation saveOrderActivities_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark camera: (uint8_t) camera couponCardNo: (NSString *) couponCardNo activitiesId: (int32_t) activitiesId num: (int32_t) num longitude: (double) longitude latitude: (double) latitude
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __camera = camera;
  __camera_isset = YES;
  __couponCardNo = [couponCardNo retain_stub];
  __couponCardNo_isset = YES;
  __activitiesId = activitiesId;
  __activitiesId_isset = YES;
  __num = num;
  __num_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"camera"])
  {
    __camera = [decoder decodeIntForKey: @"camera"];
    __camera_isset = YES;
  }
  if ([decoder containsValueForKey: @"couponCardNo"])
  {
    __couponCardNo = [[decoder decodeObjectForKey: @"couponCardNo"] retain_stub];
    __couponCardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"activitiesId"])
  {
    __activitiesId = [decoder decodeInt32ForKey: @"activitiesId"];
    __activitiesId_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt32ForKey: @"num"];
    __num_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__camera_isset)
  {
    [encoder encodeInt: __camera forKey: @"camera"];
  }
  if (__couponCardNo_isset)
  {
    [encoder encodeObject: __couponCardNo forKey: @"couponCardNo"];
  }
  if (__activitiesId_isset)
  {
    [encoder encodeInt32: __activitiesId forKey: @"activitiesId"];
  }
  if (__num_isset)
  {
    [encoder encodeInt32: __num forKey: @"num"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __camera_isset ? 2654435761 : 0;
  if (__camera_isset)
  {
    hash = (hash * 31) ^ [@(__camera) hash];
  }
  hash = (hash * 31) ^ __couponCardNo_isset ? 2654435761 : 0;
  if (__couponCardNo_isset)
  {
    hash = (hash * 31) ^ [__couponCardNo hash];
  }
  hash = (hash * 31) ^ __activitiesId_isset ? 2654435761 : 0;
  if (__activitiesId_isset)
  {
    hash = (hash * 31) ^ [@(__activitiesId) hash];
  }
  hash = (hash * 31) ^ __num_isset ? 2654435761 : 0;
  if (__num_isset)
  {
    hash = (hash * 31) ^ [@(__num) hash];
  }
  hash = (hash * 31) ^ __longitude_isset ? 2654435761 : 0;
  if (__longitude_isset)
  {
    hash = (hash * 31) ^ [@(__longitude) hash];
  }
  hash = (hash * 31) ^ __latitude_isset ? 2654435761 : 0;
  if (__latitude_isset)
  {
    hash = (hash * 31) ^ [@(__latitude) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[saveOrderActivities_args class]]) {
    return NO;
  }
  saveOrderActivities_args *other = (saveOrderActivities_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__camera_isset != other->__camera_isset) ||
      (__camera_isset && (__camera != other->__camera))) {
    return NO;
  }
  if ((__couponCardNo_isset != other->__couponCardNo_isset) ||
      (__couponCardNo_isset && ((__couponCardNo || other->__couponCardNo) && ![__couponCardNo isEqual:other->__couponCardNo]))) {
    return NO;
  }
  if ((__activitiesId_isset != other->__activitiesId_isset) ||
      (__activitiesId_isset && (__activitiesId != other->__activitiesId))) {
    return NO;
  }
  if ((__num_isset != other->__num_isset) ||
      (__num_isset && (__num != other->__num))) {
    return NO;
  }
  if ((__longitude_isset != other->__longitude_isset) ||
      (__longitude_isset && (__longitude != other->__longitude))) {
    return NO;
  }
  if ((__latitude_isset != other->__latitude_isset) ||
      (__latitude_isset && (__latitude != other->__latitude))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [__remark release_stub];
  [__couponCardNo release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (uint8_t) camera {
  return __camera;
}

- (void) setCamera: (uint8_t) camera {
  __camera = camera;
  __camera_isset = YES;
}

- (BOOL) cameraIsSet {
  return __camera_isset;
}

- (void) unsetCamera {
  __camera_isset = NO;
}

- (NSString *) couponCardNo {
  return [[__couponCardNo retain_stub] autorelease_stub];
}

- (void) setCouponCardNo: (NSString *) couponCardNo {
  [couponCardNo retain_stub];
  [__couponCardNo release_stub];
  __couponCardNo = couponCardNo;
  __couponCardNo_isset = YES;
}

- (BOOL) couponCardNoIsSet {
  return __couponCardNo_isset;
}

- (void) unsetCouponCardNo {
  [__couponCardNo release_stub];
  __couponCardNo = nil;
  __couponCardNo_isset = NO;
}

- (int32_t) activitiesId {
  return __activitiesId;
}

- (void) setActivitiesId: (int32_t) activitiesId {
  __activitiesId = activitiesId;
  __activitiesId_isset = YES;
}

- (BOOL) activitiesIdIsSet {
  return __activitiesId_isset;
}

- (void) unsetActivitiesId {
  __activitiesId_isset = NO;
}

- (int32_t) num {
  return __num;
}

- (void) setNum: (int32_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setCamera: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCouponCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setActivitiesId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveOrderActivities_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__camera_isset) {
    [outProtocol writeFieldBeginWithName: @"camera" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: __camera];
    [outProtocol writeFieldEnd];
  }
  if (__couponCardNo_isset) {
    if (__couponCardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"couponCardNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __couponCardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activitiesId_isset) {
    [outProtocol writeFieldBeginWithName: @"activitiesId" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __activitiesId];
    [outProtocol writeFieldEnd];
  }
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __num];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
  if (!__remark_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'remark' is not set."];
  }
  if (!__camera_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'camera' is not set."];
  }
  if (!__couponCardNo_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'couponCardNo' is not set."];
  }
  if (!__activitiesId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'activitiesId' is not set."];
  }
  if (!__num_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'num' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"saveOrderActivities_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",camera:"];
  [ms appendFormat: @"%i", __camera];
  [ms appendString: @",couponCardNo:"];
  [ms appendFormat: @"\"%@\"", __couponCardNo];
  [ms appendString: @",activitiesId:"];
  [ms appendFormat: @"%i", __activitiesId];
  [ms appendString: @",num:"];
  [ms appendFormat: @"%i", __num];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SaveOrderActivities_result : NSObject <TBase, NSCoding> {
  Response * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SaveOrderActivities_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SaveOrderActivities_result class]]) {
    return NO;
  }
  SaveOrderActivities_result *other = (SaveOrderActivities_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveOrderActivities_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SaveOrderActivities_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getPaymentInfoByOrderId_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __orderId;

  BOOL __auth_isset;
  BOOL __orderId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=orderId, setter=setOrderId:) int64_t orderId;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) orderId;
- (void) setOrderId: (int64_t) orderId;
#endif
- (BOOL) orderIdIsSet;

@end

@implementation getPaymentInfoByOrderId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth orderId: (int64_t) orderId
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getPaymentInfoByOrderId_args class]]) {
    return NO;
  }
  getPaymentInfoByOrderId_args *other = (getPaymentInfoByOrderId_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getPaymentInfoByOrderId_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__orderId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'orderId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getPaymentInfoByOrderId_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetPaymentInfoByOrderId_result : NSObject <TBase, NSCoding> {
  ResponsePaymentList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponsePaymentList * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResponsePaymentList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponsePaymentList *) success;
- (void) setSuccess: (ResponsePaymentList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPaymentInfoByOrderId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponsePaymentList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetPaymentInfoByOrderId_result class]]) {
    return NO;
  }
  GetPaymentInfoByOrderId_result *other = (GetPaymentInfoByOrderId_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ResponsePaymentList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponsePaymentList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponsePaymentList *fieldValue = [[ResponsePaymentList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPaymentInfoByOrderId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPaymentInfoByOrderId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserInfoByUid_args : NSObject <TBase, NSCoding> {
  Auth * __auth;
  int64_t __uid;

  BOOL __auth_isset;
  BOOL __uid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
@property (nonatomic, getter=uid, setter=setUid:) int64_t uid;
#endif

- (id) init;
- (id) initWithAuth: (Auth *) auth uid: (int64_t) uid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (int64_t) uid;
- (void) setUid: (int64_t) uid;
#endif
- (BOOL) uidIsSet;

@end

@implementation getUserInfoByUid_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (Auth *) auth uid: (int64_t) uid
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  hash = (hash * 31) ^ __uid_isset ? 2654435761 : 0;
  if (__uid_isset)
  {
    hash = (hash * 31) ^ [@(__uid) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getUserInfoByUid_args class]]) {
    return NO;
  }
  getUserInfoByUid_args *other = (getUserInfoByUid_args *)anObject;
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  if ((__uid_isset != other->__uid_isset) ||
      (__uid_isset && (__uid != other->__uid))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__auth release_stub];
  [super dealloc_stub];
}

- (Auth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (Auth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserInfoByUid_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__auth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'auth' is not set."];
  }
  if (!__uid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uid' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserInfoByUid_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserInfoByUid_result : NSObject <TBase, NSCoding> {
  ResponseUserInfo * __success;
  InvalidOperation * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResponseUserInfo * success;
@property (nonatomic, retain, getter=error, setter=setError:) InvalidOperation * error;
#endif

- (id) init;
- (id) initWithSuccess: (ResponseUserInfo *) success error: (InvalidOperation *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResponseUserInfo *) success;
- (void) setSuccess: (ResponseUserInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) error;
- (void) setError: (InvalidOperation *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetUserInfoByUid_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResponseUserInfo *) success error: (InvalidOperation *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetUserInfoByUid_result class]]) {
    return NO;
  }
  GetUserInfoByUid_result *other = (GetUserInfoByUid_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ResponseUserInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResponseUserInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (InvalidOperation *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResponseUserInfo *fieldValue = [[ResponseUserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfoByUid_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInfoByUid_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IpadPSRClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getVerificationCode: (Auth *) auth mobile: (NSString *) mobile
{
  [outProtocol writeMessageBeginWithName: @"getVerificationCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getVerificationCode_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (mobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: mobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_getVerificationCode
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetVerificationCode_result * result = [[[GetVerificationCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getVerificationCode failed: unknown result"];
}

- (Response *) getVerificationCode: (Auth *) auth mobile: (NSString *) mobile
{
  [self send_getVerificationCode : auth mobile: mobile];
  [[outProtocol transport] flush];
  return [self recv_getVerificationCode];
}

- (void) send_login: (Auth *) auth mobile: (NSString *) mobile verificationCode: (NSString *) verificationCode deviceToken: (NSString *) deviceToken
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (mobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: mobile];
    [outProtocol writeFieldEnd];
  }
  if (verificationCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"verificationCode" type: TType_STRING fieldID: 3];
    [outProtocol writeString: verificationCode];
    [outProtocol writeFieldEnd];
  }
  if (deviceToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 4];
    [outProtocol writeString: deviceToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseAuth *) recv_login
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (ResponseAuth *) login: (Auth *) auth mobile: (NSString *) mobile verificationCode: (NSString *) verificationCode deviceToken: (NSString *) deviceToken
{
  [self send_login : auth mobile: mobile verificationCode: verificationCode deviceToken: deviceToken];
  [[outProtocol transport] flush];
  return [self recv_login];
}

- (void) send_logout: (Auth *) auth mobile: (NSString *) mobile
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (mobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: mobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_logout
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"logout failed: unknown result"];
}

- (Response *) logout: (Auth *) auth mobile: (NSString *) mobile
{
  [self send_logout : auth mobile: mobile];
  [[outProtocol transport] flush];
  return [self recv_logout];
}

- (void) send_getOrderList: (Auth *) auth type: (uint8_t) type page: (int32_t) page size: (int32_t) size searchKey: (NSString *) searchKey
{
  [outProtocol writeMessageBeginWithName: @"getOrderList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getOrderList_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: size];
  [outProtocol writeFieldEnd];
  if (searchKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchKey" type: TType_STRING fieldID: 6];
    [outProtocol writeString: searchKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseOrderList *) recv_getOrderList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetOrderList_result * result = [[[GetOrderList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getOrderList failed: unknown result"];
}

- (ResponseOrderList *) getOrderList: (Auth *) auth type: (uint8_t) type page: (int32_t) page size: (int32_t) size searchKey: (NSString *) searchKey
{
  [self send_getOrderList : auth type: type page: page size: size searchKey: searchKey];
  [[outProtocol transport] flush];
  return [self recv_getOrderList];
}

- (void) send_getOrderInfoByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"getOrderInfoByOrderId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getOrderInfoByOrderId_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseOrder *) recv_getOrderInfoByOrderId
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetOrderInfoByOrderId_result * result = [[[GetOrderInfoByOrderId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getOrderInfoByOrderId failed: unknown result"];
}

- (ResponseOrder *) getOrderInfoByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_getOrderInfoByOrderId : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_getOrderInfoByOrderId];
}

- (void) send_getOrderMeasureByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"getOrderMeasureByOrderId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getOrderMeasureByOrderId_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseOrderService *) recv_getOrderMeasureByOrderId
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetOrderMeasureByOrderId_result * result = [[[GetOrderMeasureByOrderId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getOrderMeasureByOrderId failed: unknown result"];
}

- (ResponseOrderService *) getOrderMeasureByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_getOrderMeasureByOrderId : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_getOrderMeasureByOrderId];
}

- (void) send_setOrderDoorTime: (Auth *) auth orderId: (int64_t) orderId doorTime: (NSString *) doorTime remark: (NSString *) remark
{
  [outProtocol writeMessageBeginWithName: @"setOrderDoorTime" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setOrderDoorTime_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (doorTime != nil)  {
    [outProtocol writeFieldBeginWithName: @"doorTime" type: TType_STRING fieldID: 3];
    [outProtocol writeString: doorTime];
    [outProtocol writeFieldEnd];
  }
  if (remark != nil)  {
    [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 4];
    [outProtocol writeString: remark];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_setOrderDoorTime
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetOrderDoorTime_result * result = [[[SetOrderDoorTime_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setOrderDoorTime failed: unknown result"];
}

- (Response *) setOrderDoorTime: (Auth *) auth orderId: (int64_t) orderId doorTime: (NSString *) doorTime remark: (NSString *) remark
{
  [self send_setOrderDoorTime : auth orderId: orderId doorTime: doorTime remark: remark];
  [[outProtocol transport] flush];
  return [self recv_setOrderDoorTime];
}

- (void) send_psrStopOrder: (Auth *) auth orderId: (int64_t) orderId pauseReasonMemo: (NSString *) pauseReasonMemo remark: (NSString *) remark
{
  [outProtocol writeMessageBeginWithName: @"psrStopOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"psrStopOrder_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (pauseReasonMemo != nil)  {
    [outProtocol writeFieldBeginWithName: @"pauseReasonMemo" type: TType_STRING fieldID: 3];
    [outProtocol writeString: pauseReasonMemo];
    [outProtocol writeFieldEnd];
  }
  if (remark != nil)  {
    [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 4];
    [outProtocol writeString: remark];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_psrStopOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  PsrStopOrder_result * result = [[[PsrStopOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"psrStopOrder failed: unknown result"];
}

- (Response *) psrStopOrder: (Auth *) auth orderId: (int64_t) orderId pauseReasonMemo: (NSString *) pauseReasonMemo remark: (NSString *) remark
{
  [self send_psrStopOrder : auth orderId: orderId pauseReasonMemo: pauseReasonMemo remark: remark];
  [[outProtocol transport] flush];
  return [self recv_psrStopOrder];
}

- (void) send_getForeman: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime longitude: (double) longitude latitude: (double) latitude
{
  [outProtocol writeMessageBeginWithName: @"getForeman" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getForeman_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (startTime != nil)  {
    [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 3];
    [outProtocol writeString: startTime];
    [outProtocol writeFieldEnd];
  }
  if (endTime != nil)  {
    [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 4];
    [outProtocol writeString: endTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
  [outProtocol writeDouble: longitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 6];
  [outProtocol writeDouble: latitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseUserList *) recv_getForeman
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetForeman_result * result = [[[GetForeman_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getForeman failed: unknown result"];
}

- (ResponseUserList *) getForeman: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime longitude: (double) longitude latitude: (double) latitude
{
  [self send_getForeman : auth orderId: orderId startTime: startTime endTime: endTime longitude: longitude latitude: latitude];
  [[outProtocol transport] flush];
  return [self recv_getForeman];
}

- (void) send_setForeman: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime uid: (int32_t) uid remark: (NSString *) remark
{
  [outProtocol writeMessageBeginWithName: @"setForeman" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setForeman_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (startTime != nil)  {
    [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 3];
    [outProtocol writeString: startTime];
    [outProtocol writeFieldEnd];
  }
  if (endTime != nil)  {
    [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 4];
    [outProtocol writeString: endTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"uid" type: TType_I32 fieldID: 6];
  [outProtocol writeI32: uid];
  [outProtocol writeFieldEnd];
  if (remark != nil)  {
    [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 7];
    [outProtocol writeString: remark];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_setForeman
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetForeman_result * result = [[[SetForeman_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setForeman failed: unknown result"];
}

- (Response *) setForeman: (Auth *) auth orderId: (int64_t) orderId startTime: (NSString *) startTime endTime: (NSString *) endTime uid: (int32_t) uid remark: (NSString *) remark
{
  [self send_setForeman : auth orderId: orderId startTime: startTime endTime: endTime uid: uid remark: remark];
  [[outProtocol transport] flush];
  return [self recv_setForeman];
}

- (void) send_uploadOrderPhoto: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type photo: (NSData *) photo ext: (NSString *) ext
{
  [outProtocol writeMessageBeginWithName: @"uploadOrderPhoto" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uploadOrderPhoto_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: type];
  [outProtocol writeFieldEnd];
  if (photo != nil)  {
    [outProtocol writeFieldBeginWithName: @"photo" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: photo];
    [outProtocol writeFieldEnd];
  }
  if (ext != nil)  {
    [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 5];
    [outProtocol writeString: ext];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_uploadOrderPhoto
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UploadOrderPhoto_result * result = [[[UploadOrderPhoto_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uploadOrderPhoto failed: unknown result"];
}

- (Response *) uploadOrderPhoto: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type photo: (NSData *) photo ext: (NSString *) ext
{
  [self send_uploadOrderPhoto : auth orderId: orderId type: type photo: photo ext: ext];
  [[outProtocol transport] flush];
  return [self recv_uploadOrderPhoto];
}

- (void) send_deleteOrderPhoto: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type filename: (NSMutableArray *) filename
{
  [outProtocol writeMessageBeginWithName: @"deleteOrderPhoto" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deleteOrderPhoto_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"type" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: type];
  [outProtocol writeFieldEnd];
  if (filename != nil)  {
    [outProtocol writeFieldBeginWithName: @"filename" type: TType_LIST fieldID: 4];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [filename count]];
      int idx81;
      for (idx81 = 0; idx81 < [filename count]; idx81++)
      {
        [outProtocol writeString: [filename objectAtIndex: idx81]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_deleteOrderPhoto
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DeleteOrderPhoto_result * result = [[[DeleteOrderPhoto_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"deleteOrderPhoto failed: unknown result"];
}

- (Response *) deleteOrderPhoto: (Auth *) auth orderId: (int64_t) orderId type: (uint8_t) type filename: (NSMutableArray *) filename
{
  [self send_deleteOrderPhoto : auth orderId: orderId type: type filename: filename];
  [[outProtocol transport] flush];
  return [self recv_deleteOrderPhoto];
}

- (void) send_finishOrder: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"finishOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"finishOrder_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_finishOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FinishOrder_result * result = [[[FinishOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"finishOrder failed: unknown result"];
}

- (Response *) finishOrder: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_finishOrder : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_finishOrder];
}

- (void) send_bindCamera: (Auth *) auth orderId: (int64_t) orderId cameraCode: (NSString *) cameraCode
{
  [outProtocol writeMessageBeginWithName: @"bindCamera" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"bindCamera_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (cameraCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"cameraCode" type: TType_STRING fieldID: 3];
    [outProtocol writeString: cameraCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_bindCamera
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BindCamera_result * result = [[[BindCamera_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"bindCamera failed: unknown result"];
}

- (Response *) bindCamera: (Auth *) auth orderId: (int64_t) orderId cameraCode: (NSString *) cameraCode
{
  [self send_bindCamera : auth orderId: orderId cameraCode: cameraCode];
  [[outProtocol transport] flush];
  return [self recv_bindCamera];
}

- (void) send_getCameraUrl: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"getCameraUrl" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCameraUrl_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_getCameraUrl
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetCameraUrl_result * result = [[[GetCameraUrl_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCameraUrl failed: unknown result"];
}

- (Response *) getCameraUrl: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_getCameraUrl : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_getCameraUrl];
}

- (void) send_getNoticeList: (Auth *) auth page: (int32_t) page pageNumber: (int32_t) pageNumber
{
  [outProtocol writeMessageBeginWithName: @"getNoticeList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getNoticeList_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageNumber" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: pageNumber];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseNoticeList *) recv_getNoticeList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetNoticeList_result * result = [[[GetNoticeList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getNoticeList failed: unknown result"];
}

- (ResponseNoticeList *) getNoticeList: (Auth *) auth page: (int32_t) page pageNumber: (int32_t) pageNumber
{
  [self send_getNoticeList : auth page: page pageNumber: pageNumber];
  [[outProtocol transport] flush];
  return [self recv_getNoticeList];
}

- (void) send_setNoticeHaveRead: (Auth *) auth noticeId: (int64_t) noticeId
{
  [outProtocol writeMessageBeginWithName: @"setNoticeHaveRead" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setNoticeHaveRead_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"noticeId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: noticeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_setNoticeHaveRead
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetNoticeHaveRead_result * result = [[[SetNoticeHaveRead_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setNoticeHaveRead failed: unknown result"];
}

- (Response *) setNoticeHaveRead: (Auth *) auth noticeId: (int64_t) noticeId
{
  [self send_setNoticeHaveRead : auth noticeId: noticeId];
  [[outProtocol transport] flush];
  return [self recv_setNoticeHaveRead];
}

- (void) send_getServiceListForOptool: (Auth *) auth serviceItemId: (NSMutableArray *) serviceItemId
{
  [outProtocol writeMessageBeginWithName: @"getServiceListForOptool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getServiceListForOptool_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (serviceItemId != nil)  {
    [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_I64 size: [serviceItemId count]];
      int idx83;
      for (idx83 = 0; idx83 < [serviceItemId count]; idx83++)
      {
        [outProtocol writeI64: [[serviceItemId objectAtIndex: idx83] longLongValue]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseServiceItem *) recv_getServiceListForOptool
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetServiceListForOptool_result * result = [[[GetServiceListForOptool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getServiceListForOptool failed: unknown result"];
}

- (ResponseServiceItem *) getServiceListForOptool: (Auth *) auth serviceItemId: (NSMutableArray *) serviceItemId
{
  [self send_getServiceListForOptool : auth serviceItemId: serviceItemId];
  [[outProtocol transport] flush];
  return [self recv_getServiceListForOptool];
}

- (void) send_getCraftSuitByServiceItemId: (Auth *) auth serviceItemId: (int64_t) serviceItemId
{
  [outProtocol writeMessageBeginWithName: @"getCraftSuitByServiceItemId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCraftSuitByServiceItemId_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: serviceItemId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseCraftSuit *) recv_getCraftSuitByServiceItemId
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetCraftSuitByServiceItemId_result * result = [[[GetCraftSuitByServiceItemId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCraftSuitByServiceItemId failed: unknown result"];
}

- (ResponseCraftSuit *) getCraftSuitByServiceItemId: (Auth *) auth serviceItemId: (int64_t) serviceItemId
{
  [self send_getCraftSuitByServiceItemId : auth serviceItemId: serviceItemId];
  [[outProtocol transport] flush];
  return [self recv_getCraftSuitByServiceItemId];
}

- (void) send_getMaterialInfoByCond: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId
{
  [outProtocol writeMessageBeginWithName: @"getMaterialInfoByCond" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMaterialInfoByCond_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: serviceItemId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"craftSuitId" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: craftSuitId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseMaterialInfo *) recv_getMaterialInfoByCond
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetMaterialInfoByCond_result * result = [[[GetMaterialInfoByCond_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMaterialInfoByCond failed: unknown result"];
}

- (ResponseMaterialInfo *) getMaterialInfoByCond: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId
{
  [self send_getMaterialInfoByCond : auth serviceItemId: serviceItemId craftSuitId: craftSuitId];
  [[outProtocol transport] flush];
  return [self recv_getMaterialInfoByCond];
}

- (void) send_getPriceByCond: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId materialId: (int64_t) materialId
{
  [outProtocol writeMessageBeginWithName: @"getPriceByCond" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPriceByCond_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"serviceItemId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: serviceItemId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"craftSuitId" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: craftSuitId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"materialId" type: TType_I64 fieldID: 4];
  [outProtocol writeI64: materialId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseDouble *) recv_getPriceByCond
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetPriceByCond_result * result = [[[GetPriceByCond_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPriceByCond failed: unknown result"];
}

- (ResponseDouble *) getPriceByCond: (Auth *) auth serviceItemId: (int64_t) serviceItemId craftSuitId: (int64_t) craftSuitId materialId: (int64_t) materialId
{
  [self send_getPriceByCond : auth serviceItemId: serviceItemId craftSuitId: craftSuitId materialId: materialId];
  [[outProtocol transport] flush];
  return [self recv_getPriceByCond];
}

- (void) send_saveOrderService: (Auth *) auth orderId: (int64_t) orderId mobilePhone: (int64_t) mobilePhone userCalled: (NSString *) userCalled address: (NSString *) address services: (NSMutableArray *) services
{
  [outProtocol writeMessageBeginWithName: @"saveOrderService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveOrderService_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"mobilePhone" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: mobilePhone];
  [outProtocol writeFieldEnd];
  if (userCalled != nil)  {
    [outProtocol writeFieldBeginWithName: @"userCalled" type: TType_STRING fieldID: 4];
    [outProtocol writeString: userCalled];
    [outProtocol writeFieldEnd];
  }
  if (address != nil)  {
    [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 5];
    [outProtocol writeString: address];
    [outProtocol writeFieldEnd];
  }
  if (services != nil)  {
    [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 6];
    {
      [outProtocol writeListBeginWithElementType: TType_MAP size: [services count]];
      int idx85;
      for (idx85 = 0; idx85 < [services count]; idx85++)
      {
        {
          [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_I64 size: [[services objectAtIndex: idx85] count]];
          NSEnumerator * _iter86 = [[services objectAtIndex: idx85] keyEnumerator];
          id key87;
          while ((key87 = [_iter86 nextObject]))
          {
            [outProtocol writeString: key87];
            [outProtocol writeI64: [[[services objectAtIndex: idx85] objectForKey: key87] longLongValue]];
          }
          [outProtocol writeMapEnd];
        }
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_saveOrderService
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SaveOrderService_result * result = [[[SaveOrderService_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveOrderService failed: unknown result"];
}

- (Response *) saveOrderService: (Auth *) auth orderId: (int64_t) orderId mobilePhone: (int64_t) mobilePhone userCalled: (NSString *) userCalled address: (NSString *) address services: (NSMutableArray *) services
{
  [self send_saveOrderService : auth orderId: orderId mobilePhone: mobilePhone userCalled: userCalled address: address services: services];
  [[outProtocol transport] flush];
  return [self recv_saveOrderService];
}

- (void) send_followsOrder: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark
{
  [outProtocol writeMessageBeginWithName: @"followsOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"followsOrder_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (remark != nil)  {
    [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 3];
    [outProtocol writeString: remark];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_followsOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FollowsOrder_result * result = [[[FollowsOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"followsOrder failed: unknown result"];
}

- (Response *) followsOrder: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark
{
  [self send_followsOrder : auth orderId: orderId remark: remark];
  [[outProtocol transport] flush];
  return [self recv_followsOrder];
}

- (void) send_checkIsDeleteErpOrder: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"checkIsDeleteErpOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"checkIsDeleteErpOrder_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_checkIsDeleteErpOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CheckIsDeleteErpOrder_result * result = [[[CheckIsDeleteErpOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"checkIsDeleteErpOrder failed: unknown result"];
}

- (Response *) checkIsDeleteErpOrder: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_checkIsDeleteErpOrder : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_checkIsDeleteErpOrder];
}

- (void) send_getActivitiesList: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"getActivitiesList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getActivitiesList_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseActivities *) recv_getActivitiesList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetActivitiesList_result * result = [[[GetActivitiesList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getActivitiesList failed: unknown result"];
}

- (ResponseActivities *) getActivitiesList: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_getActivitiesList : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_getActivitiesList];
}

- (void) send_checkCoupon: (Auth *) auth orderId: (int64_t) orderId couponCardNo: (NSString *) couponCardNo activitiesId: (int64_t) activitiesId
{
  [outProtocol writeMessageBeginWithName: @"checkCoupon" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"checkCoupon_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (couponCardNo != nil)  {
    [outProtocol writeFieldBeginWithName: @"couponCardNo" type: TType_STRING fieldID: 3];
    [outProtocol writeString: couponCardNo];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"activitiesId" type: TType_I64 fieldID: 4];
  [outProtocol writeI64: activitiesId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseDouble *) recv_checkCoupon
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CheckCoupon_result * result = [[[CheckCoupon_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"checkCoupon failed: unknown result"];
}

- (ResponseDouble *) checkCoupon: (Auth *) auth orderId: (int64_t) orderId couponCardNo: (NSString *) couponCardNo activitiesId: (int64_t) activitiesId
{
  [self send_checkCoupon : auth orderId: orderId couponCardNo: couponCardNo activitiesId: activitiesId];
  [[outProtocol transport] flush];
  return [self recv_checkCoupon];
}

- (void) send_saveOrderActivities: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark camera: (uint8_t) camera couponCardNo: (NSString *) couponCardNo activitiesId: (int32_t) activitiesId num: (int32_t) num longitude: (double) longitude latitude: (double) latitude
{
  [outProtocol writeMessageBeginWithName: @"saveOrderActivities" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveOrderActivities_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  if (remark != nil)  {
    [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 3];
    [outProtocol writeString: remark];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"camera" type: TType_BYTE fieldID: 4];
  [outProtocol writeByte: camera];
  [outProtocol writeFieldEnd];
  if (couponCardNo != nil)  {
    [outProtocol writeFieldBeginWithName: @"couponCardNo" type: TType_STRING fieldID: 5];
    [outProtocol writeString: couponCardNo];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"activitiesId" type: TType_I32 fieldID: 6];
  [outProtocol writeI32: activitiesId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 7];
  [outProtocol writeI32: num];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 8];
  [outProtocol writeDouble: longitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 9];
  [outProtocol writeDouble: latitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Response *) recv_saveOrderActivities
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SaveOrderActivities_result * result = [[[SaveOrderActivities_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveOrderActivities failed: unknown result"];
}

- (Response *) saveOrderActivities: (Auth *) auth orderId: (int64_t) orderId remark: (NSString *) remark camera: (uint8_t) camera couponCardNo: (NSString *) couponCardNo activitiesId: (int32_t) activitiesId num: (int32_t) num longitude: (double) longitude latitude: (double) latitude
{
  [self send_saveOrderActivities : auth orderId: orderId remark: remark camera: camera couponCardNo: couponCardNo activitiesId: activitiesId num: num longitude: longitude latitude: latitude];
  [[outProtocol transport] flush];
  return [self recv_saveOrderActivities];
}

- (void) send_getPaymentInfoByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [outProtocol writeMessageBeginWithName: @"getPaymentInfoByOrderId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPaymentInfoByOrderId_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: orderId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponsePaymentList *) recv_getPaymentInfoByOrderId
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetPaymentInfoByOrderId_result * result = [[[GetPaymentInfoByOrderId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPaymentInfoByOrderId failed: unknown result"];
}

- (ResponsePaymentList *) getPaymentInfoByOrderId: (Auth *) auth orderId: (int64_t) orderId
{
  [self send_getPaymentInfoByOrderId : auth orderId: orderId];
  [[outProtocol transport] flush];
  return [self recv_getPaymentInfoByOrderId];
}

- (void) send_getUserInfoByUid: (Auth *) auth uid: (int64_t) uid
{
  [outProtocol writeMessageBeginWithName: @"getUserInfoByUid" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserInfoByUid_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: uid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ResponseUserInfo *) recv_getUserInfoByUid
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetUserInfoByUid_result * result = [[[GetUserInfoByUid_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserInfoByUid failed: unknown result"];
}

- (ResponseUserInfo *) getUserInfoByUid: (Auth *) auth uid: (int64_t) uid
{
  [self send_getUserInfoByUid : auth uid: uid];
  [[outProtocol transport] flush];
  return [self recv_getUserInfoByUid];
}

@end

@implementation IpadPSRProcessor

- (id) initWithIpadPSR: (id <IpadPSR>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getVerificationCode_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getVerificationCode"];
}
{
  SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"login"];
}
{
  SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"logout"];
}
{
  SEL s = @selector(process_getOrderList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getOrderList"];
}
{
  SEL s = @selector(process_getOrderInfoByOrderId_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getOrderInfoByOrderId"];
}
{
  SEL s = @selector(process_getOrderMeasureByOrderId_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getOrderMeasureByOrderId"];
}
{
  SEL s = @selector(process_setOrderDoorTime_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"setOrderDoorTime"];
}
{
  SEL s = @selector(process_psrStopOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"psrStopOrder"];
}
{
  SEL s = @selector(process_getForeman_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getForeman"];
}
{
  SEL s = @selector(process_setForeman_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"setForeman"];
}
{
  SEL s = @selector(process_uploadOrderPhoto_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"uploadOrderPhoto"];
}
{
  SEL s = @selector(process_deleteOrderPhoto_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"deleteOrderPhoto"];
}
{
  SEL s = @selector(process_finishOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"finishOrder"];
}
{
  SEL s = @selector(process_bindCamera_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"bindCamera"];
}
{
  SEL s = @selector(process_getCameraUrl_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getCameraUrl"];
}
{
  SEL s = @selector(process_getNoticeList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getNoticeList"];
}
{
  SEL s = @selector(process_setNoticeHaveRead_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"setNoticeHaveRead"];
}
{
  SEL s = @selector(process_getServiceListForOptool_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getServiceListForOptool"];
}
{
  SEL s = @selector(process_getCraftSuitByServiceItemId_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getCraftSuitByServiceItemId"];
}
{
  SEL s = @selector(process_getMaterialInfoByCond_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMaterialInfoByCond"];
}
{
  SEL s = @selector(process_getPriceByCond_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getPriceByCond"];
}
{
  SEL s = @selector(process_saveOrderService_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"saveOrderService"];
}
{
  SEL s = @selector(process_followsOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"followsOrder"];
}
{
  SEL s = @selector(process_checkIsDeleteErpOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"checkIsDeleteErpOrder"];
}
{
  SEL s = @selector(process_getActivitiesList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getActivitiesList"];
}
{
  SEL s = @selector(process_checkCoupon_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"checkCoupon"];
}
{
  SEL s = @selector(process_saveOrderActivities_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"saveOrderActivities"];
}
{
  SEL s = @selector(process_getPaymentInfoByOrderId_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getPaymentInfoByOrderId"];
}
{
  SEL s = @selector(process_getUserInfoByUid_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getUserInfoByUid"];
}
return self;
}

- (id<IpadPSR>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getVerificationCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getVerificationCode_args * args = [[getVerificationCode_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetVerificationCode_result * result = [[GetVerificationCode_result alloc] init];
[result setSuccess: [mService getVerificationCode: [args auth] mobile: [args mobile]]];
[outProtocol writeMessageBeginWithName: @"getVerificationCode"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
login_args * args = [[login_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Login_result * result = [[Login_result alloc] init];
[result setSuccess: [mService login: [args auth] mobile: [args mobile] verificationCode: [args verificationCode] deviceToken: [args deviceToken]]];
[outProtocol writeMessageBeginWithName: @"login"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
logout_args * args = [[logout_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Logout_result * result = [[Logout_result alloc] init];
[result setSuccess: [mService logout: [args auth] mobile: [args mobile]]];
[outProtocol writeMessageBeginWithName: @"logout"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getOrderList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getOrderList_args * args = [[getOrderList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetOrderList_result * result = [[GetOrderList_result alloc] init];
[result setSuccess: [mService getOrderList: [args auth] type: [args type] page: [args page] size: [args size] searchKey: [args searchKey]]];
[outProtocol writeMessageBeginWithName: @"getOrderList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getOrderInfoByOrderId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getOrderInfoByOrderId_args * args = [[getOrderInfoByOrderId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetOrderInfoByOrderId_result * result = [[GetOrderInfoByOrderId_result alloc] init];
[result setSuccess: [mService getOrderInfoByOrderId: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"getOrderInfoByOrderId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getOrderMeasureByOrderId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getOrderMeasureByOrderId_args * args = [[getOrderMeasureByOrderId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetOrderMeasureByOrderId_result * result = [[GetOrderMeasureByOrderId_result alloc] init];
[result setSuccess: [mService getOrderMeasureByOrderId: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"getOrderMeasureByOrderId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_setOrderDoorTime_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
setOrderDoorTime_args * args = [[setOrderDoorTime_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetOrderDoorTime_result * result = [[SetOrderDoorTime_result alloc] init];
[result setSuccess: [mService setOrderDoorTime: [args auth] orderId: [args orderId] doorTime: [args doorTime] remark: [args remark]]];
[outProtocol writeMessageBeginWithName: @"setOrderDoorTime"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_psrStopOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
psrStopOrder_args * args = [[psrStopOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
PsrStopOrder_result * result = [[PsrStopOrder_result alloc] init];
[result setSuccess: [mService psrStopOrder: [args auth] orderId: [args orderId] pauseReasonMemo: [args pauseReasonMemo] remark: [args remark]]];
[outProtocol writeMessageBeginWithName: @"psrStopOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getForeman_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getForeman_args * args = [[getForeman_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetForeman_result * result = [[GetForeman_result alloc] init];
[result setSuccess: [mService getForeman: [args auth] orderId: [args orderId] startTime: [args startTime] endTime: [args endTime] longitude: [args longitude] latitude: [args latitude]]];
[outProtocol writeMessageBeginWithName: @"getForeman"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_setForeman_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
setForeman_args * args = [[setForeman_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetForeman_result * result = [[SetForeman_result alloc] init];
[result setSuccess: [mService setForeman: [args auth] orderId: [args orderId] startTime: [args startTime] endTime: [args endTime] uid: [args uid] remark: [args remark]]];
[outProtocol writeMessageBeginWithName: @"setForeman"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_uploadOrderPhoto_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
uploadOrderPhoto_args * args = [[uploadOrderPhoto_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UploadOrderPhoto_result * result = [[UploadOrderPhoto_result alloc] init];
[result setSuccess: [mService uploadOrderPhoto: [args auth] orderId: [args orderId] type: [args type] photo: [args photo] ext: [args ext]]];
[outProtocol writeMessageBeginWithName: @"uploadOrderPhoto"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_deleteOrderPhoto_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteOrderPhoto_args * args = [[deleteOrderPhoto_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteOrderPhoto_result * result = [[DeleteOrderPhoto_result alloc] init];
[result setSuccess: [mService deleteOrderPhoto: [args auth] orderId: [args orderId] type: [args type] filename: [args filename]]];
[outProtocol writeMessageBeginWithName: @"deleteOrderPhoto"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_finishOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
finishOrder_args * args = [[finishOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FinishOrder_result * result = [[FinishOrder_result alloc] init];
[result setSuccess: [mService finishOrder: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"finishOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_bindCamera_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
bindCamera_args * args = [[bindCamera_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BindCamera_result * result = [[BindCamera_result alloc] init];
[result setSuccess: [mService bindCamera: [args auth] orderId: [args orderId] cameraCode: [args cameraCode]]];
[outProtocol writeMessageBeginWithName: @"bindCamera"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getCameraUrl_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getCameraUrl_args * args = [[getCameraUrl_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetCameraUrl_result * result = [[GetCameraUrl_result alloc] init];
[result setSuccess: [mService getCameraUrl: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"getCameraUrl"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getNoticeList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getNoticeList_args * args = [[getNoticeList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetNoticeList_result * result = [[GetNoticeList_result alloc] init];
[result setSuccess: [mService getNoticeList: [args auth] page: [args page] pageNumber: [args pageNumber]]];
[outProtocol writeMessageBeginWithName: @"getNoticeList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_setNoticeHaveRead_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
setNoticeHaveRead_args * args = [[setNoticeHaveRead_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetNoticeHaveRead_result * result = [[SetNoticeHaveRead_result alloc] init];
[result setSuccess: [mService setNoticeHaveRead: [args auth] noticeId: [args noticeId]]];
[outProtocol writeMessageBeginWithName: @"setNoticeHaveRead"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getServiceListForOptool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getServiceListForOptool_args * args = [[getServiceListForOptool_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetServiceListForOptool_result * result = [[GetServiceListForOptool_result alloc] init];
[result setSuccess: [mService getServiceListForOptool: [args auth] serviceItemId: [args serviceItemId]]];
[outProtocol writeMessageBeginWithName: @"getServiceListForOptool"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getCraftSuitByServiceItemId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getCraftSuitByServiceItemId_args * args = [[getCraftSuitByServiceItemId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetCraftSuitByServiceItemId_result * result = [[GetCraftSuitByServiceItemId_result alloc] init];
[result setSuccess: [mService getCraftSuitByServiceItemId: [args auth] serviceItemId: [args serviceItemId]]];
[outProtocol writeMessageBeginWithName: @"getCraftSuitByServiceItemId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMaterialInfoByCond_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getMaterialInfoByCond_args * args = [[getMaterialInfoByCond_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetMaterialInfoByCond_result * result = [[GetMaterialInfoByCond_result alloc] init];
[result setSuccess: [mService getMaterialInfoByCond: [args auth] serviceItemId: [args serviceItemId] craftSuitId: [args craftSuitId]]];
[outProtocol writeMessageBeginWithName: @"getMaterialInfoByCond"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getPriceByCond_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPriceByCond_args * args = [[getPriceByCond_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPriceByCond_result * result = [[GetPriceByCond_result alloc] init];
[result setSuccess: [mService getPriceByCond: [args auth] serviceItemId: [args serviceItemId] craftSuitId: [args craftSuitId] materialId: [args materialId]]];
[outProtocol writeMessageBeginWithName: @"getPriceByCond"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_saveOrderService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
saveOrderService_args * args = [[saveOrderService_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SaveOrderService_result * result = [[SaveOrderService_result alloc] init];
[result setSuccess: [mService saveOrderService: [args auth] orderId: [args orderId] mobilePhone: [args mobilePhone] userCalled: [args userCalled] address: [args address] services: [args services]]];
[outProtocol writeMessageBeginWithName: @"saveOrderService"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_followsOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
followsOrder_args * args = [[followsOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FollowsOrder_result * result = [[FollowsOrder_result alloc] init];
[result setSuccess: [mService followsOrder: [args auth] orderId: [args orderId] remark: [args remark]]];
[outProtocol writeMessageBeginWithName: @"followsOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_checkIsDeleteErpOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
checkIsDeleteErpOrder_args * args = [[checkIsDeleteErpOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CheckIsDeleteErpOrder_result * result = [[CheckIsDeleteErpOrder_result alloc] init];
[result setSuccess: [mService checkIsDeleteErpOrder: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"checkIsDeleteErpOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getActivitiesList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getActivitiesList_args * args = [[getActivitiesList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetActivitiesList_result * result = [[GetActivitiesList_result alloc] init];
[result setSuccess: [mService getActivitiesList: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"getActivitiesList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_checkCoupon_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
checkCoupon_args * args = [[checkCoupon_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CheckCoupon_result * result = [[CheckCoupon_result alloc] init];
[result setSuccess: [mService checkCoupon: [args auth] orderId: [args orderId] couponCardNo: [args couponCardNo] activitiesId: [args activitiesId]]];
[outProtocol writeMessageBeginWithName: @"checkCoupon"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_saveOrderActivities_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
saveOrderActivities_args * args = [[saveOrderActivities_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SaveOrderActivities_result * result = [[SaveOrderActivities_result alloc] init];
[result setSuccess: [mService saveOrderActivities: [args auth] orderId: [args orderId] remark: [args remark] camera: [args camera] couponCardNo: [args couponCardNo] activitiesId: [args activitiesId] num: [args num] longitude: [args longitude] latitude: [args latitude]]];
[outProtocol writeMessageBeginWithName: @"saveOrderActivities"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getPaymentInfoByOrderId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPaymentInfoByOrderId_args * args = [[getPaymentInfoByOrderId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPaymentInfoByOrderId_result * result = [[GetPaymentInfoByOrderId_result alloc] init];
[result setSuccess: [mService getPaymentInfoByOrderId: [args auth] orderId: [args orderId]]];
[outProtocol writeMessageBeginWithName: @"getPaymentInfoByOrderId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getUserInfoByUid_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getUserInfoByUid_args * args = [[getUserInfoByUid_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetUserInfoByUid_result * result = [[GetUserInfoByUid_result alloc] init];
[result setSuccess: [mService getUserInfoByUid: [args auth] uid: [args uid]]];
[outProtocol writeMessageBeginWithName: @"getUserInfoByUid"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

